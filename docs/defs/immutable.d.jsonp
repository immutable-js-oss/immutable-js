window.data = JSON.parse("{\"Immutable\":{\"doc\":{\"synopsis\":\"<p>Immutable data encourages pure functions (data-in, data-out) and lends itself\\nto much simpler application development and enabling techniques from\\nfunctional programming such as lazy evaluation.</p>\\n\",\"description\":\"<p>While designed to bring these powerful functional concepts to JavaScript, it\\npresents an Object-Oriented API familiar to Javascript engineers and closely\\nmirroring that of Array, Map, and Set. It is easy and efficient to convert to\\nand from plain Javascript types.</p>\\n<h2 id=\\\"how-to-read-these-docs\\\">How to read these docs</h2>\\n<p>In order to better explain what kinds of values the Immutable.js API expects\\nand produces, this documentation is presented in a statically typed dialect of\\nJavaScript (like <a href=\\\"https://flowtype.org/\\\">Flow</a> or <a href=\\\"http://www.typescriptlang.org/\\\">TypeScript</a>). You <em>don&#39;t need</em> to use these\\ntype checking tools in order to use Immutable.js, however becoming familiar\\nwith their syntax will help you get a deeper understanding of this API.</p>\\n<p><strong>A few examples and how to read them.</strong></p>\\n<p>All methods describe the kinds of data they accept and the kinds of data\\nthey return. For example a function which accepts two numbers and returns\\na number would look like this:</p>\\n<code class=\\\"codeBlock\\\">sum<span class=\\\"token punctuation\\\" >(</span>first<span class=\\\"token punctuation\\\" >:</span> number<span class=\\\"token punctuation\\\" >,</span> second<span class=\\\"token punctuation\\\" >:</span> number<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >:</span> number</code><p>Sometimes, methods can accept different kinds of data or return different\\nkinds of data, and this is described with a <em>type variable</em>, which is\\ntypically in all-caps. For example, a function which always returns the same\\nkind of data it was provided would look like this:</p>\\n<code class=\\\"codeBlock\\\">identity<span class=\\\"token operator\\\" >&lt;</span>T<span class=\\\"token operator\\\" >></span><span class=\\\"token punctuation\\\" >(</span>value<span class=\\\"token punctuation\\\" >:</span> T<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >:</span> T</code><p>Type variables are defined with classes and referred to in methods. For\\nexample, a class that holds onto a value for you might look like this:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >class</span> <span class=\\\"token class-name\\\" >Box</span><span class=\\\"token operator\\\" >&lt;</span>T<span class=\\\"token operator\\\" >></span> <span class=\\\"token punctuation\\\" >{</span>\\n  constructor<span class=\\\"token punctuation\\\" >(</span>value<span class=\\\"token punctuation\\\" >:</span> T<span class=\\\"token punctuation\\\" >)</span>\\n  getValue<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >:</span> T\\n<span class=\\\"token punctuation\\\" >}</span></code><p>In order to manipulate Immutable data, methods that we&#39;re used to affecting\\na Collection instead return a new Collection of the same type. The type\\n<code><span class=\\\"token var\\\" >this</span></code> refers to the same kind of class. For example, a List which returns\\nnew Lists when you <code>push</code> a value onto it might look like:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >class</span> <span class=\\\"token class-name\\\" >List</span><span class=\\\"token operator\\\" >&lt;</span>T<span class=\\\"token operator\\\" >></span> <span class=\\\"token punctuation\\\" >{</span>\\n  push<span class=\\\"token punctuation\\\" >(</span>value<span class=\\\"token punctuation\\\" >:</span> T<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token var\\\" >this</span>\\n<span class=\\\"token punctuation\\\" >}</span></code><p>Many methods in Immutable.js accept values which implement the JavaScript\\n<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\\\">Iterable</a> protocol, and might appear like <code><span class=\\\"token qualifier\\\" >Iterable</span><span class=\\\"token operator\\\" >&lt;</span>string<span class=\\\"token operator\\\" >></span></code> for something\\nwhich represents sequence of strings. Typically in JavaScript we use plain\\nArrays (<code><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >]</span></code>) when an Iterable is expected, but also all of the Immutable.js\\ncollections are iterable themselves!</p>\\n<p>For example, to get a value deep within a structure of data, we might use\\n<code>getIn</code> which expects an <code><span class=\\\"token qualifier\\\" >Iterable</span></code> path:</p>\\n<code class=\\\"codeBlock\\\">getIn<span class=\\\"token punctuation\\\" >(</span>path<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Iterable</span><span class=\\\"token operator\\\" >&lt;</span>string <span class=\\\"token operator\\\" >|</span> number<span class=\\\"token operator\\\" >></span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >:</span> any</code><p>To use this method, we could pass an array: <code>data<span class=\\\"token punctuation\\\" >.</span>getIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >\\\"key\\\"</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<p>Note: All examples are presented in the modern <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\\\">ES2015</a> version of\\nJavaScript. Use tools like Babel to support older browsers.</p>\\n<p>For example:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ES2015\\n</span><span class=\\\"token keyword\\\" >const</span> mappedFoo <span class=\\\"token operator\\\" >=</span> foo<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ES5\\n</span><span class=\\\"token keyword\\\" >var</span> mappedFoo <span class=\\\"token operator\\\" >=</span> foo<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token block-keyword\\\" >function</span> <span class=\\\"token punctuation\\\" >(</span>x<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token keyword\\\" >return</span> x <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"module\":{\"List\":{\"doc\":{\"synopsis\":\"<p>Lists are ordered indexed dense collections, much like a JavaScript\\nArray.</p>\\n\",\"description\":\"<p>Lists are immutable and fully persistent with O(log32 N) gets and sets,\\nand O(1) push and pop.</p>\\n<p>Lists implement Deque, with efficient addition and removal from both the\\nend (<code>push</code>, <code>pop</code>) and beginning (<code>unshift</code>, <code>shift</code>).</p>\\n<p>Unlike a JavaScript Array, there is no distinction between an\\n&quot;unset&quot; index and an index set to <code><span class=\\\"token primitive\\\" >undefined</span></code>. <code><span class=\\\"token qualifier\\\" >List</span>#forEach</code> visits all\\nindices from 0 to size, regardless of whether they were explicitly defined.</p>\\n\",\"notes\":[]},\"module\":{\"isList\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is a List</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >.</span>isList<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >.</span>isList<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeList\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":127}]}},\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new List containing <code><span class=\\\"t param\\\">values</span></code>.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, 2, 3, 4 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: Values are not altered or converted in any way.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>x<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ { x: 1 }, 2, [ 3 ], 4 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":148}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Create a new immutable List containing the values of the provided\\ncollection-like.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >List</span></code> is a factory function and not a class, and does not use the\\n<code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Set</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n\\n<span class=\\\"token keyword\\\" >const</span> emptyList <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List []\\n</span>\\n<span class=\\\"token keyword\\\" >const</span> plainArray <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span>\\n<span class=\\\"token keyword\\\" >const</span> listFromPlainArray <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span>plainArray<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, 2, 3, 4 ]\\n</span>\\n<span class=\\\"token keyword\\\" >const</span> plainSet <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> listFromPlainSet <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span>plainSet<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, 2, 3, 4 ]\\n</span>\\n<span class=\\\"token keyword\\\" >const</span> arrayIterator <span class=\\\"token operator\\\" >=</span> plainArray<span class=\\\"token punctuation\\\" >[</span><span class=\\\"token qualifier\\\" >Symbol</span><span class=\\\"token punctuation\\\" >.</span>iterator<span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> listFromCollectionArray <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span>arrayIterator<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, 2, 3, 4 ]\\n</span>\\nlistFromPlainArray<span class=\\\"token punctuation\\\" >.</span>equals<span class=\\\"token punctuation\\\" >(</span>listFromCollectionArray<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>listFromPlainSet<span class=\\\"token punctuation\\\" >.</span>equals<span class=\\\"token punctuation\\\" >(</span>listFromCollectionArray<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>listFromPlainSet<span class=\\\"token punctuation\\\" >.</span>equals<span class=\\\"token punctuation\\\" >(</span>listFromPlainArray<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":0}]},\"line\":182},{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":183},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":184}]},\"interface\":{\"line\":186,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#size\":{\"line\":191}}},{\"title\":\"Persistent changes\",\"members\":{\"#set\":{\"doc\":{\"synopsis\":\"<p>Returns a new List which includes <code><span class=\\\"t param\\\">value</span></code> at <code><span class=\\\"t param\\\">index</span></code>. If <code><span class=\\\"t param\\\">index</span></code> already\\nexists in this List, it will be replaced.</p>\\n\",\"description\":\"<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nList. <code>v<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >\\\"value\\\"</span><span class=\\\"token punctuation\\\" >)</span></code> sets the last item in the List.</p>\\n<p>If <code><span class=\\\"t param\\\">index</span></code> larger than <code>size</code>, the returned List&#39;s <code>size</code> will be large\\nenough to include the <code><span class=\\\"t param\\\">index</span></code>.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> originalList <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >0</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 0 ]\\n</span>originalList<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 0, 1 ]\\n</span>originalList<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'overwritten'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ \\\"overwritten\\\" ]\\n</span>originalList<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 0, undefined, 2 ]\\n</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >50000</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'value'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>size<span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 50001</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code><span class=\\\"token keyword\\\" >set</span></code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":224}]},\"#delete\":{\"doc\":{\"synopsis\":\"<p>Returns a new List which excludes this <code><span class=\\\"t param\\\">index</span></code> and with a size 1 less\\nthan this List. Values at indices above <code><span class=\\\"t param\\\">index</span></code> are shifted down by 1 to\\nfill the position.</p>\\n\",\"description\":\"<p>This is synonymous with <code>list<span class=\\\"token punctuation\\\" >.</span>splice<span class=\\\"token punctuation\\\" >(</span>index<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nList. <code>v<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >delete</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code> deletes the last item in the List.</p>\\n<p>Note: <code><span class=\\\"token keyword\\\" >delete</span></code> cannot be safely used in IE8</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >delete</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, 2, 3, 4 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Since <code><span class=\\\"token keyword\\\" >delete</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> re-indexes values, it produces a complete copy, which\\nhas <code>O<span class=\\\"token punctuation\\\" >(</span>N<span class=\\\"token punctuation\\\" >)</span></code> complexity.</p>\\n<p>Note: <code><span class=\\\"token keyword\\\" >delete</span></code> <em>cannot</em> be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"remove\"}]},\"signatures\":[{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":253}]},\"#insert\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with <code><span class=\\\"t param\\\">value</span></code> at <code><span class=\\\"t param\\\">index</span></code> with a size 1 more than this\\nList. Values at indices above <code><span class=\\\"t param\\\">index</span></code> are shifted over by 1.</p>\\n\",\"description\":\"<p>This is synonymous with <code>list<span class=\\\"token punctuation\\\" >.</span>splice<span class=\\\"token punctuation\\\" >(</span>index<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> value<span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>insert<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >6</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 0, 1, 2, 3, 4, 5 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Since <code>insert<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> re-indexes values, it produces a complete copy, which\\nhas <code>O<span class=\\\"token punctuation\\\" >(</span>N<span class=\\\"token punctuation\\\" >)</span></code> complexity.</p>\\n<p>Note: <code>insert</code> <em>cannot</em> be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":275}]},\"#clear\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with 0 size and no values in constant time.</p>\\n\",\"description\":\"<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>clear<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List []</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>clear</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":290}]},\"#push\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with the provided <code><span class=\\\"t param\\\">values</span></code> appended, starting at this\\nList&#39;s <code>size</code>.</p>\\n\",\"description\":\"<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>push<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, 2, 3, 4, 5 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>push</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":306}]},\"#pop\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with a size ones less than this List, excluding\\nthe last index in this List.</p>\\n\",\"description\":\"<p>Note: this differs from <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\\\">Array#pop</a></code> because it returns a new\\nList rather than the removed value. Use <code>last<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> to get the last value\\nin this List.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>pop<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List[ 1, 2, 3 ]</span></code><p>Note: <code>pop</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":323}]},\"#unshift\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with the provided <code><span class=\\\"t param\\\">values</span></code> prepended, shifting other\\nvalues ahead to higher indices.</p>\\n\",\"description\":\"<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>unshift<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, 2, 3, 4 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>unshift</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":339}]},\"#shift\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with a size ones less than this List, excluding\\nthe first index in this List, shifting all other values to a lower index.</p>\\n\",\"description\":\"<p>Note: this differs from <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\\\">Array#shift</a></code> because it returns a new\\nList rather than the removed value. Use <code>first<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> to get the first\\nvalue in this List.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>shift<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, 2, 3, 4 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>shift</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":359}]},\"#update\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with an updated value at <code><span class=\\\"t param\\\">index</span></code> with the return\\nvalue of calling <code><span class=\\\"t param\\\">updater</span></code> with the existing value, or <code><span class=\\\"t param\\\">notSetValue</span></code> if\\n<code><span class=\\\"t param\\\">index</span></code> was not set. If called with a single argument, <code><span class=\\\"t param\\\">updater</span></code> is\\ncalled with the List itself.</p>\\n\",\"description\":\"<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nList. <code>v<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code> updates the last item in the List.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> list <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> result <span class=\\\"token operator\\\" >=</span> list<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> val <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val<span class=\\\"token punctuation\\\" >.</span>toUpperCase<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ \\\"a\\\", \\\"b\\\", \\\"C\\\" ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>This can be very useful as a way to &quot;chain&quot; a normal function into a\\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\\n<p>For example, to sum a List after mapping and filtering:</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token block-keyword\\\" >function</span> sum<span class=\\\"token punctuation\\\" >(</span>collection<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n  <span class=\\\"token keyword\\\" >return</span> collection<span class=\\\"token punctuation\\\" >.</span>reduce<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>sum<span class=\\\"token punctuation\\\" >,</span> x<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> sum <span class=\\\"token operator\\\" >+</span> x<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >}</span>\\n\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >+</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span>sum<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 6</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>update<span class=\\\"token punctuation\\\" >(</span>index<span class=\\\"token punctuation\\\" >)</span></code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#update</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":8,\"param\":\"T\"}}}],\"type\":{\"k\":10},\"line\":403},{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":8,\"param\":\"T\"}}}],\"type\":{\"k\":10},\"line\":404},{\"typeParams\":[\"R\"],\"params\":[{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"R\"}}}],\"type\":{\"k\":8,\"param\":\"R\"},\"line\":405}]},\"#setSize\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with size <code><span class=\\\"t param\\\">size</span></code>. If <code><span class=\\\"t param\\\">size</span></code> is less than this\\nList&#39;s size, the new List will exclude values at the higher indices.\\nIf <code><span class=\\\"t param\\\">size</span></code> is greater than this List&#39;s size, the new List will have\\nundefined values for the newly available indices.</p>\\n\",\"description\":\"<p>When building a new List and the final size is known up front, <code>setSize</code>\\nused in conjunction with <code>withMutations</code> may result in the more\\nperformant construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"size\",\"type\":{\"k\":2}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":417}]}}},{\"title\":\"Deep persistent changes\",\"members\":{\"#setIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new List having set <code><span class=\\\"t param\\\">value</span></code> at this <code><span class=\\\"t param\\\">keyPath</span></code>. If any keys in\\n<code><span class=\\\"t param\\\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\\n\",\"description\":\"<p>Index numbers are used as keys to determine the path to follow in\\nthe List.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> list <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\nlist<span class=\\\"token punctuation\\\" >.</span>setIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >999</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 0, 1, 2, List [ 999, 4 ] ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\\nCollection, and setIn() can update those values as well, treating them\\nimmutably by creating new copies of those values with the changes applied.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> list <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >{</span> plain<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'object'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\nlist<span class=\\\"token punctuation\\\" >.</span>setIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'plain'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'value'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List([ 0, 1, 2, { plain: 'value' }])</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>setIn</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":10},\"line\":451}]},\"#deleteIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new List having removed the value at this <code><span class=\\\"t param\\\">keyPath</span></code>. If any\\nkeys in <code><span class=\\\"t param\\\">keyPath</span></code> do not exist, no change will occur.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> list <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\nlist<span class=\\\"token punctuation\\\" >.</span>deleteIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 0, 1, 2, List [ 4 ] ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\\nCollection, and removeIn() can update those values as well, treating them\\nimmutably by creating new copies of those values with the changes applied.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> list <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >{</span> plain<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'object'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\nlist<span class=\\\"token punctuation\\\" >.</span>removeIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'plain'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List([ 0, 1, 2, {}])</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>deleteIn</code> <em>cannot</em> be safely used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"removeIn\"}]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":10},\"line\":481}]},\"#updateIn\":{\"doc\":{\"synopsis\":\"<p>Note: <code>updateIn</code> can be used in <code>withMutations</code>.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#updateIn</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"notSetValue\",\"type\":{\"k\":0}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":489},{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":490}]},\"#mergeIn\":{\"doc\":{\"synopsis\":\"<p>Note: <code>mergeIn</code> can be used in <code>withMutations</code>.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#mergeIn</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":497}]},\"#mergeDeepIn\":{\"doc\":{\"synopsis\":\"<p>Note: <code>mergeDeepIn</code> can be used in <code>withMutations</code>.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#mergeDeepIn</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":504}]}}},{\"title\":\"Transient changes\",\"members\":{\"#withMutations\":{\"doc\":{\"synopsis\":\"<p>Note: Not all methods can be safely used on a mutable collection or within\\n<code>withMutations</code>! Check the documentation for each method to see if it\\nallows being used in <code>withMutations</code>.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#withMutations</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"mutator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"mutable\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":515}]},\"#asMutable\":{\"doc\":{\"synopsis\":\"<p>An alternative API for withMutations()</p>\\n\",\"description\":\"<p>Note: Not all methods can be safely used on a mutable collection or within\\n<code>withMutations</code>! Check the documentation for each method to see if it\\nallows being used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asMutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":526}]},\"#wasAltered\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#wasAltered</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":1},\"line\":531}]},\"#asImmutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asImmutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":536}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with other values or collections concatenated to this one.</p>\\n\",\"description\":\"<p>Note: <code>concat</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"merge\"}]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"valuesOrCollections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"C\"}]},{\"k\":8,\"param\":\"C\"}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":547}]},\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 10, 20 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":562}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the List, returning a new List.</p>\\n\",\"description\":\"<p>Similar to <code>list<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":572}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"F\"}]},\"line\":584},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":588}]},\"#zip\":{\"doc\":{\"synopsis\":\"<p>Returns a List &quot;zipped&quot; with the provided collection.</p>\\n\",\"description\":\"<p>Like <code>zipWith</code>, but using the default <code>zipper</code>: creating an <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\\\">Array</a></code>.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zip<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":607},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":608},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":0}]},\"line\":609}]},\"#zipAll\":{\"doc\":{\"synopsis\":\"<p>Returns a List &quot;zipped&quot; with the provided collections.</p>\\n\",\"description\":\"<p>Unlike <code>zip</code>, <code>zipAll</code> continues zipping until the longest collection is\\nexhausted. Missing values from shorter collections are filled with <code><span class=\\\"token primitive\\\" >undefined</span></code>.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zipAll<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: Since zipAll will return a collection as large as the largest\\ninput, some results may contain undefined values. TypeScript cannot\\naccount for these without cases (as of v2.5).</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":630},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":631},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":0}]},\"line\":632}]},\"#zipWith\":{\"doc\":{\"synopsis\":\"<p>Returns a List &quot;zipped&quot; with the provided collections by using a\\ncustom <code><span class=\\\"t param\\\">zipper</span></code> function.</p>\\n\",\"description\":\"<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zipWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>a<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> a <span class=\\\"token operator\\\" >+</span> b<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 5, 7, 9 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":648},{\"typeParams\":[\"U\",\"V\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}},{\"name\":\"thirdValue\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"thirdCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":652},{\"typeParams\":[\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"any\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":657}]}}}]}},\"Map\":{\"doc\":{\"synopsis\":\"<p>Immutable Map is an unordered Collection.Keyed of (key, value) pairs with\\n<code>O<span class=\\\"token punctuation\\\" >(</span>log32 N<span class=\\\"token punctuation\\\" >)</span></code> gets and <code>O<span class=\\\"token punctuation\\\" >(</span>log32 N<span class=\\\"token punctuation\\\" >)</span></code> persistent sets.</p>\\n\",\"description\":\"<p>Iteration order of a Map is undefined, however is stable. Multiple\\niterations of the same Map will iterate in the same order.</p>\\n<p>Map&#39;s keys can be of any type, and use <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is</code> to determine key\\nequality. This allows the use of any value (including NaN) as a key.</p>\\n<p>Because <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is</code> returns equality based on value semantics, and\\nImmutable collections are treated as values, any Immutable collection may\\nbe used as a key.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'listofone'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 'listofone'</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Any JavaScript object may be used as a key, however strict identity is used\\nto evaluate key equality. Two similar looking objects will represent two\\ndifferent keys.</p>\\n<p>Implemented by a hash-array mapped trie.</p>\\n\",\"notes\":[]},\"module\":{\"isMap\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is a Map</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>isMap<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>isMap<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeMap\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":703}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new Immutable Map.</p>\\n\",\"description\":\"<p>Created with the same key value pairs as the provided Collection.Keyed or\\nJavaScript Object or expects a Collection of [K, V] tuple entries.</p>\\n<p>Note: <code><span class=\\\"token qualifier\\\" >Map</span></code> is a factory function and not a class, and does not use the\\n<code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> key<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >\\\"value\\\"</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >\\\"key\\\"</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >\\\"value\\\"</span> <span class=\\\"token punctuation\\\" >]</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Keep in mind, when using JS objects to construct Immutable Maps, that\\nJavaScript Object properties are always strings, even if written in a\\nquote-less shorthand, while Immutable Maps accept keys of any type.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >let</span> obj <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >\\\"one\\\"</span> <span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token qualifier\\\" >Object</span><span class=\\\"token punctuation\\\" >.</span>keys<span class=\\\"token punctuation\\\" >(</span>obj<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ \\\"1\\\" ]\\n</span>assert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span>obj<span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >\\\"1\\\"</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> obj<span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"one\\\" === \\\"one\\\"\\n</span>\\n<span class=\\\"token keyword\\\" >let</span> map <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span>obj<span class=\\\"token punctuation\\\" >)</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>notEqual<span class=\\\"token punctuation\\\" >(</span>map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >\\\"1\\\"</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"one\\\" !== undefined</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Property access for JavaScript Objects first converts the key to a string,\\nbut since Immutable Map keys can be of any type the argument to <code><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> is\\nnot altered.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":760},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":761},{\"typeParams\":[\"K\",\"V\"],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":762},{\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":763}]},\"interface\":{\"line\":765,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#size\":{\"line\":770}}},{\"title\":\"Persistent changes\",\"members\":{\"#set\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map also containing the new key, value pair. If an equivalent\\nkey already exists in this Map, it will be replaced.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> originalMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newerMap <span class=\\\"token operator\\\" >=</span> originalMap<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'key'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'value'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newestMap <span class=\\\"token operator\\\" >=</span> newerMap<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'key'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'newer value'</span><span class=\\\"token punctuation\\\" >)</span>\\n\\noriginalMap\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map {}\\n</span>newerMap\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"key\\\": \\\"value\\\" }\\n</span>newestMap\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"key\\\": \\\"newer value\\\" }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code><span class=\\\"token keyword\\\" >set</span></code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":10},\"line\":795}]},\"#delete\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map which excludes this <code><span class=\\\"t param\\\">key</span></code>.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token keyword\\\" >delete</span></code> cannot be safely used in IE8, but is provided to mirror\\nthe ES6 collection API.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> originalMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>\\n  key<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'value'</span><span class=\\\"token punctuation\\\" >,</span>\\n  otherKey<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'other value'</span>\\n<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"key\\\": \\\"value\\\", \\\"otherKey\\\": \\\"other value\\\" }\\n</span>originalMap<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >delete</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'otherKey'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"key\\\": \\\"value\\\" }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code><span class=\\\"token keyword\\\" >delete</span></code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"remove\"}]},\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":10},\"line\":819}]},\"#deleteAll\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map which excludes the provided <code><span class=\\\"t param\\\">keys</span></code>.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> names <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >\\\"Aaron\\\"</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >\\\"Barry\\\"</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >\\\"Connor\\\"</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\nnames<span class=\\\"token punctuation\\\" >.</span>deleteAll<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"b\\\": \\\"Barry\\\" }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>deleteAll</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"removeAll\"}]},\"signatures\":[{\"params\":[{\"name\":\"keys\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"}]}}],\"type\":{\"k\":10},\"line\":837}]},\"#clear\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map containing no keys or values.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> key<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'value'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>clear<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map {}</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>clear</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":852}]},\"#update\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map having updated the value at this <code><span class=\\\"t param\\\">key</span></code> with the return\\nvalue of calling <code><span class=\\\"t param\\\">updater</span></code> with the existing value.</p>\\n\",\"description\":\"<p>Similar to: <code>map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >,</span> updater<span class=\\\"token punctuation\\\" >(</span>map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> aMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> key<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'value'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> aMap<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'key'</span><span class=\\\"token punctuation\\\" >,</span> value <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> value <span class=\\\"token operator\\\" >+</span> value<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"key\\\": \\\"valuevalue\\\" }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>This is most commonly used to call methods on collections within a\\nstructure of data. For example, in order to <code><span class=\\\"token punctuation\\\" >.</span>push<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> onto a nested <code><span class=\\\"token qualifier\\\" >List</span></code>,\\n<code>update</code> and <code>push</code> can be used together:</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map, List } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> aMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> nestedList<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> aMap<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'nestedList'</span><span class=\\\"token punctuation\\\" >,</span> list <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> list<span class=\\\"token punctuation\\\" >.</span>push<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"nestedList\\\": List [ 1, 2, 3, 4 ] }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%2C%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>When a <code><span class=\\\"t param\\\">notSetValue</span></code> is provided, it is provided to the <code><span class=\\\"t param\\\">updater</span></code>\\nfunction when the value at the key does not exist in the Map.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> aMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> key<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'value'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> aMap<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'noKey'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'no value'</span><span class=\\\"token punctuation\\\" >,</span> value <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> value <span class=\\\"token operator\\\" >+</span> value<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"key\\\": \\\"value\\\", \\\"noKey\\\": \\\"no valueno value\\\" }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>However, if the <code><span class=\\\"t param\\\">updater</span></code> function returns the same value it was called\\nwith, then no change will occur. This is still true if <code><span class=\\\"t param\\\">notSetValue</span></code>\\nis provided.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> aMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> apples<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> aMap<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'oranges'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> val <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"apples\\\": 10 }\\n</span>assert<span class=\\\"token punctuation\\\" >.</span>strictEqual<span class=\\\"token punctuation\\\" >(</span>newMap<span class=\\\"token punctuation\\\" >,</span> map<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>For code using ES2015 or later, using <code><span class=\\\"t param\\\">notSetValue</span></code> is discourged in\\nfavor of function parameter default values. This helps to avoid any\\npotential confusion with identify functions as described above.</p>\\n<p>The previous example behaves differently when written with default values:</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> aMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> apples<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> aMap<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'oranges'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >(</span>val <span class=\\\"token operator\\\" >=</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"apples\\\": 10, \\\"oranges\\\": 0 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>If no key is provided, then the <code><span class=\\\"t param\\\">updater</span></code> function return value is\\nreturned as well.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> aMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> key<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'value'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> result <span class=\\\"token operator\\\" >=</span> aMap<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span>aMap <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> aMap<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'key'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"value\\\"</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>This can be very useful as a way to &quot;chain&quot; a normal function into a\\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\\n<p>For example, to sum the values in a Map</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable');\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token block-keyword\\\" >function</span> sum<span class=\\\"token punctuation\\\" >(</span>collection<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n  <span class=\\\"token keyword\\\" >return</span> collection<span class=\\\"token punctuation\\\" >.</span>reduce<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>sum<span class=\\\"token punctuation\\\" >,</span> x<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> sum <span class=\\\"token operator\\\" >+</span> x<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >}</span>\\n\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >+</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span>sum<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 6</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>update<span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >)</span></code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":10},\"line\":956},{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":10},\"line\":957},{\"typeParams\":[\"R\"],\"params\":[{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"R\"}}}],\"type\":{\"k\":8,\"param\":\"R\"},\"line\":958}]},\"#merge\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map resulting from merging the provided Collections\\n(or JS objects) into this Map. In other words, this takes each entry of\\neach collection and sets it on this Map.</p>\\n\",\"description\":\"<p>Note: Values provided to <code>merge</code> are shallowly converted before being\\nmerged. No nested values are altered.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> one <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >30</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> two <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >40</span><span class=\\\"token punctuation\\\" >,</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >50</span><span class=\\\"token punctuation\\\" >,</span> d<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >60</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\none<span class=\\\"token punctuation\\\" >.</span>merge<span class=\\\"token punctuation\\\" >(</span>two<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"a\\\": 50, \\\"b\\\": 40, \\\"c\\\": 30, \\\"d\\\": 60 }\\n</span>two<span class=\\\"token punctuation\\\" >.</span>merge<span class=\\\"token punctuation\\\" >(</span>one<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"b\\\": 20, \\\"a\\\": 10, \\\"d\\\": 60, \\\"c\\\": 30 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>merge</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"concat\"}]},\"signatures\":[{\"typeParams\":[\"KC\",\"VC\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KC\"},{\"k\":8,\"param\":\"VC\"}]}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"KC\"}]},{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"VC\"}]}]},\"line\":981},{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"C\"}}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":3}]},{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":982}]},\"#mergeWith\":{\"doc\":{\"synopsis\":\"<p>Like <code>merge<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, <code>mergeWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> returns a new Map resulting from merging\\nthe provided Collections (or JS objects) into this Map, but uses the\\n<code><span class=\\\"t param\\\">merger</span></code> function for dealing with conflicts.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> one <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >30</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> two <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >40</span><span class=\\\"token punctuation\\\" >,</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >50</span><span class=\\\"token punctuation\\\" >,</span> d<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >60</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\none<span class=\\\"token punctuation\\\" >.</span>mergeWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>oldVal<span class=\\\"token punctuation\\\" >,</span> newVal<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> oldVal <span class=\\\"token operator\\\" >/</span> newVal<span class=\\\"token punctuation\\\" >,</span> two<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { \\\"a\\\": 0.2, \\\"b\\\": 0.5, \\\"c\\\": 30, \\\"d\\\": 60 }\\n</span>two<span class=\\\"token punctuation\\\" >.</span>mergeWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>oldVal<span class=\\\"token punctuation\\\" >,</span> newVal<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> oldVal <span class=\\\"token operator\\\" >/</span> newVal<span class=\\\"token punctuation\\\" >,</span> one<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { \\\"b\\\": 2, \\\"a\\\": 5, \\\"d\\\": 60, \\\"c\\\": 30 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>mergeWith</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"oldVal\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"newVal\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":8,\"param\":\"V\"}}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":1004}]},\"#mergeDeep\":{\"doc\":{\"synopsis\":\"<p>Like <code>merge<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, but when two Collections conflict, it merges them as well,\\nrecursing deeply through the nested data.</p>\\n\",\"description\":\"<p>Note: Values provided to <code>merge</code> are shallowly converted before being\\nmerged. No nested values are altered unless they will also be merged at\\na deeper level.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> one <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >50</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> two <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\none<span class=\\\"token punctuation\\\" >.</span>mergeDeep<span class=\\\"token punctuation\\\" >(</span>two<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map {\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   \\\"a\\\": Map { \\\"x\\\": 2, \\\"y\\\": 10 },\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   \\\"b\\\": Map { \\\"x\\\": 20, \\\"y\\\": 5 },\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   \\\"c\\\": Map { \\\"z\\\": 3 }\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>mergeDeep</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":1032}]},\"#mergeDeepWith\":{\"doc\":{\"synopsis\":\"<p>Like <code>mergeDeep<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, but when two non-Collections conflict, it uses the\\n<code><span class=\\\"t param\\\">merger</span></code> function to determine the resulting value.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> one <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >50</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> two <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\none<span class=\\\"token punctuation\\\" >.</span>mergeDeepWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>oldVal<span class=\\\"token punctuation\\\" >,</span> newVal<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> oldVal <span class=\\\"token operator\\\" >/</span> newVal<span class=\\\"token punctuation\\\" >,</span> two<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map {\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   \\\"a\\\": Map { \\\"x\\\": 5, \\\"y\\\": 10 },\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   \\\"b\\\": Map { \\\"x\\\": 20, \\\"y\\\": 10 },\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   \\\"c\\\": Map { \\\"z\\\": 3 }\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>mergeDeepWith</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"oldVal\",\"type\":{\"k\":0}},{\"name\":\"newVal\",\"type\":{\"k\":0}},{\"name\":\"key\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":1053}]}}},{\"title\":\"Deep persistent changes\",\"members\":{\"#setIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map having set <code><span class=\\\"t param\\\">value</span></code> at this <code><span class=\\\"t param\\\">keyPath</span></code>. If any keys in\\n<code><span class=\\\"t param\\\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> originalMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>\\n  subObject<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>\\n    subKey<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'subvalue'</span><span class=\\\"token punctuation\\\" >,</span>\\n    subSubObject<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>\\n      subSubKey<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'subSubValue'</span>\\n    <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> originalMap<span class=\\\"token punctuation\\\" >.</span>setIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'subObject'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'subKey'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'ha ha!'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map {\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   \\\"subObject\\\": Map {\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//     \\\"subKey\\\": \\\"ha ha!\\\",\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//     \\\"subSubObject\\\": Map { \\\"subSubKey\\\": \\\"subSubValue\\\" }\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   }\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }\\n</span>\\n<span class=\\\"token keyword\\\" >const</span> newerMap <span class=\\\"token operator\\\" >=</span> originalMap<span class=\\\"token punctuation\\\" >.</span>setIn<span class=\\\"token punctuation\\\" >(</span>\\n  <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'subObject'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'subSubObject'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'subSubKey'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span>\\n  <span class=\\\"token string\\\" >'ha ha ha!'</span>\\n<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map {\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   \\\"subObject\\\": Map {\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//     \\\"subKey\\\": \\\"subvalue\\\",\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//     \\\"subSubObject\\\": Map { \\\"subSubKey\\\": \\\"ha ha ha!\\\" }\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   }\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\\nCollection, and setIn() can update those values as well, treating them\\nimmutably by creating new copies of those values with the changes applied.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> originalMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>\\n  subObject<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span>\\n    subKey<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'subvalue'</span><span class=\\\"token punctuation\\\" >,</span>\\n    subSubObject<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span>\\n      subSubKey<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'subSubValue'</span>\\n    <span class=\\\"token punctuation\\\" >}</span>\\n  <span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n\\noriginalMap<span class=\\\"token punctuation\\\" >.</span>setIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'subObject'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'subKey'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'ha ha!'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map {\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   \\\"subObject\\\": {\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//     subKey: \\\"ha ha!\\\",\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//     subSubObject: { subSubKey: \\\"subSubValue\\\" }\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   }\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>If any key in the path exists but cannot be updated (such as a primitive\\nlike number or a custom Object like Date), an error will be thrown.</p>\\n<p>Note: <code>setIn</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":10},\"line\":1127}]},\"#deleteIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map having removed the value at this <code><span class=\\\"t param\\\">keyPath</span></code>. If any keys\\nin <code><span class=\\\"t param\\\">keyPath</span></code> do not exist, no change will occur.</p>\\n\",\"description\":\"<p>Note: <code>deleteIn</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"removeIn\"}]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":10},\"line\":1137}]},\"#updateIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map having applied the <code><span class=\\\"t param\\\">updater</span></code> to the entry found at the\\nkeyPath.</p>\\n\",\"description\":\"<p>This is most commonly used to call methods on collections nested within a\\nstructure of data. For example, in order to <code><span class=\\\"token punctuation\\\" >.</span>push<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> onto a nested <code><span class=\\\"token qualifier\\\" >List</span></code>,\\n<code>updateIn</code> and <code>push</code> can be used together:</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> map <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> inMap<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> inList<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> map<span class=\\\"token punctuation\\\" >.</span>updateIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'inMap'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'inList'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> list <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> list<span class=\\\"token punctuation\\\" >.</span>push<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"inMap\\\": Map { \\\"inList\\\": List [ 1, 2, 3, 4 ] } }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>If any keys in <code><span class=\\\"t param\\\">keyPath</span></code> do not exist, new Immutable <code><span class=\\\"token qualifier\\\" >Map</span></code>s will\\nbe created at those keys. If the <code><span class=\\\"t param\\\">keyPath</span></code> does not already contain a\\nvalue, the <code><span class=\\\"t param\\\">updater</span></code> function will be called with <code><span class=\\\"t param\\\">notSetValue</span></code>, if\\nprovided, otherwise <code><span class=\\\"token primitive\\\" >undefined</span></code>.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable')\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> map <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> map<span class=\\\"token punctuation\\\" >.</span>updateIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> val <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val <span class=\\\"token operator\\\" >*</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"a\\\": Map { \\\"b\\\": Map { \\\"c\\\": 20 } } }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>If the <code><span class=\\\"t param\\\">updater</span></code> function returns the same value it was called with, then\\nno change will occur. This is still true if <code><span class=\\\"t param\\\">notSetValue</span></code> is provided.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable')\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> map <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> map<span class=\\\"token punctuation\\\" >.</span>updateIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >100</span><span class=\\\"token punctuation\\\" >,</span> val <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"a\\\": Map { \\\"b\\\": Map { \\\"c\\\": 10 } } }\\n</span>assert<span class=\\\"token punctuation\\\" >.</span>strictEqual<span class=\\\"token punctuation\\\" >(</span>newMap<span class=\\\"token punctuation\\\" >,</span> aMap<span class=\\\"token punctuation\\\" >)</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>For code using ES2015 or later, using <code><span class=\\\"t param\\\">notSetValue</span></code> is discourged in\\nfavor of function parameter default values. This helps to avoid any\\npotential confusion with identify functions as described above.</p>\\n<p>The previous example behaves differently when written with default values:</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable')\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> map <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> map<span class=\\\"token punctuation\\\" >.</span>updateIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >(</span>val <span class=\\\"token operator\\\" >=</span> <span class=\\\"token number\\\" >100</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"a\\\": Map { \\\"b\\\": Map { \\\"c\\\": 10, \\\"x\\\": 100 } } }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\\nCollection, and updateIn() can update those values as well, treating them\\nimmutably by creating new copies of those values with the changes applied.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Map } = require('immutable')\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> map <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> newMap <span class=\\\"token operator\\\" >=</span> map<span class=\\\"token punctuation\\\" >.</span>updateIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> val <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val <span class=\\\"token operator\\\" >*</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"a\\\": { b: { c: 20 } } }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Map%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>If any key in the path exists but cannot be updated (such as a primitive\\nlike number or a custom Object like Date), an error will be thrown.</p>\\n<p>Note: <code>updateIn</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"notSetValue\",\"type\":{\"k\":0}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":1216},{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":1217}]},\"#mergeIn\":{\"doc\":{\"synopsis\":\"<p>A combination of <code>updateIn</code> and <code>merge</code>, returning a new Map, but\\nperforming the merge at a point arrived at by following the keyPath.\\nIn other words, these two lines are equivalent:</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\">map<span class=\\\"token punctuation\\\" >.</span>updateIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> abc <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> abc<span class=\\\"token punctuation\\\" >.</span>merge<span class=\\\"token punctuation\\\" >(</span>y<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\nmap<span class=\\\"token punctuation\\\" >.</span>mergeIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >)</span></code><p>Note: <code>mergeIn</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":1231}]},\"#mergeDeepIn\":{\"doc\":{\"synopsis\":\"<p>A combination of <code>updateIn</code> and <code>mergeDeep</code>, returning a new Map, but\\nperforming the deep merge at a point arrived at by following the keyPath.\\nIn other words, these two lines are equivalent:</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\">map<span class=\\\"token punctuation\\\" >.</span>updateIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> abc <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> abc<span class=\\\"token punctuation\\\" >.</span>mergeDeep<span class=\\\"token punctuation\\\" >(</span>y<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\nmap<span class=\\\"token punctuation\\\" >.</span>mergeDeepIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >)</span></code><p>Note: <code>mergeDeepIn</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":1245}]}}},{\"title\":\"Transient changes\",\"members\":{\"#withMutations\":{\"doc\":{\"synopsis\":\"<p>Every time you call one of the above functions, a new immutable Map is\\ncreated. If a pure function calls a number of these to produce a final\\nreturn value, then a penalty on performance and memory has been paid by\\ncreating all of the intermediate immutable Maps.</p>\\n\",\"description\":\"<p>If you need to apply a series of mutations to produce a new immutable\\nMap, <code>withMutations<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a temporary mutable copy of the Map which\\ncan apply mutations in a highly performant manner. In fact, this is\\nexactly how complex mutations like <code>merge</code> are done.</p>\\n<p>As an example, this results in the creation of 2, not 4, new Maps:</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> map1 <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> map2 <span class=\\\"token operator\\\" >=</span> map1<span class=\\\"token punctuation\\\" >.</span>withMutations<span class=\\\"token punctuation\\\" >(</span>map <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token punctuation\\\" >{</span>\\n  map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span>map1<span class=\\\"token punctuation\\\" >.</span>size<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span>map2<span class=\\\"token punctuation\\\" >.</span>size<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >)</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: Not all methods can be used on a mutable collection or within\\n<code>withMutations</code>! Read the documentation for each method to see if it\\nis safe to use in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"mutator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"mutable\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":1277}]},\"#asMutable\":{\"doc\":{\"synopsis\":\"<p>Another way to avoid creation of intermediate Immutable maps is to create\\na mutable copy of this collection. Mutable copies <em>always</em> return <code><span class=\\\"token var\\\" >this</span></code>,\\nand thus shouldn&#39;t be used for equality. Your function should never return\\na mutable copy of a collection, only use it internally to create a new\\ncollection.</p>\\n\",\"description\":\"<p>If possible, use <code>withMutations</code> to work with temporary mutable copies as\\nit provides an easier to use API and considers many common optimizations.</p>\\n<p>Note: if the collection is already mutable, <code>asMutable</code> returns itself.</p>\\n<p>Note: Not all methods can be used on a mutable collection or within\\n<code>withMutations</code>! Read the documentation for each method to see if it\\nis safe to use in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asImmutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":1297}]},\"#wasAltered\":{\"doc\":{\"synopsis\":\"<p>Returns true if this is a mutable copy (see <code>asMutable<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>) and mutative\\nalterations have been applied.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asMutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":1},\"line\":1305}]},\"#asImmutable\":{\"doc\":{\"synopsis\":\"<p>The yin to <code>asMutable</code>&#39;s yang. Because it applies to mutable collections,\\nthis operation is <em>mutable</em> and may return itself (though may not\\nreturn itself, i.e. if the result is an empty collection). Once\\nperformed, the original mutable copy must no longer be mutated since it\\nmay be the immutable result.</p>\\n\",\"description\":\"<p>If possible, use <code>withMutations</code> to work with temporary mutable copies as\\nit provides an easier to use API and considers many common optimizations.</p>\\n\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asMutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":1319}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { a: 10, b: 20 }</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"M\"}]},\"line\":1330}]},\"#mapKeys\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Collection.Keyed.mapKeys</p>\\n\"}]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"M\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1338}]},\"#mapEntries\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Collection.Keyed.mapEntries</p>\\n\"}]},\"signatures\":[{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"entry\",\"type\":{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":1346}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Map, returning a new Map.</p>\\n\",\"description\":\"<p>Similar to <code>data<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":1356}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map with only the entries for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"F\"}]},\"line\":1368},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":1372}]},\"#flip\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Collection.Keyed.flip</p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"K\"}]},\"line\":1380}]}}}]}},\"OrderedMap\":{\"doc\":{\"synopsis\":\"<p>A type of Map that has the additional guarantee that the iteration order of\\nentries will be the order in which they were set().</p>\\n\",\"description\":\"<p>The iteration behavior of OrderedMap is the same as native ES6 Map and\\nJavaScript Object.</p>\\n<p>Note that <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span></code> are more expensive than non-ordered <code><span class=\\\"token qualifier\\\" >Map</span></code> and may\\nconsume more memory. <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span>#<span class=\\\"token keyword\\\" >set</span></code> is amortized O(log32 N), but not\\nstable.</p>\\n\",\"notes\":[]},\"module\":{\"isOrderedMap\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is an OrderedMap.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeOrderedMap\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1401}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new Immutable OrderedMap.</p>\\n\",\"description\":\"<p>Created with the same key value pairs as the provided Collection.Keyed or\\nJavaScript Object or expects a Collection of [K, V] tuple entries.</p>\\n<p>The iteration order of key-value pairs provided to this constructor will\\nbe preserved in the OrderedMap.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >let</span> newOrderedMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>key<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >\\\"value\\\"</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >let</span> newOrderedMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >\\\"key\\\"</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >\\\"value\\\"</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span></code><p>Note: <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span></code> is a factory function and not a class, and does not use\\nthe <code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]}}],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1419},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":1420},{\"typeParams\":[\"K\",\"V\"],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1421},{\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":1422}]},\"interface\":{\"line\":1424,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#size\":{\"line\":1429},\"#set\":{\"doc\":{\"synopsis\":\"<p>Returns a new OrderedMap also containing the new key, value pair. If an\\nequivalent key already exists in this OrderedMap, it will be replaced\\nwhile maintaining the existing order.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> originalMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> updatedMap <span class=\\\"token operator\\\" >=</span> originalMap<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span>\\n\\noriginalMap\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedMap {a: 1, b: 1, c: 1}\\n</span>updatedMap\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedMap {a: 1, b: 2, c: 1}</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code><span class=\\\"token keyword\\\" >set</span></code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":10},\"line\":1450}]},\"#merge\":{\"doc\":{\"synopsis\":\"<p>Returns a new OrderedMap resulting from merging the provided Collections\\n(or JS objects) into this OrderedMap. In other words, this takes each\\nentry of each collection and sets it on this OrderedMap.</p>\\n\",\"description\":\"<p>Note: Values provided to <code>merge</code> are shallowly converted before being\\nmerged. No nested values are altered.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> one <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >30</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> two <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >40</span><span class=\\\"token punctuation\\\" >,</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >50</span><span class=\\\"token punctuation\\\" >,</span> d<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >60</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\none<span class=\\\"token punctuation\\\" >.</span>merge<span class=\\\"token punctuation\\\" >(</span>two<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedMap { \\\"a\\\": 50, \\\"b\\\": 40, \\\"c\\\": 30, \\\"d\\\": 60 }\\n</span>two<span class=\\\"token punctuation\\\" >.</span>merge<span class=\\\"token punctuation\\\" >(</span>one<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedMap { \\\"b\\\": 20, \\\"a\\\": 10, \\\"d\\\": 60, \\\"c\\\": 30 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>merge</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"concat\"}]},\"signatures\":[{\"typeParams\":[\"KC\",\"VC\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KC\"},{\"k\":8,\"param\":\"VC\"}]}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"KC\"}]},{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"VC\"}]}]},\"line\":1473},{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"C\"}}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":3}]},{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":1474}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new OrderedMap with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedMap { \\\"a\\\": 10, \\\"b\\\": 20 }</span></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the same\\nvalue at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"M\"}]},\"line\":1490}]},\"#mapKeys\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Collection.Keyed.mapKeys</p>\\n\"}]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":8,\"param\":\"M\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1498}]},\"#mapEntries\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Collection.Keyed.mapEntries</p>\\n\"}]},\"signatures\":[{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"entry\",\"type\":{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":1506}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the OrderedMap, returning a new OrderedMap.</p>\\n\",\"description\":\"<p>Similar to <code>data<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":1516}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new OrderedMap with only the entries for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"F\"}]},\"line\":1528},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":1532}]},\"#flip\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Collection.Keyed.flip</p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"K\"}]},\"line\":1540}]}}}]}},\"Set\":{\"doc\":{\"synopsis\":\"<p>A Collection of unique values with <code>O<span class=\\\"token punctuation\\\" >(</span>log32 N<span class=\\\"token punctuation\\\" >)</span></code> adds and has.</p>\\n\",\"description\":\"<p>When iterating a Set, the entries will be (value, value) pairs. Iteration\\norder of a Set is undefined, however is stable. Multiple iterations of the\\nsame Set will iterate in the same order.</p>\\n<p>Set values, like Map keys, may be of any type. Equality is determined using\\n<code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is</code>, enabling Sets to uniquely include other Immutable\\ncollections, custom value types, and NaN.</p>\\n\",\"notes\":[]},\"module\":{\"isSet\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is a Set</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeSet\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1560}]}},\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new Set containing <code><span class=\\\"t param\\\">values</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1565}]}},\"fromKeys\":{\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >.</span>fromKeys<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a new immutable Set containing the keys from\\nthis Collection or JavaScript Object.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"T\"},{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1571},{\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":3}]},\"line\":1572}]}},\"intersect\":{\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >.</span>intersect<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a new immutable Set that is the intersection of\\na collection of other sets.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Set</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> intersected <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >.</span>intersect<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span>\\n  <span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'t'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Set [ \\\"a\\\", \\\"c\\\"\\\" ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"sets\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1587}]}},\"union\":{\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >.</span>union<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a new immutable Set that is the union of a\\ncollection of other sets.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Set</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> unioned <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >.</span>union<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span>\\n  <span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'t'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Set [ \\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"t\\\"\\\" ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"sets\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1602}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Create a new immutable Set containing the values of the provided\\ncollection-like.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >Set</span></code> is a factory function and not a class, and does not use the\\n<code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":0}]},\"line\":1612},{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1613},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1614}]},\"interface\":{\"line\":1616,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Collection.Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#size\":{\"line\":1621}}},{\"title\":\"Persistent changes\",\"members\":{\"#add\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set which also includes this value.</p>\\n\",\"description\":\"<p>Note: <code>add</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":10},\"line\":1630}]},\"#delete\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set which excludes this value.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token keyword\\\" >delete</span></code> can be used in <code>withMutations</code>.</p>\\n<p>Note: <code><span class=\\\"token keyword\\\" >delete</span></code> <strong>cannot</strong> be safely used in IE8, use <code>remove</code> if\\nsupporting old browsers.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"remove\"}]},\"signatures\":[{\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":10},\"line\":1642}]},\"#clear\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set containing no values.</p>\\n\",\"description\":\"<p>Note: <code>clear</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":1650}]},\"#union\":{\"doc\":{\"synopsis\":\"<p>Returns a Set including any value from <code><span class=\\\"t param\\\">collections</span></code> that does not already\\nexist in this Set.</p>\\n\",\"description\":\"<p>Note: <code>union</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"merge\"},{\"name\":\"alias\",\"body\":\"concat\"}]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"C\"}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":1660}]},\"#intersect\":{\"doc\":{\"synopsis\":\"<p>Returns a Set which has removed any values not also contained\\nwithin <code><span class=\\\"t param\\\">collections</span></code>.</p>\\n\",\"description\":\"<p>Note: <code>intersect</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":1670}]},\"#subtract\":{\"doc\":{\"synopsis\":\"<p>Returns a Set excluding any values contained within <code><span class=\\\"t param\\\">collections</span></code>.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>subtract<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedSet [2]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>subtract</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":1684}]}}},{\"title\":\"Transient changes\",\"members\":{\"#withMutations\":{\"doc\":{\"synopsis\":\"<p>Note: Not all methods can be used on a mutable collection or within\\n<code>withMutations</code>! Check the documentation for each method to see if it\\nmentions being safe to use in <code>withMutations</code>.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#withMutations</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"mutator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"mutable\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":1696}]},\"#asMutable\":{\"doc\":{\"synopsis\":\"<p>Note: Not all methods can be used on a mutable collection or within\\n<code>withMutations</code>! Check the documentation for each method to see if it\\nmentions being safe to use in <code>withMutations</code>.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asMutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":1705}]},\"#wasAltered\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#wasAltered</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":1},\"line\":1710}]},\"#asImmutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asImmutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":1715}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Set [10,20]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":1726}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Set, returning a new Set.</p>\\n\",\"description\":\"<p>Similar to <code><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":1736}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"F\"}]},\"line\":1748},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":1752}]}}}]}},\"OrderedSet\":{\"doc\":{\"synopsis\":\"<p>A type of Set that has the additional guarantee that the iteration order of\\nvalues will be the order in which they were <code>add</code>ed.</p>\\n\",\"description\":\"<p>The iteration behavior of OrderedSet is the same as native ES6 Set.</p>\\n<p>Note that <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span></code> are more expensive than non-ordered <code><span class=\\\"token qualifier\\\" >Set</span></code> and may\\nconsume more memory. <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span>#add</code> is amortized O(log32 N), but not\\nstable.</p>\\n\",\"notes\":[]},\"module\":{\"isOrderedSet\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is an OrderedSet.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeOrderedSet\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1774}]}},\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new OrderedSet containing <code><span class=\\\"t param\\\">values</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1779}]}},\"fromKeys\":{\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >.</span>fromKeys<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a new immutable OrderedSet containing\\nthe keys from this Collection or JavaScript Object.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"T\"},{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1785},{\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":3}]},\"line\":1786}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Create a new immutable OrderedSet containing the values of the provided\\ncollection-like.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span></code> is a factory function and not a class, and does not use\\nthe <code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":0}]},\"line\":1796},{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1797},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1798}]},\"interface\":{\"line\":1800,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#size\":{\"line\":1805},\"#union\":{\"doc\":{\"synopsis\":\"<p>Returns an OrderedSet including any value from <code><span class=\\\"t param\\\">collections</span></code> that does\\nnot already exist in this OrderedSet.</p>\\n\",\"description\":\"<p>Note: <code>union</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"merge\"},{\"name\":\"alias\",\"body\":\"concat\"}]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"C\"}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":1815}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedSet [10, 20]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":1828}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the OrderedSet, returning a new OrderedSet.</p>\\n\",\"description\":\"<p>Similar to <code><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":1838}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new OrderedSet with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"F\"}]},\"line\":1850},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":1854}]},\"#zip\":{\"doc\":{\"synopsis\":\"<p>Returns an OrderedSet of the same type &quot;zipped&quot; with the provided\\ncollections.</p>\\n\",\"description\":\"<p>Like <code>zipWith</code>, but using the default <code>zipper</code>: creating an <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\\\">Array</a></code>.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zip<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedSet [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":1872},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other1\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":1873},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":0}]},\"line\":1874}]},\"#zipAll\":{\"doc\":{\"synopsis\":\"<p>Returns a OrderedSet of the same type &quot;zipped&quot; with the provided\\ncollections.</p>\\n\",\"description\":\"<p>Unlike <code>zip</code>, <code>zipAll</code> continues zipping until the longest collection is\\nexhausted. Missing values from shorter collections are filled with <code><span class=\\\"token primitive\\\" >undefined</span></code>.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zipAll<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedSet [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]</span></code><p>Note: Since zipAll will return a collection as large as the largest\\ninput, some results may contain undefined values. TypeScript cannot\\naccount for these without cases (as of v2.5).</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":1893},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other1\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":1894},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":0}]},\"line\":1895}]},\"#zipWith\":{\"doc\":{\"synopsis\":\"<p>Returns an OrderedSet of the same type &quot;zipped&quot; with the provided\\ncollections by using a custom <code><span class=\\\"t param\\\">zipper</span></code> function.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Seq.Indexed.zipWith</p>\\n\"}]},\"signatures\":[{\"typeParams\":[\"U\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":1903},{\"typeParams\":[\"U\",\"V\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}},{\"name\":\"thirdValue\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"thirdCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":1907},{\"typeParams\":[\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"any\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":1912}]}}}]}},\"Stack\":{\"doc\":{\"synopsis\":\"<p>Stacks are indexed collections which support very efficient O(1) addition\\nand removal from the front using <code>unshift<span class=\\\"token punctuation\\\" >(</span>v<span class=\\\"token punctuation\\\" >)</span></code> and <code>shift<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"description\":\"<p>For familiarity, Stack also provides <code>push<span class=\\\"token punctuation\\\" >(</span>v<span class=\\\"token punctuation\\\" >)</span></code>, <code>pop<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, and <code>peek<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, but\\nbe aware that they also operate on the front of the list, unlike List or\\na JavaScript Array.</p>\\n<p>Note: <code>reverse<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> or any inherent reverse traversal (<code>reduceRight</code>,\\n<code>lastIndexOf</code>, etc.) is not efficient with a Stack.</p>\\n<p>Stack is implemented with a Single-Linked List.</p>\\n\",\"notes\":[]},\"module\":{\"isStack\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is a Stack</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeStack\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1938}]}},\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new Stack containing <code><span class=\\\"t param\\\">values</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1943}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Create a new immutable Stack containing the values of the provided\\ncollection-like.</p>\\n\",\"description\":\"<p>The iteration order of the provided collection is preserved in the\\nresulting <code><span class=\\\"token qualifier\\\" >Stack</span></code>.</p>\\n<p>Note: <code><span class=\\\"token qualifier\\\" >Stack</span></code> is a factory function and not a class, and does not use the\\n<code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":0}]},\"line\":1956},{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1957},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1958}]},\"interface\":{\"line\":1960,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#size\":{\"line\":1965}}},{\"title\":\"Reading values\",\"members\":{\"#peek\":{\"doc\":{\"synopsis\":\"<p>Alias for <code><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >.</span>first<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":11}]},\"line\":1972}]}}},{\"title\":\"Persistent changes\",\"members\":{\"#clear\":{\"doc\":{\"synopsis\":\"<p>Returns a new Stack with 0 size and no values.</p>\\n\",\"description\":\"<p>Note: <code>clear</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1982}]},\"#unshift\":{\"doc\":{\"synopsis\":\"<p>Returns a new Stack with the provided <code><span class=\\\"t param\\\">values</span></code> prepended, shifting other\\nvalues ahead to higher indices.</p>\\n\",\"description\":\"<p>This is very efficient for Stack.</p>\\n<p>Note: <code>unshift</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1992}]},\"#unshiftAll\":{\"doc\":{\"synopsis\":\"<p>Like <code><span class=\\\"token qualifier\\\" >Stack</span>#unshift</code>, but accepts a collection rather than varargs.</p>\\n\",\"description\":\"<p>Note: <code>unshiftAll</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1999}]},\"#shift\":{\"doc\":{\"synopsis\":\"<p>Returns a new Stack with a size ones less than this Stack, excluding\\nthe first item in this Stack, shifting all other values to a lower index.</p>\\n\",\"description\":\"<p>Note: this differs from <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\\\">Array#shift</a></code> because it returns a new\\nStack rather than the removed value. Use <code>first<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> or <code>peek<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> to get the\\nfirst value in this Stack.</p>\\n<p>Note: <code>shift</code> can be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2011}]},\"#push\":{\"doc\":{\"synopsis\":\"<p>Alias for <code><span class=\\\"token qualifier\\\" >Stack</span>#unshift</code> and is not equivalent to <code><span class=\\\"token qualifier\\\" >List</span>#push</code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2016}]},\"#pushAll\":{\"doc\":{\"synopsis\":\"<p>Alias for <code><span class=\\\"token qualifier\\\" >Stack</span>#unshiftAll</code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2021}]},\"#pop\":{\"doc\":{\"synopsis\":\"<p>Alias for <code><span class=\\\"token qualifier\\\" >Stack</span>#shift</code> and is not equivalent to <code><span class=\\\"token qualifier\\\" >List</span>#pop</code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2026}]}}},{\"title\":\"Transient changes\",\"members\":{\"#withMutations\":{\"doc\":{\"synopsis\":\"<p>Note: Not all methods can be used on a mutable collection or within\\n<code>withMutations</code>! Check the documentation for each method to see if it\\nmentions being safe to use in <code>withMutations</code>.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#withMutations</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"mutator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"mutable\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":2038}]},\"#asMutable\":{\"doc\":{\"synopsis\":\"<p>Note: Not all methods can be used on a mutable collection or within\\n<code>withMutations</code>! Check the documentation for each method to see if it\\nmentions being safe to use in <code>withMutations</code>.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asMutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":2047}]},\"#wasAltered\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#wasAltered</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":1},\"line\":2052}]},\"#asImmutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asImmutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":2057}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new Stack with other collections concatenated to this one.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"valuesOrCollections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"C\"}]},{\"k\":8,\"param\":\"C\"}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":2064}]},\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Stack with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Stack [ 10, 20 ]</span></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the same\\nvalue at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":2076}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Stack, returning a new Stack.</p>\\n\",\"description\":\"<p>Similar to <code>stack<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":2086}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"F\"}]},\"line\":2098},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":2102}]},\"#zip\":{\"doc\":{\"synopsis\":\"<p>Returns a Stack &quot;zipped&quot; with the provided collections.</p>\\n\",\"description\":\"<p>Like <code>zipWith</code>, but using the default <code>zipper</code>: creating an <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\\\">Array</a></code>.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zip<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Stack [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":2118},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":2119},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":0}]},\"line\":2120}]},\"#zipAll\":{\"doc\":{\"synopsis\":\"<p>Returns a Stack &quot;zipped&quot; with the provided collections.</p>\\n\",\"description\":\"<p>Unlike <code>zip</code>, <code>zipAll</code> continues zipping until the longest collection is\\nexhausted. Missing values from shorter collections are filled with <code><span class=\\\"token primitive\\\" >undefined</span></code>.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zipAll<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Stack [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]</span></code><p>Note: Since zipAll will return a collection as large as the largest\\ninput, some results may contain undefined values. TypeScript cannot\\naccount for these without cases (as of v2.5).</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":2138},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":2139},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":0}]},\"line\":2140}]},\"#zipWith\":{\"doc\":{\"synopsis\":\"<p>Returns a Stack &quot;zipped&quot; with the provided collections by using a\\ncustom <code><span class=\\\"t param\\\">zipper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zipWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>a<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> a <span class=\\\"token operator\\\" >+</span> b<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Stack [ 5, 7, 9 ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":2153},{\"typeParams\":[\"U\",\"V\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}},{\"name\":\"thirdValue\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"thirdCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":2157},{\"typeParams\":[\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"any\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":2162}]}}}]}},\"Range\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq.Indexed of numbers from <code><span class=\\\"t param\\\">start</span></code> (inclusive) to <code><span class=\\\"t param\\\">end</span></code>\\n(exclusive), by <code><span class=\\\"t param\\\">step</span></code>, where <code><span class=\\\"t param\\\">start</span></code> defaults to 0, <code><span class=\\\"t param\\\">step</span></code> to 1, and <code><span class=\\\"t param\\\">end</span></code> to\\ninfinity. When <code><span class=\\\"t param\\\">start</span></code> is equal to <code><span class=\\\"t param\\\">end</span></code>, returns empty range.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >Range</span></code> is a factory function and not a class, and does not use the\\n<code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Range</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 0, 1, 2, 3, ... ]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 10, 11, 12, 13, ... ]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >15</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 10, 11, 12, 13, 14 ]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 10, 15, 20, 25 ]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 30, 25, 20, 15 ]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// []</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"start\",\"type\":{\"k\":2},\"optional\":true},{\"name\":\"end\",\"type\":{\"k\":2},\"optional\":true},{\"name\":\"step\",\"type\":{\"k\":2},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":2}]},\"line\":2187}]}},\"Repeat\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq.Indexed of <code><span class=\\\"t param\\\">value</span></code> repeated <code><span class=\\\"t param\\\">times</span></code> times. When <code><span class=\\\"t param\\\">times</span></code> is\\nnot defined, returns an infinite <code><span class=\\\"token qualifier\\\" >Seq</span></code> of <code><span class=\\\"t param\\\">value</span></code>.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >Repeat</span></code> is a factory function and not a class, and does not use the\\n<code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Repeat</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Repeat</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'foo'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 'foo', 'foo', 'foo', ... ]\\n</span><span class=\\\"token qualifier\\\" >Repeat</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'bar'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 'bar', 'bar', 'bar', 'bar' ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"times\",\"type\":{\"k\":2},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2203}]}},\"Record\":{\"doc\":{\"synopsis\":\"<p>A record is similar to a JS object, but enforces a specific set of allowed\\nstring keys, and has default values.</p>\\n\",\"description\":\"<p>The <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> function produces new Record Factories, which when called\\ncreate Record instances.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Record</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> ABRecord <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> myRecord <span class=\\\"token operator\\\" >=</span> ABRecord<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span></code><p>Records always have a value for the keys they define. <code>remove</code>ing a key\\nfrom a record simply resets it to the default value for that key.</p>\\n<code class=\\\"codeBlock\\\">myRecord<span class=\\\"token punctuation\\\" >.</span>size <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2\\n</span>myRecord<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1\\n</span>myRecord<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3\\n</span><span class=\\\"token keyword\\\" >const</span> myRecordWithoutB <span class=\\\"token operator\\\" >=</span> myRecord<span class=\\\"token punctuation\\\" >.</span>remove<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >)</span>\\nmyRecordWithoutB<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2\\n</span>myRecordWithoutB<span class=\\\"token punctuation\\\" >.</span>size <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span></code><p>Values provided to the constructor not found in the Record type will\\nbe ignored. For example, in this case, ABRecord is provided a key &quot;x&quot; even\\nthough only &quot;a&quot; and &quot;b&quot; have been defined. The value for &quot;x&quot; will be\\nignored for this record.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> myRecord <span class=\\\"token operator\\\" >=</span> ABRecord<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\nmyRecord<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// undefined</span></code><p>Because Records have a known set of string keys, property get access works\\nas expected, however property sets will throw an Error.</p>\\n<p>Note: IE8 does not support property access. Only use <code><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> when\\nsupporting IE8.</p>\\n<code class=\\\"codeBlock\\\">myRecord<span class=\\\"token punctuation\\\" >.</span>b <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3\\n</span>myRecord<span class=\\\"token punctuation\\\" >.</span>b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// throws Error</span></code><p>Record Types can be extended as well, allowing for custom methods on your\\nRecord. This is not a common pattern in functional environments, but is in\\nmany JS programs.</p>\\n<p>However Record Types are more restricted than typical JavaScript classes.\\nThey do not use a class constructor, which also means they cannot use\\nclass properties (since those are technically part of a constructor).</p>\\n<p>While Record Types can be syntactically created with the JavaScript <code><span class=\\\"token keyword\\\" >class</span></code>\\nform, the resulting Record function is actually a factory function, not a\\nclass constructor. Even though Record Types are not classes, JavaScript\\ncurrently requires the use of <code><span class=\\\"token keyword\\\" >new</span></code> when creating new Record instances if\\nthey are defined as a <code><span class=\\\"token keyword\\\" >class</span></code>.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >class</span> <span class=\\\"token class-name\\\" >ABRecord</span> <span class=\\\"token keyword\\\" >extends</span> <span class=\\\"token class-name\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n  getAB<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n    <span class=\\\"token keyword\\\" >return</span> <span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>a <span class=\\\"token operator\\\" >+</span> <span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>b<span class=\\\"token punctuation\\\" >;</span>\\n  <span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token punctuation\\\" >}</span>\\n\\n<span class=\\\"token keyword\\\" >var</span> myRecord <span class=\\\"token operator\\\" >=</span> <span class=\\\"token keyword\\\" >new</span> <span class=\\\"token class-name\\\" >ABRecord</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\nmyRecord<span class=\\\"token punctuation\\\" >.</span>getAB<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 4</span></code><p><strong>Flow Typing Records:</strong></p>\\n<p>Immutable.js exports two Flow types designed to make it easier to use\\nRecords with flow typed code, <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Of</span><span class=\\\"token operator\\\" >&lt;</span>TProps<span class=\\\"token operator\\\" >></span></code> and <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Factory</span><span class=\\\"token operator\\\" >&lt;</span>TProps<span class=\\\"token operator\\\" >></span></code>.</p>\\n<p>When defining a new kind of Record factory function, use a flow type that\\ndescribes the values the record contains along with <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Factory</span><span class=\\\"token operator\\\" >&lt;</span>TProps<span class=\\\"token operator\\\" >></span></code>.\\nTo type instances of the Record (which the factory function returns),\\nuse <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Of</span><span class=\\\"token operator\\\" >&lt;</span>TProps<span class=\\\"token operator\\\" >></span></code>.</p>\\n<p>Typically, new Record definitions will export both the Record factory\\nfunction as well as the Record instance type for use in other code.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >import</span> type <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Factory</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Of</span> <span class=\\\"token punctuation\\\" >}</span> from <span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Use RecordFactory&lt;TProps> for defining new Record factory functions.\\n</span>type <span class=\\\"token qualifier\\\" >Point3</span>DProps <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> number<span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> number<span class=\\\"token punctuation\\\" >,</span> z<span class=\\\"token punctuation\\\" >:</span> number <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> defaultValues<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Point3</span>DProps <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >0</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> makePoint3D<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Factory</span><span class=\\\"token operator\\\" >&lt;</span><span class=\\\"token qualifier\\\" >Point3</span>DProps<span class=\\\"token operator\\\" >></span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span>defaultValues<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >export</span> makePoint3D<span class=\\\"token punctuation\\\" >;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Use RecordOf&lt;T> for defining new instances of that Record.\\n</span><span class=\\\"token keyword\\\" >export</span> type <span class=\\\"token qualifier\\\" >Point3</span>D <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Of</span><span class=\\\"token operator\\\" >&lt;</span><span class=\\\"token qualifier\\\" >Point3</span>DProps<span class=\\\"token operator\\\" >></span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> some3DPoint<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Point3</span>D <span class=\\\"token operator\\\" >=</span> makePoint3D<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >30</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code><p><strong>Flow Typing Record Subclasses:</strong></p>\\n<p>Records can be subclassed as a means to add additional methods to Record\\ninstances. This is generally discouraged in favor of a more functional API,\\nsince Subclasses have some minor overhead. However the ability to create\\na rich API on Record types can be quite valuable.</p>\\n<p>When using Flow to type Subclasses, do not use <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Factory</span><span class=\\\"token operator\\\" >&lt;</span>TProps<span class=\\\"token operator\\\" >></span></code>,\\ninstead apply the props type when subclassing:</p>\\n<code class=\\\"codeBlock\\\">type <span class=\\\"token qualifier\\\" >Person</span><span class=\\\"token qualifier\\\" >Props</span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span>name<span class=\\\"token punctuation\\\" >:</span> string<span class=\\\"token punctuation\\\" >,</span> age<span class=\\\"token punctuation\\\" >:</span> number<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> defaultValues<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Person</span><span class=\\\"token qualifier\\\" >Props</span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span>name<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'Aristotle'</span><span class=\\\"token punctuation\\\" >,</span> age<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2400</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> <span class=\\\"token qualifier\\\" >Person</span><span class=\\\"token qualifier\\\" >Record</span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span>defaultValues<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >class</span> <span class=\\\"token class-name\\\" >Person</span> <span class=\\\"token keyword\\\" >extends</span> <span class=\\\"token class-name\\\" >PersonRecord</span><span class=\\\"token operator\\\" >&lt;</span><span class=\\\"token qualifier\\\" >Person</span><span class=\\\"token qualifier\\\" >Props</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token punctuation\\\" >{</span>\\n  getName<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >:</span> string <span class=\\\"token punctuation\\\" >{</span>\\n    <span class=\\\"token keyword\\\" >return</span> <span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'name'</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >}</span>\\n\\n  setName<span class=\\\"token punctuation\\\" >(</span>name<span class=\\\"token punctuation\\\" >:</span> string<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token var\\\" >this</span> <span class=\\\"token punctuation\\\" >{</span>\\n    <span class=\\\"token keyword\\\" >return</span> <span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'name'</span><span class=\\\"token punctuation\\\" >,</span> name<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n  <span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token punctuation\\\" >}</span></code><p><strong>Choosing Records vs plain JavaScript objects</strong></p>\\n<p>Records offer a persistently immutable alternative to plain JavaScript\\nobjects, however they&#39;re not required to be used within Immutable.js\\ncollections. In fact, the deep-access and deep-updating functions\\nlike <code>getIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> and <code>setIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> work with plain JavaScript Objects as well.</p>\\n<p>Deciding to use Records or Objects in your application should be informed\\nby the tradeoffs and relative benefits of each:</p>\\n<ul>\\n<li><p><em>Runtime immutability</em>: plain JS objects may be carefully treated as\\nimmutable, however Record instances will <em>throw</em> if attempted to be\\nmutated directly. Records provide this additional guarantee, however at\\nsome marginal runtime cost. While JS objects are mutable by nature, the\\nuse of type-checking tools like <a href=\\\"https://medium.com/@gcanti/immutability-with-flow-faa050a1aef4\\\">Flow</a>\\ncan help gain confidence in code written to favor immutability.</p>\\n</li>\\n<li><p><em>Value equality</em>: Records use value equality when compared with <code>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>\\nor <code>record<span class=\\\"token punctuation\\\" >.</span>equals<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>. That is, two Records with the same keys and values\\nare equal. Plain objects use <em>reference equality</em>. Two objects with the\\nsame keys and values are not equal since they are different objects.\\nThis is important to consider when using objects as keys in a <code><span class=\\\"token qualifier\\\" >Map</span></code> or\\nvalues in a <code><span class=\\\"token qualifier\\\" >Set</span></code>, which use equality when retrieving values.</p>\\n</li>\\n<li><p><em>API methods</em>: Records have a full featured API, with methods like\\n<code><span class=\\\"token punctuation\\\" >.</span>getIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, and <code><span class=\\\"token punctuation\\\" >.</span>equals<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>. These can make working with these values\\neasier, but comes at the cost of not allowing keys with those names.</p>\\n</li>\\n<li><p><em>Default values</em>: Records provide default values for every key, which\\ncan be useful when constructing Records with often unchanging values.\\nHowever default values can make using Flow and TypeScript more laborious.</p>\\n</li>\\n<li><p><em>Serialization</em>: Records use a custom internal representation to\\nefficiently store and update their values. Converting to and from this\\nform isn&#39;t free. If converting Records to plain objects is common,\\nconsider sticking with plain objects to begin with.</p>\\n</li>\\n</ul>\\n\",\"notes\":[]},\"module\":{\"isRecord\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeRecord</span></code> is an instance of a Record.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeRecord\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":2372}]}},\"getDescriptiveName\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Records allow passing a second parameter to supply a descriptive name\\nthat appears when converting a Record to a string or in any error\\nmessages. A descriptive name for any record can be accessed by using this\\nmethod. If one was not provided, the string &quot;Record&quot; is returned.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Record</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> <span class=\\\"token qualifier\\\" >Person</span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>\\n  name<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token primitive\\\" >null</span>\\n<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'Person'</span><span class=\\\"token punctuation\\\" >)</span>\\n\\n<span class=\\\"token keyword\\\" >var</span> me <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Person</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> name<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'My Name'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\nme<span class=\\\"token punctuation\\\" >.</span>toString<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"Person { \\\"name\\\": \\\"My Name\\\" }\\\"\\n</span><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >.</span>getDescriptiveName<span class=\\\"token punctuation\\\" >(</span>me<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"Person\\\"</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"record\",\"type\":{\"k\":9,\"name\":\"Record\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":3},\"line\":2391}]}},\"Factory\":{\"doc\":{\"synopsis\":\"<p>A Record.Factory is created by the <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> function. Record instances\\nare created by passing it some of the accepted values for that Record\\ntype:</p>\\n\",\"description\":\"<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Record } = require('immutable')\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// makePerson is a Record Factory function\\n</span><span class=\\\"token keyword\\\" >const</span> makePerson <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> name<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token primitive\\\" >null</span><span class=\\\"token punctuation\\\" >,</span> favoriteColor<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'unknown'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// alan is a Record instance\\n</span><span class=\\\"token keyword\\\" >const</span> alan <span class=\\\"token operator\\\" >=</span> makePerson<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> name<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'Alan'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note that Record Factories return <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token operator\\\" >&lt;</span>TProps<span class=\\\"token operator\\\" >></span> <span class=\\\"token operator\\\" >&amp;</span> <span class=\\\"token qualifier\\\" >Readonly</span><span class=\\\"token operator\\\" >&lt;</span>TProps<span class=\\\"token operator\\\" >></span></code>,\\nthis allows use of both the Record instance API, and direct property\\naccess on the resulting instances:</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Record } = require('immutable');const makePerson = Record({ name: null, favoriteColor: 'unknown' });const alan = makePerson({ name: 'Alan' });\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Use the Record API\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'Record API: '</span> <span class=\\\"token operator\\\" >+</span> alan<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'name'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Or direct property access (Readonly)\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'property access: '</span> <span class=\\\"token operator\\\" >+</span> alan<span class=\\\"token punctuation\\\" >.</span>name<span class=\\\"token punctuation\\\" >)</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%3Bconst%20makePerson%20%3D%20Record%28%7B%20name%3A%20null%2C%20favoriteColor%3A%20%27unknown%27%20%7D%29%3Bconst%20alan%20%3D%20makePerson%28%7B%20name%3A%20%27Alan%27%20%7D%29%3B%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p><strong>Flow Typing Records:</strong></p>\\n<p>Use the <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Factory</span><span class=\\\"token operator\\\" >&lt;</span>TProps<span class=\\\"token operator\\\" >></span></code> Flow type to get high quality type checking of\\nRecords:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >import</span> type <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Factory</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Of</span> <span class=\\\"token punctuation\\\" >}</span> from <span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Use RecordFactory&lt;TProps> for defining new Record factory functions.\\n</span>type <span class=\\\"token qualifier\\\" >Person</span><span class=\\\"token qualifier\\\" >Props</span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> name<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token operator\\\" >?</span>string<span class=\\\"token punctuation\\\" >,</span> favoriteColor<span class=\\\"token punctuation\\\" >:</span> string <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> makePerson<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Factory</span><span class=\\\"token operator\\\" >&lt;</span><span class=\\\"token qualifier\\\" >Person</span><span class=\\\"token qualifier\\\" >Props</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> name<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token primitive\\\" >null</span><span class=\\\"token punctuation\\\" >,</span> favoriteColor<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'unknown'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Use RecordOf&lt;T> for defining new instances of that Record.\\n</span>type <span class=\\\"token qualifier\\\" >Person</span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token qualifier\\\" >Of</span><span class=\\\"token operator\\\" >&lt;</span><span class=\\\"token qualifier\\\" >Person</span><span class=\\\"token qualifier\\\" >Props</span><span class=\\\"token operator\\\" >></span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> alan<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >Person</span> <span class=\\\"token operator\\\" >=</span> makePerson<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> name<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'Alan'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"module\":{},\"interface\":{\"line\":2443,\"typeParams\":[\"TProps\"],\"groups\":[{\"members\":{\"#displayName\":{\"line\":2451}}}]},\"call\":{\"signatures\":[{\"typeParams\":[\"TProps\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Partial\",\"args\":[{\"k\":8,\"param\":\"TProps\"}]},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":3},{\"k\":0}]}]}]},\"optional\":true}],\"type\":{\"k\":14,\"types\":[{\"k\":9,\"name\":\"Record\",\"args\":[{\"k\":8,\"param\":\"TProps\"}]},{\"k\":9,\"name\":\"Readonly\",\"args\":[{\"k\":8,\"param\":\"TProps\"}]}]},\"line\":2454}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Unlike other types in Immutable.js, the <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> function creates a new\\nRecord Factory, which is a function that creates Record instances.</p>\\n\",\"description\":\"<p>See above for examples of using <code><span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<p>Note: <code><span class=\\\"token qualifier\\\" >Record</span></code> is a factory function and not a class, and does not use the\\n<code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"TProps\"],\"params\":[{\"name\":\"defaultValues\",\"type\":{\"k\":8,\"param\":\"TProps\"}},{\"name\":\"name\",\"type\":{\"k\":3},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Record.Factory\",\"args\":[{\"k\":8,\"param\":\"TProps\"}]},\"line\":2466}]},\"interface\":{\"line\":2468,\"typeParams\":[\"TProps\"],\"groups\":[{\"title\":\"Reading values\",\"members\":{\"#has\":{\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":1},\"line\":2472}]},\"#get\":{\"doc\":{\"synopsis\":\"<p>Returns the value associated with the provided key, which may be the\\ndefault value defined when creating the Record factory function.</p>\\n\",\"description\":\"<p>If the requested key is not defined by this Record type, then\\nnotSetValue will be returned if provided. Note that this scenario would\\nproduce an error when using Flow or TypeScript.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\"],\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}},\"line\":2482},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":8,\"param\":\"T\"},\"line\":2483}]}}},{\"title\":\"Reading deep values\",\"members\":{\"#hasIn\":{\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":1},\"line\":2487}]},\"#getIn\":{\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":0},\"line\":2488}]}}},{\"title\":\"Value equality\",\"members\":{\"#equals\":{\"signatures\":[{\"params\":[{\"name\":\"other\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":2492}]},\"#hashCode\":{\"signatures\":[{\"type\":{\"k\":2},\"line\":2493}]}}},{\"title\":\"Persistent changes\",\"members\":{\"#set\":{\"signatures\":[{\"typeParams\":[\"K\"],\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}}}],\"type\":{\"k\":10},\"line\":2497}]},\"#update\":{\"signatures\":[{\"typeParams\":[\"K\"],\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}}}],\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}}}}],\"type\":{\"k\":10},\"line\":2498}]},\"#merge\":{\"signatures\":[{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Partial\",\"args\":[{\"k\":8,\"param\":\"TProps\"}]},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":3},{\"k\":0}]}]}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":2499}]},\"#mergeDeep\":{\"signatures\":[{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Partial\",\"args\":[{\"k\":8,\"param\":\"TProps\"}]},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":3},{\"k\":0}]}]}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":2500}]},\"#mergeWith\":{\"signatures\":[{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"oldVal\",\"type\":{\"k\":0}},{\"name\":\"newVal\",\"type\":{\"k\":0}},{\"name\":\"key\",\"type\":{\"k\":17,\"operator\":\"keyof\",\"type\":{\"k\":8,\"param\":\"TProps\"}}}],\"type\":{\"k\":0}}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Partial\",\"args\":[{\"k\":8,\"param\":\"TProps\"}]},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":3},{\"k\":0}]}]}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":2502}]},\"#mergeDeepWith\":{\"signatures\":[{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"oldVal\",\"type\":{\"k\":0}},{\"name\":\"newVal\",\"type\":{\"k\":0}},{\"name\":\"key\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Partial\",\"args\":[{\"k\":8,\"param\":\"TProps\"}]},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":3},{\"k\":0}]}]}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":2506}]},\"#delete\":{\"doc\":{\"synopsis\":\"<p>Returns a new instance of this Record type with the value for the\\nspecific key set to its default value.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"alias\",\"body\":\"remove\"}]},\"signatures\":[{\"typeParams\":[\"K\"],\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":10},\"line\":2517}]},\"#clear\":{\"doc\":{\"synopsis\":\"<p>Returns a new instance of this Record type with all values set\\nto their default values.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":2524}]}}},{\"title\":\"Deep persistent changes\",\"members\":{\"#setIn\":{\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":10},\"line\":2528}]},\"#updateIn\":{\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":2529}]},\"#mergeIn\":{\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":2530}]},\"#mergeDeepIn\":{\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":2531}]},\"#deleteIn\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"alias\",\"body\":\"removeIn\"}]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":10},\"line\":2536}]}}},{\"title\":\"Conversion to JavaScript types\",\"members\":{\"#toJS\":{\"doc\":{\"synopsis\":\"<p>Deeply converts this Record to equivalent native JavaScript Object.</p>\\n\",\"description\":\"<p>Note: This method may not be overridden. Objects with custom\\nserialization to plain JS may override toJSON() instead.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]},\"line\":2547}]},\"#toJSON\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Record to equivalent native JavaScript Object.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":8,\"param\":\"TProps\"},\"line\":2552}]},\"#toObject\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Record to equivalent JavaScript Object.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":8,\"param\":\"TProps\"},\"line\":2557}]}}},{\"title\":\"Transient changes\",\"members\":{\"#withMutations\":{\"doc\":{\"synopsis\":\"<p>Note: Not all methods can be used on a mutable collection or within\\n<code>withMutations</code>! Only <code><span class=\\\"token keyword\\\" >set</span></code> may be used mutatively.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#withMutations</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"mutator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"mutable\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":10},\"line\":2567}]},\"#asMutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asMutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":2572}]},\"#wasAltered\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#wasAltered</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":1},\"line\":2577}]},\"#asImmutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span>#asImmutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":10},\"line\":2582}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#toSeq\":{\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":17,\"operator\":\"keyof\",\"type\":{\"k\":8,\"param\":\"TProps\"}},{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":17,\"operator\":\"keyof\",\"type\":{\"k\":8,\"param\":\"TProps\"}}}]},\"line\":2586}]},\"#[Symbol.iterator]\":{\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IterableIterator\",\"args\":[{\"k\":15,\"types\":[{\"k\":17,\"operator\":\"keyof\",\"type\":{\"k\":8,\"param\":\"TProps\"}},{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":17,\"operator\":\"keyof\",\"type\":{\"k\":8,\"param\":\"TProps\"}}}]}]},\"line\":2588}]}}}]}},\"Seq\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Seq</span></code> describes a lazy operation, allowing them to efficiently chain\\nuse of all the higher-order collection methods (such as <code>map</code> and <code>filter</code>)\\nby not creating intermediate collections.</p>\\n\",\"description\":\"<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be\\nchanged, appended to, rearranged or otherwise modified. Instead, any\\nmutative method called on a <code><span class=\\\"token qualifier\\\" >Seq</span></code> will return a new <code><span class=\\\"token qualifier\\\" >Seq</span></code>.</p>\\n<p><strong>Seq is lazy</strong> — <code><span class=\\\"token qualifier\\\" >Seq</span></code> does as little work as necessary to respond to any\\nmethod call. Values are often created during iteration, including implicit\\niteration when reducing or converting to a concrete data structure such as\\na <code><span class=\\\"token qualifier\\\" >List</span></code> or JavaScript <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\\\">Array</a></code>.</p>\\n<p>For example, the following performs no work, because the resulting\\n<code><span class=\\\"token qualifier\\\" >Seq</span></code>&#39;s values are never iterated:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Seq</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> oddSquares <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >7</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >8</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >!</span><span class=\\\"token operator\\\" >==</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span></code><p>Once the <code><span class=\\\"token qualifier\\\" >Seq</span></code> is used, it performs only the work necessary. In this\\nexample, no intermediate arrays are ever created, filter is called three\\ntimes, and map is only called once:</p>\\n<code class=\\\"codeBlock\\\">oddSquares<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 9</span></code><p>Any collection can be converted to a lazy Seq with <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> map <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token keyword\\\" >const</span> lazySeq <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span>map<span class=\\\"token punctuation\\\" >)</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p><code><span class=\\\"token qualifier\\\" >Seq</span></code> allows for the efficient chaining of operations, allowing for the\\nexpression of logic that can otherwise be very tedious:</p>\\n<code class=\\\"codeBlock\\\">lazySeq\\n  <span class=\\\"token punctuation\\\" >.</span>flip<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>key <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> key<span class=\\\"token punctuation\\\" >.</span>toUpperCase<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>flip<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { A: 1, B: 1, C: 1 }</span></code><p>As well as expressing logic that would otherwise seem memory or time\\nlimited, for example <code><span class=\\\"token qualifier\\\" >Range</span></code> is a special kind of Lazy sequence.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Range</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >Infinity</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>skip<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1000</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>n <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token operator\\\" >-</span>n<span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>n <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> n <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>take<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>reduce<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>r<span class=\\\"token punctuation\\\" >,</span> n<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> r <span class=\\\"token operator\\\" >*</span> n<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1006008</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Seq is often used to provide a rich collection API to JavaScript Object.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>v <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> v <span class=\\\"token operator\\\" >*</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>toObject<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 0, y: 2, z: 4 }</span></code>\",\"notes\":[]},\"module\":{\"isSeq\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeSeq</span></code> is a Seq, it is not backed by a concrete\\nstructure such as Map, List, or Set.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeSeq\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":2680}]}},\"Keyed\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Seq</span></code> which represents key-value pairs.</p>\\n\",\"description\":\"\",\"notes\":[]},\"module\":{},\"call\":{\"doc\":{\"synopsis\":\"<p>Always returns a Seq.Keyed, if input is not keyed, expects an\\ncollection of [K, V] tuples.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code> is a conversion function and not a class, and does not\\nuse the <code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":2695},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":2696},{\"typeParams\":[\"K\",\"V\"],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":2697},{\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":2698}]},\"interface\":{\"line\":2700,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#toJS\":{\"doc\":{\"synopsis\":\"<p>Deeply converts this Keyed Seq to equivalent native JavaScript Object.</p>\\n\",\"description\":\"<p>Converts keys to Strings.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Object\"},\"line\":2706}]},\"#toJSON\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Keyed Seq to equivalent native JavaScript Object.</p>\\n\",\"description\":\"<p>Converts keys to Strings.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]},\"line\":2713}]},\"#toArray\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this collection to an Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":2718}]},\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns itself</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":2723}]},\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq with other collections concatenated to this one.</p>\\n\",\"description\":\"<p>All entries will be present in the resulting Seq, even if they\\nhave the same key.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"KC\",\"VC\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KC\"},{\"k\":8,\"param\":\"VC\"}]}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"KC\"}]},{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"VC\"}]}]},\"line\":2731},{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"C\"}}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":3}]},{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":2732}]},\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq.Keyed with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Seq</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { \\\"a\\\": 10, \\\"b\\\": 20 }</span></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the\\nsame value at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"M\"}]},\"line\":2747}]},\"#mapKeys\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Collection.Keyed.mapKeys</p>\\n\"}]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"M\"},{\"k\":8,\"param\":\"V\"}]},\"line\":2755}]},\"#mapEntries\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Collection.Keyed.mapEntries</p>\\n\"}]},\"signatures\":[{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"entry\",\"type\":{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":2763}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Seq, returning a Seq of the same type.</p>\\n\",\"description\":\"<p>Similar to <code>seq<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":2773}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq with only the entries for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"F\"}]},\"line\":2785},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":2789}]},\"#flip\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Collection.Keyed.flip</p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"K\"}]},\"line\":2797}]}}}]}},\"Indexed\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Seq</span></code> which represents an ordered indexed list of values.</p>\\n\",\"description\":\"\",\"notes\":[]},\"module\":{\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Provides an Seq.Indexed of the values provided.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2809}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Always returns Seq.Indexed, discarding associated keys and\\nsupplying incrementing indices.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code> is a conversion function and not a class, and does\\nnot use the <code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":0}]},\"line\":2819},{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2820},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2821}]},\"interface\":{\"line\":2823,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":2},{\"k\":8,\"param\":\"T\"}]},{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toJS\":{\"doc\":{\"synopsis\":\"<p>Deeply converts this Indexed Seq to equivalent native JavaScript Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"line\":2827}]},\"#toJSON\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Indexed Seq to equivalent native JavaScript Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2832}]},\"#toArray\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this collection to an Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2837}]},\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns itself</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":2842}]},\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq with other collections concatenated to this one.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"valuesOrCollections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"C\"}]},{\"k\":8,\"param\":\"C\"}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":2847}]},\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq.Indexed with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Seq</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ 10, 20 ]</span></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the\\nsame value at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":2862}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Seq, returning a a Seq of the same type.</p>\\n\",\"description\":\"<p>Similar to <code>seq<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":2872}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"F\"}]},\"line\":2884},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":2888}]},\"#zip\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq &quot;zipped&quot; with the provided collections.</p>\\n\",\"description\":\"<p>Like <code>zipWith</code>, but using the default <code>zipper</code>: creating an <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\\\">Array</a></code>.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zip<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":2904},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":2905},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":0}]},\"line\":2906}]},\"#zipAll\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq &quot;zipped&quot; with the provided collections.</p>\\n\",\"description\":\"<p>Unlike <code>zip</code>, <code>zipAll</code> continues zipping until the longest collection is\\nexhausted. Missing values from shorter collections are filled with <code><span class=\\\"token primitive\\\" >undefined</span></code>.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zipAll<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":2920},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":2921},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":0}]},\"line\":2922}]},\"#zipWith\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq &quot;zipped&quot; with the provided collections by using a\\ncustom <code><span class=\\\"t param\\\">zipper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zipWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>a<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> a <span class=\\\"token operator\\\" >+</span> b<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ 5, 7, 9 ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":2935},{\"typeParams\":[\"U\",\"V\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}},{\"name\":\"thirdValue\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"thirdCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":2939},{\"typeParams\":[\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"any\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":2944}]}}}]}},\"Set\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Seq</span></code> which represents a set of values.</p>\\n\",\"description\":\"<p>Because <code><span class=\\\"token qualifier\\\" >Seq</span></code> are often lazy, <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span></code> does not provide the same guarantee\\nof value uniqueness as the concrete <code><span class=\\\"token qualifier\\\" >Set</span></code>.</p>\\n\",\"notes\":[]},\"module\":{\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq.Set of the provided values</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2962}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Always returns a Seq.Set, discarding associated indices or keys.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span></code> is a conversion function and not a class, and does not\\nuse the <code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":0}]},\"line\":2971},{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2972},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2973}]},\"interface\":{\"line\":2975,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"T\"}]},{\"k\":9,\"name\":\"Collection.Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toJS\":{\"doc\":{\"synopsis\":\"<p>Deeply converts this Set Seq to equivalent native JavaScript Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"line\":2979}]},\"#toJSON\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Set Seq to equivalent native JavaScript Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2984}]},\"#toArray\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this collection to an Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2989}]},\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns itself</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":2994}]},\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq with other collections concatenated to this one.</p>\\n\",\"description\":\"<p>All entries will be present in the resulting Seq, even if they\\nare duplicates.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"U\"}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":3002}]},\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq.Set with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { 10, 20 }</span></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the\\nsame value at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":3016}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Seq, returning a Seq of the same type.</p>\\n\",\"description\":\"<p>Similar to <code>seq<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":3026}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":8,\"param\":\"F\"}]},\"line\":3038},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":3042}]}}}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a Seq.</p>\\n\",\"description\":\"<p>Returns a particular kind of <code><span class=\\\"token qualifier\\\" >Seq</span></code> based on the input.</p>\\n<ul>\\n<li>If a <code><span class=\\\"token qualifier\\\" >Seq</span></code>, that same <code><span class=\\\"token qualifier\\\" >Seq</span></code>.</li>\\n<li>If an <code><span class=\\\"token qualifier\\\" >Collection</span></code>, a <code><span class=\\\"token qualifier\\\" >Seq</span></code> of the same kind (Keyed, Indexed, or Set).</li>\\n<li>If an Array-like, an <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code>.</li>\\n<li>If an Iterable Object, an <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code>.</li>\\n<li>If an Object, a <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code>.</li>\\n</ul>\\n<p>Note: An Iterator itself will be treated as an object, becoming a <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code>,\\nwhich is usually not what you want. You should turn your Iterator Object into\\nan iterable object by defining a Symbol.iterator (or @@iterator) method which\\nreturns <code><span class=\\\"token var\\\" >this</span></code>.</p>\\n<p>Note: <code><span class=\\\"token qualifier\\\" >Seq</span></code> is a conversion function and not a class, and does not use the\\n<code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"S\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":8,\"param\":\"S\"}}],\"type\":{\"k\":8,\"param\":\"S\"},\"line\":3069},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":3070},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3071},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Collection.Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3072},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3073},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":3074},{\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":3075}]},\"interface\":{\"line\":3077,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#size\":{\"line\":3089}}},{\"title\":\"Force evaluation\",\"members\":{\"#cacheResult\":{\"doc\":{\"synopsis\":\"<p>Because Sequences are lazy and designed to be chained together, they do\\nnot cache their results. For example, this map function is called a total\\nof 6 times, as each <code>join</code> iterates the Seq of three values.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> squares <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\nsquares<span class=\\\"token punctuation\\\" >.</span>join<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >+</span> squares<span class=\\\"token punctuation\\\" >.</span>join<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code><p>If you know a <code><span class=\\\"token qualifier\\\" >Seq</span></code> will be used multiple times, it may be more\\nefficient to first cache it in memory. Here, the map function is called\\nonly 3 times.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> squares <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>cacheResult<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\nsquares<span class=\\\"token punctuation\\\" >.</span>join<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >+</span> squares<span class=\\\"token punctuation\\\" >.</span>join<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code><p>Use this method judiciously, as it must fully evaluate a Seq which can be\\na burden on memory and possibly performance.</p>\\n<p>Note: after calling <code>cacheResult</code>, a Seq will always have a <code>size</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":3114}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Seq</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ 10, 20 ]</span></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the same\\nvalue at every step.\\nNote: used only for sets.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"M\"}]},\"line\":3131},{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"M\"},{\"k\":8,\"param\":\"M\"}]},\"line\":3150}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Seq, returning a Seq of the same type.</p>\\n\",\"description\":\"<p>Similar to <code>seq<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.\\nNote: Used only for sets.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"M\"}]},\"line\":3160},{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"M\"},{\"k\":8,\"param\":\"M\"}]},\"line\":3171}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"F\"}]},\"line\":3183},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":3187}]}}}]}},\"Collection\":{\"doc\":{\"synopsis\":\"<p>The <code><span class=\\\"token qualifier\\\" >Collection</span></code> is a set of (key, value) entries which can be iterated, and\\nis the base class for all collections in <code>immutable</code>, allowing them to\\nmake use of all the Collection methods (such as <code>map</code> and <code>filter</code>).</p>\\n\",\"description\":\"<p>Note: A collection is always iterated in the same order, however that order\\nmay not always be well defined, as is the case for the <code><span class=\\\"token qualifier\\\" >Map</span></code> and <code><span class=\\\"token qualifier\\\" >Set</span></code>.</p>\\n<p>Collection is the abstract base class for concrete data structures. It\\ncannot be constructed directly.</p>\\n<p>Implementations should extend one of the subclasses, <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code>,\\n<code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code>, or <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span></code>.</p>\\n\",\"notes\":[]},\"module\":{\"Keyed\":{\"doc\":{\"synopsis\":\"<p>Keyed Collections have discrete keys tied to each value.</p>\\n\",\"description\":\"<p>When iterating <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code>, each iteration will yield a <code><span class=\\\"token punctuation\\\" >[</span>K<span class=\\\"token punctuation\\\" >,</span> V<span class=\\\"token punctuation\\\" >]</span></code>\\ntuple, in other words, <code><span class=\\\"token qualifier\\\" >Collection</span>#entries</code> is the default iterator for\\nKeyed Collections.</p>\\n\",\"notes\":[]},\"module\":{},\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a Collection.Keyed</p>\\n\",\"description\":\"<p>Similar to <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, however it expects collection-likes of [K, V]\\ntuples if not constructed from a Collection.Keyed or JS Object.</p>\\n<p>Note: <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code> is a conversion function and not a class, and\\ndoes not use the <code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":3248},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":3249}]},\"interface\":{\"line\":3251,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#toJS\":{\"doc\":{\"synopsis\":\"<p>Deeply converts this Keyed collection to equivalent native JavaScript Object.</p>\\n\",\"description\":\"<p>Converts keys to Strings.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Object\"},\"line\":3257}]},\"#toJSON\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Keyed collection to equivalent native JavaScript Object.</p>\\n\",\"description\":\"<p>Converts keys to Strings.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]},\"line\":3264}]},\"#toArray\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this collection to an Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":3269}]},\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns Seq.Keyed.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":3275}]}}},{\"title\":\"Sequence functions\",\"members\":{\"#flip\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection.Keyed of the same type where the keys and values\\nhave been flipped.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'z'</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'y'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flip<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"z\\\": \\\"a\\\", \\\"y\\\": \\\"b\\\" }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"K\"}]},\"line\":3291}]},\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection with other collections concatenated to this one.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"KC\",\"VC\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KC\"},{\"k\":8,\"param\":\"VC\"}]}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"KC\"}]},{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"VC\"}]}]},\"line\":3296},{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"C\"}}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":3}]},{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":3297}]},\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection.Keyed with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Collection</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { \\\"a\\\": 10, \\\"b\\\": 20 }</span></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the\\nsame value at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"M\"}]},\"line\":3312}]},\"#mapKeys\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection.Keyed of the same type with keys passed through\\na <code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>mapKeys<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>toUpperCase<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"A\\\": 1, \\\"B\\\": 2 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>mapKeys<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced\\nthe same key at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"M\"},{\"k\":8,\"param\":\"V\"}]},\"line\":3331}]},\"#mapEntries\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection.Keyed of the same type with entries\\n([key, value] tuples) passed through a <code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>mapEntries<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> k<span class=\\\"token punctuation\\\" >,</span> v <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token punctuation\\\" >[</span> k<span class=\\\"token punctuation\\\" >.</span>toUpperCase<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> v <span class=\\\"token operator\\\" >*</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"A\\\": 2, \\\"B\\\": 4 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>mapEntries<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced\\nthe same entry at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"entry\",\"type\":{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":3351}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Collection, returning a Collection of the same type.</p>\\n\",\"description\":\"<p>Similar to <code>collection<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":3361}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"F\"}]},\"line\":3373},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":3377}]},\"#[Symbol.iterator]\":{\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IterableIterator\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":3382}]}}}]}},\"Indexed\":{\"doc\":{\"synopsis\":\"<p>Indexed Collections have incrementing numeric keys. They exhibit\\nslightly different behavior than <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code> for some methods in order\\nto better mirror the behavior of JavaScript&#39;s <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\\\">Array</a></code>, and add methods\\nwhich do not make sense on non-indexed Collections such as <code>indexOf</code>.</p>\\n\",\"description\":\"<p>Unlike JavaScript arrays, <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code>s are always dense. &quot;Unset&quot;\\nindices and <code><span class=\\\"token primitive\\\" >undefined</span></code> indices are indistinguishable, and all indices from\\n0 to <code>size</code> are visited when iterated.</p>\\n<p>All Collection.Indexed methods return re-indexed Collections. In other words,\\nindices always start at 0 and increment until size. If you wish to\\npreserve indices, using them as keys, convert to a Collection.Keyed by\\ncalling <code>toKeyedSeq</code>.</p>\\n\",\"notes\":[]},\"module\":{},\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new Collection.Indexed.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code> is a conversion function and not a class, and\\ndoes not use the <code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3409}]},\"interface\":{\"line\":3411,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":2},{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toJS\":{\"doc\":{\"synopsis\":\"<p>Deeply converts this Indexed collection to equivalent native JavaScript Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"line\":3415}]},\"#toJSON\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Indexed collection to equivalent native JavaScript Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3420}]},\"#toArray\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this collection to an Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3425}]}}},{\"title\":\"Reading values\",\"members\":{\"#get\":{\"doc\":{\"synopsis\":\"<p>Returns the value associated with the provided index, or notSetValue if\\nthe index is beyond the bounds of the Collection.</p>\\n\",\"description\":\"<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nCollection. <code>s<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code> gets the last item in the Collection.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"NSV\"],\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"NSV\"}]},\"line\":3436},{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":11}]},\"line\":3437}]}}},{\"title\":\"Conversion to Seq\",\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns Seq.Indexed.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3446}]},\"#fromEntrySeq\":{\"doc\":{\"synopsis\":\"<p>If this is a collection of [key, value] entry tuples, it will return a\\nSeq.Keyed of those entries.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":3452}]}}},{\"title\":\"Combination\",\"members\":{\"#interpose\":{\"doc\":{\"synopsis\":\"<p>Returns a Collection of the same type with <code><span class=\\\"t param\\\">separator</span></code> between each item\\nin this Collection.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"separator\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":10},\"line\":3461}]},\"#interleave\":{\"doc\":{\"synopsis\":\"<p>Returns a Collection of the same type with the provided <code><span class=\\\"t param\\\">collections</span></code>\\ninterleaved into this collection.</p>\\n\",\"description\":\"<p>The resulting Collection includes the first item from each, then the\\nsecond from each, etc.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"require('immutable')\\\"}\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>interleave<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'A'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'B'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'C'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, \\\"A\\\", 2, \\\"B\\\", 3, \\\"C\\\"\\\" ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>The shortest Collection stops interleave.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable')\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>interleave<span class=\\\"token punctuation\\\" >(</span>\\n  <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'A'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'B'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span>\\n  <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'X'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'Y'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'Z'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 1, \\\"A\\\", \\\"X\\\", 2, \\\"B\\\", \\\"Y\\\"\\\" ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Since <code>interleave<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> re-indexes values, it produces a complete copy,\\nwhich has <code>O<span class=\\\"token punctuation\\\" >(</span>N<span class=\\\"token punctuation\\\" >)</span></code> complexity.</p>\\n<p>Note: <code>interleave</code> <em>cannot</em> be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"T\"}]}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":3497}]},\"#splice\":{\"doc\":{\"synopsis\":\"<p>Splice returns a new indexed Collection by replacing a region of this\\nCollection with new values. If values are not provided, it only skips the\\nregion to be removed.</p>\\n\",\"description\":\"<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nCollection. <code>s<span class=\\\"token punctuation\\\" >.</span>splice<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span></code> splices after the second to last item.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'d'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>splice<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'q'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'r'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'s'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ \\\"a\\\", \\\"q\\\", \\\"r\\\", \\\"s\\\", \\\"d\\\" ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Since <code>splice<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> re-indexes values, it produces a complete copy, which\\nhas <code>O<span class=\\\"token punctuation\\\" >(</span>N<span class=\\\"token punctuation\\\" >)</span></code> complexity.</p>\\n<p>Note: <code>splice</code> <em>cannot</em> be used in <code>withMutations</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"removeNum\",\"type\":{\"k\":2}},{\"name\":\"values\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"varArgs\":true}],\"type\":{\"k\":10},\"line\":3519}]},\"#zip\":{\"doc\":{\"synopsis\":\"<p>Returns a Collection of the same type &quot;zipped&quot; with the provided\\ncollections.</p>\\n\",\"description\":\"<p>Like <code>zipWith</code>, but using the default <code>zipper</code>: creating an <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\\\">Array</a></code>.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable')\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zip<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":3541},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":3542},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":0}]},\"line\":3543}]},\"#zipAll\":{\"doc\":{\"synopsis\":\"<p>Returns a Collection &quot;zipped&quot; with the provided collections.</p>\\n\",\"description\":\"<p>Unlike <code>zip</code>, <code>zipAll</code> continues zipping until the longest collection is\\nexhausted. Missing values from shorter collections are filled with <code><span class=\\\"token primitive\\\" >undefined</span></code>.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zipAll<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":3557},{\"typeParams\":[\"U\",\"V\"],\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"other2\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":3558},{\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":0}]},\"line\":3559}]},\"#zipWith\":{\"doc\":{\"synopsis\":\"<p>Returns a Collection of the same type &quot;zipped&quot; with the provided\\ncollections by using a custom <code><span class=\\\"t param\\\">zipper</span></code> function.</p>\\n\",\"description\":\"<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { List } = require('immutable')\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >6</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> c <span class=\\\"token operator\\\" >=</span> a<span class=\\\"token punctuation\\\" >.</span>zipWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>a<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> a <span class=\\\"token operator\\\" >+</span> b<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ 5, 7, 9 ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":3575},{\"typeParams\":[\"U\",\"V\",\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"otherValue\",\"type\":{\"k\":8,\"param\":\"U\"}},{\"name\":\"thirdValue\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"otherCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"U\"}]}},{\"name\":\"thirdCollection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":3579},{\"typeParams\":[\"Z\"],\"params\":[{\"name\":\"zipper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"any\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":8,\"param\":\"Z\"}}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"Z\"}]},\"line\":3584}]}}},{\"title\":\"Search for value\",\"members\":{\"#indexOf\":{\"doc\":{\"synopsis\":\"<p>Returns the first index at which a given value can be found in the\\nCollection, or -1 if it is not present.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchValue\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":2},\"line\":3596}]},\"#lastIndexOf\":{\"doc\":{\"synopsis\":\"<p>Returns the last index at which a given value can be found in the\\nCollection, or -1 if it is not present.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchValue\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":2},\"line\":3602}]},\"#findIndex\":{\"doc\":{\"synopsis\":\"<p>Returns the first index in the Collection where a value satisfies the\\nprovided predicate function. Otherwise -1 is returned.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":2},\"line\":3608}]},\"#findLastIndex\":{\"doc\":{\"synopsis\":\"<p>Returns the last index in the Collection where a value satisfies the\\nprovided predicate function. Otherwise -1 is returned.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":2},\"line\":3617}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection with other collections concatenated to this one.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"valuesOrCollections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"C\"}]},{\"k\":8,\"param\":\"C\"}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"C\"}]}]},\"line\":3627}]},\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection.Indexed with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Collection</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ 1, 2 ]</span></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the\\nsame value at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":3642}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Collection, returning a Collection of the same type.</p>\\n\",\"description\":\"<p>Similar to <code>collection<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":3652}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"F\"}]},\"line\":3664},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":3668}]},\"#[Symbol.iterator]\":{\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IterableIterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3673}]}}}]}},\"Set\":{\"doc\":{\"synopsis\":\"<p>Set Collections only represent values. They have no associated keys or\\nindices. Duplicate values are possible in the lazy <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span></code>s, however\\nthe concrete <code><span class=\\\"token qualifier\\\" >Set</span></code> Collection does not allow duplicate values.</p>\\n\",\"description\":\"<p>Collection methods on Collection.Set such as <code>map</code> and <code>forEach</code> will provide\\nthe value as both the first and second arguments to the provided function.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Collection</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> seq <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'A'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'B'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'C'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { \\\"A\\\", \\\"B\\\", \\\"C\\\" }\\n</span>seq<span class=\\\"token punctuation\\\" >.</span>forEach<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>v<span class=\\\"token punctuation\\\" >,</span> k<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span>\\n assert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span>v<span class=\\\"token punctuation\\\" >,</span> k<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >)</span></code>\",\"notes\":[]},\"module\":{},\"call\":{\"doc\":{\"synopsis\":\"<p>Similar to <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, but always returns a Collection.Set.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span></code> is a factory function and not a class, and does\\nnot use the <code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3702}]},\"interface\":{\"line\":3704,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toJS\":{\"doc\":{\"synopsis\":\"<p>Deeply converts this Set collection to equivalent native JavaScript Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"line\":3708}]},\"#toJSON\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Set collection to equivalent native JavaScript Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3713}]},\"#toArray\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this collection to an Array.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3718}]},\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns Seq.Set.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3724}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection with other collections concatenated to this one.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"U\"],\"params\":[{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"U\"}]}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Set\",\"args\":[{\"k\":13,\"types\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"U\"}]}]},\"line\":3731}]},\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection.Set with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { 1, 2 }</span></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the\\nsame value at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Set\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":3745}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Collection, returning a Collection of the same type.</p>\\n\",\"description\":\"<p>Similar to <code>collection<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Set\",\"args\":[{\"k\":8,\"param\":\"M\"}]},\"line\":3755}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection with only the values for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nfunction returns true.</p>\\n\",\"description\":\"<p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection.Set\",\"args\":[{\"k\":8,\"param\":\"F\"}]},\"line\":3767},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":3771}]},\"#[Symbol.iterator]\":{\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IterableIterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3776}]}}}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a Collection.</p>\\n\",\"description\":\"<p>The type of Collection created is based on the input.</p>\\n<ul>\\n<li>If an <code><span class=\\\"token qualifier\\\" >Collection</span></code>, that same <code><span class=\\\"token qualifier\\\" >Collection</span></code>.</li>\\n<li>If an Array-like, an <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code>.</li>\\n<li>If an Object with an Iterator defined, an <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code>.</li>\\n<li>If an Object, an <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code>.</li>\\n</ul>\\n<p>This methods forces the conversion of Objects and Strings to Collections.\\nIf you want to ensure that a Collection of one item is returned, use\\n<code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of</code>.</p>\\n<p>Note: An Iterator itself will be treated as an object, becoming a <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code>,\\nwhich is usually not what you want. You should turn your Iterator Object into\\nan iterable object by defining a Symbol.iterator (or @@iterator) method which\\nreturns <code><span class=\\\"token var\\\" >this</span></code>.</p>\\n<p>Note: <code><span class=\\\"token qualifier\\\" >Collection</span></code> is a conversion function and not a class, and does not\\nuse the <code><span class=\\\"token keyword\\\" >new</span></code> keyword during construction.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"I\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"I\"}}],\"type\":{\"k\":8,\"param\":\"I\"},\"line\":3803},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":3804},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":3805}]},\"interface\":{\"line\":3807,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"ValueObject\"}],\"groups\":[{\"title\":\"Value equality\",\"members\":{\"#equals\":{\"doc\":{\"synopsis\":\"<p>True if this and the other Collection have value equality, as defined\\nby <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >,</span> other<span class=\\\"token punctuation\\\" >)</span></code>, but provided to\\nallow for chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"other\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":3818}]},\"#hashCode\":{\"doc\":{\"synopsis\":\"<p>Computes and returns the hashed identity for this Collection.</p>\\n\",\"description\":\"<p>The <code>hashCode</code> of a Collection is used to determine potential equality,\\nand is used when adding this to a <code><span class=\\\"token qualifier\\\" >Set</span></code> or as a key in a <code><span class=\\\"token qualifier\\\" >Map</span></code>, enabling\\nlookup via a different instance.</p>\\n<!-- runkit:activate\\n     { \\\"preamble\\\": \\\"const { Set,  List } = require('immutable')\\\" }\\n-->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>notStrictEqual<span class=\\\"token punctuation\\\" >(</span>a<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// different instances\\n</span><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token keyword\\\" >set</span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> a <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >.</span>has<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span><a class=\\\"try-it\\\" data-options=\\\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>If two values have the same <code>hashCode</code>, they are <a href=\\\"http://en.wikipedia.org/wiki/Collision_(computer_science)\\\">not guaranteed\\nto be equal</a>. If two values have different <code>hashCode</code>s,\\nthey must not be equal.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":2},\"line\":3844}]}}},{\"title\":\"Reading values\",\"members\":{\"#get\":{\"doc\":{\"synopsis\":\"<p>Returns the value associated with the provided key, or notSetValue if\\nthe Collection does not contain this key.</p>\\n\",\"description\":\"<p>Note: it is possible a key may be associated with an <code><span class=\\\"token primitive\\\" >undefined</span></code> value,\\nso if <code><span class=\\\"t param\\\">notSetValue</span></code> is not provided and this method returns <code><span class=\\\"token primitive\\\" >undefined</span></code>,\\nthat does not guarantee the key was not found.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"NSV\"],\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"NSV\"}]},\"line\":3857},{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":3858}]},\"#has\":{\"doc\":{\"synopsis\":\"<p>True if a key exists within this <code><span class=\\\"token qualifier\\\" >Collection</span></code>, using <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is</code>\\nto determine equality</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":1},\"line\":3864}]},\"#includes\":{\"doc\":{\"synopsis\":\"<p>True if a value exists within this <code><span class=\\\"token qualifier\\\" >Collection</span></code>, using <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is</code>\\nto determine equality</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"alias\",\"body\":\"contains\"}]},\"signatures\":[{\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":1},\"line\":3871}]},\"#first\":{\"doc\":{\"synopsis\":\"<p>In case the <code><span class=\\\"token qualifier\\\" >Collection</span></code> is not empty returns the first element of the\\n<code><span class=\\\"token qualifier\\\" >Collection</span></code>.\\nIn case the <code><span class=\\\"token qualifier\\\" >Collection</span></code> is empty returns the optional default\\nvalue if provided, if no default value is provided returns undefined.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"NSV\"],\"params\":[{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"NSV\"}]},\"line\":3880}]},\"#last\":{\"doc\":{\"synopsis\":\"<p>In case the <code><span class=\\\"token qualifier\\\" >Collection</span></code> is not empty returns the last element of the\\n<code><span class=\\\"token qualifier\\\" >Collection</span></code>.\\nIn case the <code><span class=\\\"token qualifier\\\" >Collection</span></code> is empty returns the optional default\\nvalue if provided, if no default value is provided returns undefined.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"NSV\"],\"params\":[{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"NSV\"}]},\"line\":3888}]}}},{\"title\":\"Reading deep values\",\"members\":{\"#getIn\":{\"doc\":{\"synopsis\":\"<p>Returns the value found by following a path of keys or indices through\\nnested Collections.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> deepData <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\ndeepData<span class=\\\"token punctuation\\\" >.</span>getIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'y'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 123</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\\nCollection, and getIn() can access those values as well:</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> deepData <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token punctuation\\\" >]</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\ndeepData<span class=\\\"token punctuation\\\" >.</span>getIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'y'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 123</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchKeyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"notSetValue\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":0},\"line\":3913}]},\"#hasIn\":{\"doc\":{\"synopsis\":\"<p>True if the result of following a path of keys or indices through nested\\nCollections results in a set value.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchKeyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":1},\"line\":3919}]}}},{\"title\":\"Persistent changes\",\"members\":{\"#update\":{\"doc\":{\"synopsis\":\"<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\\n\",\"description\":\"<p>For example, to sum a Seq after mapping and filtering:</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Seq</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n\\n<span class=\\\"token block-keyword\\\" >function</span> sum<span class=\\\"token punctuation\\\" >(</span>collection<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n  <span class=\\\"token keyword\\\" >return</span> collection<span class=\\\"token punctuation\\\" >.</span>reduce<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>sum<span class=\\\"token punctuation\\\" >,</span> x<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> sum <span class=\\\"token operator\\\" >+</span> x<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >}</span>\\n\\n<span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >+</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span>sum<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 6</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"R\"],\"params\":[{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"R\"}}}],\"type\":{\"k\":8,\"param\":\"R\"},\"line\":3944}]}}},{\"title\":\"Conversion to JavaScript types\",\"members\":{\"#toJS\":{\"doc\":{\"synopsis\":\"<p>Deeply converts this Collection to equivalent native JavaScript Array or Object.</p>\\n\",\"description\":\"<p><code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code>, and <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span></code> become <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\\\">Array</a></code>, while\\n<code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code> become <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\\\">Object</a></code>, converting keys to Strings.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}]},\"line\":3955}]},\"#toJSON\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Collection to equivalent native JavaScript Array or Object.</p>\\n\",\"description\":\"<p><code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code>, and <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span></code> become <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\\\">Array</a></code>, while\\n<code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code> become <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\\\">Object</a></code>, converting keys to Strings.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]},{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}]},\"line\":3963}]},\"#toArray\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this collection to an Array.</p>\\n\",\"description\":\"<p><code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Indexed</span></code>, and <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Set</span></code> produce an Array of values.\\n<code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code> produce an Array of [key, value] tuples.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]},{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]}]},\"line\":3971}]},\"#toObject\":{\"doc\":{\"synopsis\":\"<p>Shallowly converts this Collection to an Object.</p>\\n\",\"description\":\"<p>Converts keys to Strings.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]},\"line\":3978}]}}},{\"title\":\"Conversion to Collections\",\"members\":{\"#toMap\":{\"doc\":{\"synopsis\":\"<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>toKeyedSeq<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span></code>, but provided\\nfor convenience and to allow for chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":3989}]},\"#toOrderedMap\":{\"doc\":{\"synopsis\":\"<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>toKeyedSeq<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span></code>, but\\nprovided for convenience and to allow for chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"OrderedMap\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":3997}]},\"#toSet\":{\"doc\":{\"synopsis\":\"<p>Converts this Collection to a Set, discarding keys. Throws if values\\nare not hashable.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >)</span></code>, but provided to allow for\\nchained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":4006}]},\"#toOrderedSet\":{\"doc\":{\"synopsis\":\"<p>Converts this Collection to a Set, maintaining the order of iteration and\\ndiscarding keys.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>valueSeq<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span></code>, but provided\\nfor convenience and to allow for chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"OrderedSet\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":4015}]},\"#toList\":{\"doc\":{\"synopsis\":\"<p>Converts this Collection to a List, discarding keys.</p>\\n\",\"description\":\"<p>This is similar to <code><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span>collection<span class=\\\"token punctuation\\\" >)</span></code>, but provided to allow for chained\\nexpressions. However, when called on <code><span class=\\\"token qualifier\\\" >Map</span></code> or other keyed collections,\\n<code>collection<span class=\\\"token punctuation\\\" >.</span>toList<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> discards the keys and creates a list of only the\\nvalues, whereas <code><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span>collection<span class=\\\"token punctuation\\\" >)</span></code> creates a list of entry tuples.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >var</span> myMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'Apple'</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'Banana'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span>myMap<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ [ \\\"a\\\", \\\"Apple\\\" ], [ \\\"b\\\", \\\"Banana\\\" ] ]\\n</span>myMap<span class=\\\"token punctuation\\\" >.</span>toList<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ \\\"Apple\\\", \\\"Banana\\\" ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":4033}]},\"#toStack\":{\"doc\":{\"synopsis\":\"<p>Converts this Collection to a Stack, discarding keys. Throws if values\\nare not hashable.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >)</span></code>, but provided to allow for\\nchained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":4042}]}}},{\"title\":\"Conversion to Seq\",\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Converts this Collection to a Seq of the same kind (indexed,\\nkeyed, or set).</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":4051}]},\"#toKeyedSeq\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\\n\",\"description\":\"<p>This is useful if you want to operate on an\\nCollection.Indexed and preserve the [index, value] pairs.</p>\\n<p>The returned Seq will have identical iteration order as\\nthis Collection.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Seq</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> indexedSeq <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'A'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'B'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'C'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ \\\"A\\\", \\\"B\\\", \\\"C\\\" ]\\n</span>indexedSeq<span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>v <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> v <span class=\\\"token operator\\\" >===</span> <span class=\\\"token string\\\" >'B'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ \\\"B\\\" ]\\n</span><span class=\\\"token keyword\\\" >const</span> keyedSeq <span class=\\\"token operator\\\" >=</span> indexedSeq<span class=\\\"token punctuation\\\" >.</span>toKeyedSeq<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { 0: \\\"A\\\", 1: \\\"B\\\", 2: \\\"C\\\" }\\n</span>keyedSeq<span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>v <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> v <span class=\\\"token operator\\\" >===</span> <span class=\\\"token string\\\" >'B'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { 1: \\\"B\\\" }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":4075}]},\"#toIndexedSeq\":{\"doc\":{\"synopsis\":\"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":4080}]},\"#toSetSeq\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Set\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":4085}]}}},{\"title\":\"Iterators\",\"members\":{\"#keys\":{\"doc\":{\"synopsis\":\"<p>An iterator of this <code><span class=\\\"token qualifier\\\" >Collection</span></code>&#39;s keys.</p>\\n\",\"description\":\"<p>Note: this will return an ES6 iterator which does not support\\nImmutable.js sequence algorithms. Use <code>keySeq</code> instead, if this is\\nwhat you want.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IterableIterator\",\"args\":[{\"k\":8,\"param\":\"K\"}]},\"line\":4097}]},\"#values\":{\"doc\":{\"synopsis\":\"<p>An iterator of this <code><span class=\\\"token qualifier\\\" >Collection</span></code>&#39;s values.</p>\\n\",\"description\":\"<p>Note: this will return an ES6 iterator which does not support\\nImmutable.js sequence algorithms. Use <code>valueSeq</code> instead, if this is\\nwhat you want.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IterableIterator\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":4106}]},\"#entries\":{\"doc\":{\"synopsis\":\"<p>An iterator of this <code><span class=\\\"token qualifier\\\" >Collection</span></code>&#39;s entries as <code><span class=\\\"token punctuation\\\" >[</span> key<span class=\\\"token punctuation\\\" >,</span> value <span class=\\\"token punctuation\\\" >]</span></code> tuples.</p>\\n\",\"description\":\"<p>Note: this will return an ES6 iterator which does not support\\nImmutable.js sequence algorithms. Use <code>entrySeq</code> instead, if this is\\nwhat you want.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IterableIterator\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":4115}]}}},{\"title\":\"Collections (Seq)\",\"members\":{\"#keySeq\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq.Indexed of the keys of this Collection,\\ndiscarding values.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"K\"}]},\"line\":4124}]},\"#valueSeq\":{\"doc\":{\"synopsis\":\"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":4129}]},\"#entrySeq\":{\"doc\":{\"synopsis\":\"<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq.Indexed\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":4134}]}}},{\"title\":\"Sequence algorithms\",\"members\":{\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Collection</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { \\\"a\\\": 10, \\\"b\\\": 20 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it produced the same\\nvalue at every step.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"M\"}]},\"line\":4153}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type with only the entries for which\\nthe <code><span class=\\\"t param\\\">predicate</span></code> function returns true.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> d<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"b\\\": 2, \\\"d\\\": 4 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>filter<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"F\"],\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"F\"}]},\"line\":4180},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":4184}]},\"#filterNot\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type with only the entries for which\\nthe <code><span class=\\\"t param\\\">predicate</span></code> function returns false.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> d<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>filterNot<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { \\\"a\\\": 1, \\\"c\\\": 3 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>filterNot<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> always returns a new instance, even if it results in\\nnot filtering out any values.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":4203}]},\"#reverse\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type in reverse order.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":4211}]},\"#sort\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type which includes the same entries,\\nstably sorted by using a <code><span class=\\\"t param\\\">comparator</span></code>.</p>\\n\",\"description\":\"<p>If a <code><span class=\\\"t param\\\">comparator</span></code> is not provided, a default comparator uses <code><span class=\\\"token operator\\\" >&lt;</span></code> and <code><span class=\\\"token operator\\\" >></span></code>.</p>\\n<p><code>comparator<span class=\\\"token punctuation\\\" >(</span>valueA<span class=\\\"token punctuation\\\" >,</span> valueB<span class=\\\"token punctuation\\\" >)</span></code>:</p>\\n<ul>\\n<li>Returns <code><span class=\\\"token number\\\" >0</span></code> if the elements should not be swapped.</li>\\n<li>Returns <code><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\\n<li>Returns <code><span class=\\\"token number\\\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\\n<li>Is pure, i.e. it must always return the same value for the same pair\\nof values.</li>\\n</ul>\\n<p>When sorting collections which have no defined order, their ordered\\nequivalents will be returned. e.g. <code>map<span class=\\\"token punctuation\\\" >.</span>sort<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> returns OrderedMap.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token string\\\" >\\\"c\\\"</span><span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >\\\"a\\\"</span><span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >\\\"b\\\"</span><span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>sort<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>a<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token punctuation\\\" >{</span>\\n  <span class=\\\"token block-keyword\\\" >if</span> <span class=\\\"token punctuation\\\" >(</span>a <span class=\\\"token operator\\\" >&lt;</span> b<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token keyword\\\" >return</span> <span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token punctuation\\\" >}</span>\\n  <span class=\\\"token block-keyword\\\" >if</span> <span class=\\\"token punctuation\\\" >(</span>a <span class=\\\"token operator\\\" >></span> b<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token keyword\\\" >return</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token punctuation\\\" >}</span>\\n  <span class=\\\"token block-keyword\\\" >if</span> <span class=\\\"token punctuation\\\" >(</span>a <span class=\\\"token operator\\\" >===</span> b<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token keyword\\\" >return</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// OrderedMap { \\\"a\\\": 1, \\\"b\\\": 2, \\\"c\\\": 3 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: <code>sort<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> Always returns a new instance, even if the original was\\nalready sorted.</p>\\n<p>Note: This is always an eager operation.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":10},\"line\":4246}]},\"#sortBy\":{\"doc\":{\"synopsis\":\"<p>Like <code>sort</code>, but also accepts a <code><span class=\\\"t param\\\">comparatorValueMapper</span></code> which allows for\\nsorting by more sophisticated means:</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\">hitters<span class=\\\"token punctuation\\\" >.</span>sortBy<span class=\\\"token punctuation\\\" >(</span>hitter <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> hitter<span class=\\\"token punctuation\\\" >.</span>avgHits<span class=\\\"token punctuation\\\" >)</span></code><p>Note: <code>sortBy<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> Always returns a new instance, even if the original was\\nalready sorted.</p>\\n<p>Note: This is always an eager operation.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"comparatorValueMapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"C\"}}},{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"C\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":10},\"line\":4259}]},\"#groupBy\":{\"doc\":{\"synopsis\":\"<p>Returns a <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code> of <code><span class=\\\"token qualifier\\\" >Collection</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyeds</span></code>, grouped by the return\\nvalue of the <code><span class=\\\"t param\\\">grouper</span></code> function.</p>\\n\",\"description\":\"<p>Note: This is always an eager operation.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> listOfMaps <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span>\\n  <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> v<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >0</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span>\\n  <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> v<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span>\\n  <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> v<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span>\\n  <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> v<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >0</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span>\\n  <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> v<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> groupsOfMaps <span class=\\\"token operator\\\" >=</span> listOfMaps<span class=\\\"token punctuation\\\" >.</span>groupBy<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'v'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map {\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   0: List [ Map{ \\\"v\\\": 0 }, Map { \\\"v\\\": 0 } ],\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   1: List [ Map{ \\\"v\\\": 1 }, Map { \\\"v\\\": 1 } ],\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//   2: List [ Map{ \\\"v\\\": 2 } ],\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"G\"],\"params\":[{\"name\":\"grouper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"G\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Seq.Keyed\",\"args\":[{\"k\":8,\"param\":\"G\"},{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":4288}]}}},{\"title\":\"Side effects\",\"members\":{\"#forEach\":{\"doc\":{\"synopsis\":\"<p>The <code><span class=\\\"t param\\\">sideEffect</span></code> is executed for every entry in the Collection.</p>\\n\",\"description\":\"<p>Unlike <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\\\">Array#forEach</a></code>, if any call of <code><span class=\\\"t param\\\">sideEffect</span></code> returns\\n<code><span class=\\\"token primitive\\\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\\n(including the last iteration which returned false).</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"sideEffect\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":2},\"line\":4303}]}}},{\"title\":\"Creating subsets\",\"members\":{\"#slice\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type representing a portion of this\\nCollection from start up to but not including end.</p>\\n\",\"description\":\"<p>If begin is negative, it is offset from the end of the Collection. e.g.\\n<code>slice<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span></code> returns a Collection of the last two entries. If it is not\\nprovided the new Collection will begin at the beginning of this Collection.</p>\\n<p>If end is negative, it is offset from the end of the Collection. e.g.\\n<code>slice<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code> returns a Collection of everything but the last entry. If\\nit is not provided, the new Collection will continue through the end of\\nthis Collection.</p>\\n<p>If the requested slice is equivalent to the current Collection, then it\\nwill return itself.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"begin\",\"type\":{\"k\":2},\"optional\":true},{\"name\":\"end\",\"type\":{\"k\":2},\"optional\":true}],\"type\":{\"k\":10},\"line\":4327}]},\"#rest\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type containing all entries except\\nthe first.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":4333}]},\"#butLast\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type containing all entries except\\nthe last.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":10},\"line\":4339}]},\"#skip\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type which excludes the first <code><span class=\\\"t param\\\">amount</span></code>\\nentries from this Collection.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"amount\",\"type\":{\"k\":2}}],\"type\":{\"k\":10},\"line\":4345}]},\"#skipLast\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type which excludes the last <code><span class=\\\"t param\\\">amount</span></code>\\nentries from this Collection.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"amount\",\"type\":{\"k\":2}}],\"type\":{\"k\":10},\"line\":4351}]},\"#skipWhile\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type which includes entries starting\\nfrom when <code><span class=\\\"t param\\\">predicate</span></code> first returns false.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'hat'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'god'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>skipWhile<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>match<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token regex\\\" >/g/</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ \\\"cat\\\", \\\"hat\\\", \\\"god\\\"\\\" ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":4365}]},\"#skipUntil\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type which includes entries starting\\nfrom when <code><span class=\\\"t param\\\">predicate</span></code> first returns true.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'hat'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'god'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>skipUntil<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>match<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token regex\\\" >/hat/</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ \\\"hat\\\", \\\"god\\\"\\\" ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":4382}]},\"#take\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type which includes the first <code><span class=\\\"t param\\\">amount</span></code>\\nentries from this Collection.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"amount\",\"type\":{\"k\":2}}],\"type\":{\"k\":10},\"line\":4391}]},\"#takeLast\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type which includes the last <code><span class=\\\"t param\\\">amount</span></code>\\nentries from this Collection.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"amount\",\"type\":{\"k\":2}}],\"type\":{\"k\":10},\"line\":4397}]},\"#takeWhile\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type which includes entries from this\\nCollection as long as the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'hat'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'god'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>takeWhile<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>match<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token regex\\\" >/o/</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ \\\"dog\\\", \\\"frog\\\" ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":4411}]},\"#takeUntil\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type which includes entries from this\\nCollection as long as the <code><span class=\\\"t param\\\">predicate</span></code> returns false.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'hat'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'god'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>takeUntil<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>match<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token regex\\\" >/at/</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// List [ \\\"dog\\\", \\\"frog\\\" ]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":10},\"line\":4428}]}}},{\"title\":\"Combination\",\"members\":{\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new Collection of the same type with other values and\\ncollection-like concatenated to this one.</p>\\n\",\"description\":\"<p>For Seqs, all entries will be present in the resulting Seq, even if they\\nhave the same key.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"valuesOrCollections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":4443}]},\"#flatten\":{\"doc\":{\"synopsis\":\"<p>Flattens nested Collections.</p>\\n\",\"description\":\"<p>Will deeply flatten the Collection by default, returning a Collection of the\\nsame type, but a <code><span class=\\\"t param\\\">depth</span></code> can be provided in the form of a number or\\nboolean (where true means to shallowly flatten one level). A depth of 0\\n(or shallow: false) will deeply flatten.</p>\\n<p>Flattens only others Collection, not Arrays or Objects.</p>\\n<p>Note: <code>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code> operates on Collection&lt;any, Collection&lt;K, V&gt;&gt; and\\nreturns Collection&lt;K, V&gt;</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"depth\",\"type\":{\"k\":2},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":4458},{\"params\":[{\"name\":\"shallow\",\"type\":{\"k\":1},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":4459}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Collection, returning a Collection of the same type.</p>\\n\",\"description\":\"<p>Similar to <code>collection<span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code>.\\nUsed for Dictionaries only.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"M\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"M\"}]},\"line\":4466},{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":4477}]}}},{\"title\":\"Reducing a value\",\"members\":{\"#reduce\":{\"doc\":{\"synopsis\":\"<p>Reduces the Collection to a value by calling the <code><span class=\\\"t param\\\">reducer</span></code> for every entry\\nin the Collection and passing along the reduced value.</p>\\n\",\"description\":\"<p>If <code><span class=\\\"t param\\\">initialReduction</span></code> is not provided, the first item in the\\nCollection will be used.</p>\\n\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\\\">Array#reduce</a></code>.</p>\\n\"}]},\"signatures\":[{\"typeParams\":[\"R\"],\"params\":[{\"name\":\"reducer\",\"type\":{\"k\":7,\"params\":[{\"name\":\"reduction\",\"type\":{\"k\":8,\"param\":\"R\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"R\"}}},{\"name\":\"initialReduction\",\"type\":{\"k\":8,\"param\":\"R\"}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"R\"},\"line\":4493},{\"typeParams\":[\"R\"],\"params\":[{\"name\":\"reducer\",\"type\":{\"k\":7,\"params\":[{\"name\":\"reduction\",\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"R\"}]}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"R\"}}}],\"type\":{\"k\":8,\"param\":\"R\"},\"line\":4498}]},\"#reduceRight\":{\"doc\":{\"synopsis\":\"<p>Reduces the Collection in reverse (from the right side).</p>\\n\",\"description\":\"<p>Note: Similar to this.reverse().reduce(), and provided for parity\\nwith <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\\\">Array#reduceRight</a></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"R\"],\"params\":[{\"name\":\"reducer\",\"type\":{\"k\":7,\"params\":[{\"name\":\"reduction\",\"type\":{\"k\":8,\"param\":\"R\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"R\"}}},{\"name\":\"initialReduction\",\"type\":{\"k\":8,\"param\":\"R\"}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"R\"},\"line\":4508},{\"typeParams\":[\"R\"],\"params\":[{\"name\":\"reducer\",\"type\":{\"k\":7,\"params\":[{\"name\":\"reduction\",\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"R\"}]}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"R\"}}}],\"type\":{\"k\":8,\"param\":\"R\"},\"line\":4513}]},\"#every\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">predicate</span></code> returns true for all entries in the Collection.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":1},\"line\":4520}]},\"#some\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">predicate</span></code> returns true for any entry in the Collection.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":1},\"line\":4528}]},\"#join\":{\"doc\":{\"synopsis\":\"<p>Joins values together as a string, inserting a separator between each.\\nThe default separator is <code><span class=\\\"token string\\\" >\\\",\\\"</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"separator\",\"type\":{\"k\":3},\"optional\":true}],\"type\":{\"k\":3},\"line\":4537}]},\"#isEmpty\":{\"doc\":{\"synopsis\":\"<p>Returns true if this Collection includes no values.</p>\\n\",\"description\":\"<p>For some lazy <code><span class=\\\"token qualifier\\\" >Seq</span></code>, <code>isEmpty</code> might need to iterate to determine\\nemptiness. At most one iteration will occur.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":1},\"line\":4545}]},\"#count\":{\"doc\":{\"synopsis\":\"<p>Returns the size of this Collection.</p>\\n\",\"description\":\"<p>Regardless of if this Collection can describe its size lazily (some Seqs\\ncannot), this method will always return the correct size. E.g. it\\nevaluates a lazy <code><span class=\\\"token qualifier\\\" >Seq</span></code> if necessary.</p>\\n<p>If <code><span class=\\\"t param\\\">predicate</span></code> is provided, then this returns the count of entries in the\\nCollection for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":2},\"line\":4557},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":2},\"line\":4558}]},\"#countBy\":{\"doc\":{\"synopsis\":\"<p>Returns a <code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Keyed</span></code> of counts, grouped by the return value of\\nthe <code><span class=\\\"t param\\\">grouper</span></code> function.</p>\\n\",\"description\":\"<p>Note: This is not a lazy operation.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"G\"],\"params\":[{\"name\":\"grouper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"G\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"G\"},{\"k\":2}]},\"line\":4569}]}}},{\"title\":\"Search for value\",\"members\":{\"#find\":{\"doc\":{\"synopsis\":\"<p>Returns the first value for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":4580}]},\"#findLast\":{\"doc\":{\"synopsis\":\"<p>Returns the last value for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"t param\\\">predicate</span></code> will be called for each entry in reverse.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":4591}]},\"#findEntry\":{\"doc\":{\"synopsis\":\"<p>Returns the first [key, value] entry for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},{\"k\":11}]},\"line\":4600}]},\"#findLastEntry\":{\"doc\":{\"synopsis\":\"<p>Returns the last [key, value] entry for which the <code><span class=\\\"t param\\\">predicate</span></code>\\nreturns true.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"t param\\\">predicate</span></code> will be called for each entry in reverse.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":15,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},{\"k\":11}]},\"line\":4612}]},\"#findKey\":{\"doc\":{\"synopsis\":\"<p>Returns the key for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":11}]},\"line\":4621}]},\"#findLastKey\":{\"doc\":{\"synopsis\":\"<p>Returns the last key for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"t param\\\">predicate</span></code> will be called for each entry in reverse.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":11}]},\"line\":4631}]},\"#keyOf\":{\"doc\":{\"synopsis\":\"<p>Returns the key associated with the search value, or undefined.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchValue\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":11}]},\"line\":4639}]},\"#lastKeyOf\":{\"doc\":{\"synopsis\":\"<p>Returns the last key associated with the search value, or undefined.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchValue\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"K\"},{\"k\":11}]},\"line\":4644}]},\"#max\":{\"doc\":{\"synopsis\":\"<p>Returns the maximum value in this collection. If any values are\\ncomparatively equivalent, the first one found will be returned.</p>\\n\",\"description\":\"<p>The <code><span class=\\\"t param\\\">comparator</span></code> is used in the same way as <code><span class=\\\"token qualifier\\\" >Collection</span>#sort</code>. If it is not\\nprovided, the default comparator is <code><span class=\\\"token operator\\\" >></span></code>.</p>\\n<p>When two values are considered equivalent, the first encountered will be\\nreturned. Otherwise, <code>max</code> will operate independent of the order of input\\nas long as the comparator is commutative. The default comparator <code><span class=\\\"token operator\\\" >></span></code> is\\ncommutative <em>only</em> when types do not differ.</p>\\n<p>If <code><span class=\\\"t param\\\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\\nthat value will be returned.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":4661}]},\"#maxBy\":{\"doc\":{\"synopsis\":\"<p>Like <code>max</code>, but also accepts a <code><span class=\\\"t param\\\">comparatorValueMapper</span></code> which allows for\\ncomparing by more sophisticated means:</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\">hitters<span class=\\\"token punctuation\\\" >.</span>maxBy<span class=\\\"token punctuation\\\" >(</span>hitter <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> hitter<span class=\\\"token punctuation\\\" >.</span>avgHits<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"comparatorValueMapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"C\"}}},{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"C\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":4670}]},\"#min\":{\"doc\":{\"synopsis\":\"<p>Returns the minimum value in this collection. If any values are\\ncomparatively equivalent, the first one found will be returned.</p>\\n\",\"description\":\"<p>The <code><span class=\\\"t param\\\">comparator</span></code> is used in the same way as <code><span class=\\\"token qualifier\\\" >Collection</span>#sort</code>. If it is not\\nprovided, the default comparator is <code><span class=\\\"token operator\\\" >&lt;</span></code>.</p>\\n<p>When two values are considered equivalent, the first encountered will be\\nreturned. Otherwise, <code>min</code> will operate independent of the order of input\\nas long as the comparator is commutative. The default comparator <code><span class=\\\"token operator\\\" >&lt;</span></code> is\\ncommutative <em>only</em> when types do not differ.</p>\\n<p>If <code><span class=\\\"t param\\\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\\nthat value will be returned.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":4690}]},\"#minBy\":{\"doc\":{\"synopsis\":\"<p>Like <code>min</code>, but also accepts a <code><span class=\\\"t param\\\">comparatorValueMapper</span></code> which allows for\\ncomparing by more sophisticated means:</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\">hitters<span class=\\\"token punctuation\\\" >.</span>minBy<span class=\\\"token punctuation\\\" >(</span>hitter <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> hitter<span class=\\\"token punctuation\\\" >.</span>avgHits<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"comparatorValueMapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"iter\",\"type\":{\"k\":10}}],\"type\":{\"k\":8,\"param\":\"C\"}}},{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"C\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":4699}]}}},{\"title\":\"Comparison\",\"members\":{\"#isSubset\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">iter</span></code> includes every value in this Collection.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":1},\"line\":4710}]},\"#isSuperset\":{\"doc\":{\"synopsis\":\"<p>True if this Collection includes every value in <code><span class=\\\"t param\\\">iter</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":1},\"line\":4715}]}}}]}},\"ValueObject\":{\"interface\":{\"line\":4721,\"doc\":{\"synopsis\":\"<p>The interface to fulfill to qualify as a Value Object.</p>\\n\",\"description\":\"\",\"notes\":[]},\"groups\":[{\"members\":{\"#equals\":{\"doc\":{\"synopsis\":\"<p>True if this and the other Collection have value equality, as defined\\nby <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >,</span> other<span class=\\\"token punctuation\\\" >)</span></code>, but provided to\\nallow for chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"other\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":4729}]},\"#hashCode\":{\"doc\":{\"synopsis\":\"<p>Computes and returns the hashed identity for this Collection.</p>\\n\",\"description\":\"<p>The <code>hashCode</code> of a Collection is used to determine potential equality,\\nand is used when adding this to a <code><span class=\\\"token qualifier\\\" >Set</span></code> or as a key in a <code><span class=\\\"token qualifier\\\" >Map</span></code>, enabling\\nlookup via a different instance.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Set</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> a <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >const</span> b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>notStrictEqual<span class=\\\"token punctuation\\\" >(</span>a<span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// different instances\\n</span><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token keyword\\\" >set</span> <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> a <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >.</span>has<span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Note: hashCode() MUST return a Uint32 number. The easiest way to\\nguarantee this is to return <code>myHash <span class=\\\"token operator\\\" >|</span> <span class=\\\"token number\\\" >0</span></code> from a custom implementation.</p>\\n<p>If two values have the same <code>hashCode</code>, they are <a href=\\\"http://en.wikipedia.org/wiki/Collision_(computer_science)\\\">not guaranteed\\nto be equal</a>. If two values have different <code>hashCode</code>s,\\nthey must not be equal.</p>\\n<p>Note: <code>hashCode<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> is not guaranteed to always be called before\\n<code>equals<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>. Most but not all Immutable.js collections use hash codes to\\norganize their internal data structures, while all Immutable.js\\ncollections use equality during lookups.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":2},\"line\":4762}]}}}]}},\"fromJS\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Deeply converts plain JS objects and arrays to Immutable Maps and Lists.</p>\\n\",\"description\":\"<p>If a <code><span class=\\\"t param\\\">reviver</span></code> is optionally provided, it will be called with every\\ncollection as a Seq (beginning with the most nested collections\\nand proceeding to the top-level collection itself), along with the key\\nreferring to each collection and the parent JS object provided as <code><span class=\\\"token var\\\" >this</span></code>.\\nFor the top level, object, the key will be <code><span class=\\\"token string\\\" >\\\"\\\"</span></code>. This <code><span class=\\\"t param\\\">reviver</span></code> is expected\\nto return a new Immutable Collection, allowing for custom conversions from\\ndeep JS objects. Finally, a <code>path</code> is provided which is the sequence of\\nkeys to this value from the starting value.</p>\\n<p><code><span class=\\\"t param\\\">reviver</span></code> acts similarly to the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\\\" title=\\\"Using the reviver parameter\\\">same parameter in <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\\\">JSON.parse</a></code></a>.</p>\\n<p>If <code><span class=\\\"t param\\\">reviver</span></code> is not provided, the default behavior will convert Objects\\ninto Maps and Arrays into Lists like so:</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> fromJS<span class=\\\"token punctuation\\\" >,</span> isKeyed <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token block-keyword\\\" >function</span> <span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >,</span> value<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n  <span class=\\\"token keyword\\\" >return</span> isKeyed<span class=\\\"token punctuation\\\" >(</span>value<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >?</span> value<span class=\\\"token punctuation\\\" >.</span>toMap<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >:</span> value<span class=\\\"token punctuation\\\" >.</span>toList<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >}</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p><code>fromJS</code> is conservative in its conversion. It will only convert\\narrays which pass <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\\\">Array.isArray</a></code> to Lists, and only raw objects (no custom\\nprototype) to Map.</p>\\n<p>Accordingly, this example converts native JS data to OrderedMap and List:</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> fromJS<span class=\\\"token punctuation\\\" >,</span> isKeyed <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\nfromJS<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span>b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >40</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token block-keyword\\\" >function</span> <span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >,</span> value<span class=\\\"token punctuation\\\" >,</span> path<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n  console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >,</span> value<span class=\\\"token punctuation\\\" >,</span> path<span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token keyword\\\" >return</span> isKeyed<span class=\\\"token punctuation\\\" >(</span>value<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >?</span> value<span class=\\\"token punctuation\\\" >.</span>toOrderedMap<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >:</span> value<span class=\\\"token punctuation\\\" >.</span>toList<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n\\n<span class=\\\"token operator\\\" >></span> <span class=\\\"token string\\\" >\\\"b\\\"</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >30</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >\\\"a\\\"</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >\\\"b\\\"</span> <span class=\\\"token punctuation\\\" >]</span>\\n<span class=\\\"token operator\\\" >></span> <span class=\\\"token string\\\" >\\\"a\\\"</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >{</span>b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >\\\"a\\\"</span> <span class=\\\"token punctuation\\\" >]</span>\\n<span class=\\\"token operator\\\" >></span> <span class=\\\"token string\\\" >\\\"\\\"</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span>b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >40</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >]</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Keep in mind, when using JS objects to construct Immutable Maps, that\\nJavaScript Object properties are always strings, even if written in a\\nquote-less shorthand, while Immutable Maps accept keys of any type.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >let</span> obj <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >\\\"one\\\"</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token qualifier\\\" >Object</span><span class=\\\"token punctuation\\\" >.</span>keys<span class=\\\"token punctuation\\\" >(</span>obj<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ \\\"1\\\" ]\\n</span>assert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span>obj<span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >\\\"1\\\"</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> obj<span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"one\\\" === \\\"one\\\"\\n</span>\\n<span class=\\\"token keyword\\\" >let</span> map <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span>obj<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>notEqual<span class=\\\"token punctuation\\\" >(</span>map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >\\\"1\\\"</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"one\\\" !== undefined</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p>Property access for JavaScript Objects first converts the key to a string,\\nbut since Immutable Map keys can be of any type the argument to <code><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> is\\nnot altered.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"jsValue\",\"type\":{\"k\":0}},{\"name\":\"reviver\",\"type\":{\"k\":7,\"params\":[{\"name\":\"key\",\"type\":{\"k\":13,\"types\":[{\"k\":3},{\"k\":2}]}},{\"name\":\"sequence\",\"type\":{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Collection.Keyed\",\"args\":[{\"k\":3},{\"k\":0}]},{\"k\":9,\"name\":\"Collection.Indexed\",\"args\":[{\"k\":0}]}]}},{\"name\":\"path\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":3},{\"k\":2}]}]},\"optional\":true}],\"type\":{\"k\":0}},\"optional\":true}],\"type\":{\"k\":0},\"line\":4831}]}},\"is\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Value equality check with semantics similar to <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\\\">Object.is</a></code>, but treats\\nImmutable <code><span class=\\\"token qualifier\\\" >Collection</span></code>s as values, equal if the second <code><span class=\\\"token qualifier\\\" >Collection</span></code> includes\\nequivalent values.</p>\\n\",\"description\":\"<p>It&#39;s used throughout Immutable when checking for equality, including <code><span class=\\\"token qualifier\\\" >Map</span></code>\\nkey equality and <code><span class=\\\"token qualifier\\\" >Set</span></code> membership.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> is <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> map1 <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> map2 <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span>map1 <span class=\\\"token operator\\\" >!</span><span class=\\\"token operator\\\" >==</span> map2<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Object</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span>map1<span class=\\\"token punctuation\\\" >,</span> map2<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token primitive\\\" >false</span><span class=\\\"token punctuation\\\" >)</span>\\nassert<span class=\\\"token punctuation\\\" >.</span>equal<span class=\\\"token punctuation\\\" >(</span>is<span class=\\\"token punctuation\\\" >(</span>map1<span class=\\\"token punctuation\\\" >,</span> map2<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code><p><code>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> compares primitive types like strings and numbers, Immutable.js\\ncollections like <code><span class=\\\"token qualifier\\\" >Map</span></code> and <code><span class=\\\"token qualifier\\\" >List</span></code>, but also any custom object which\\nimplements <code><span class=\\\"token qualifier\\\" >Value</span><span class=\\\"token qualifier\\\" >Object</span></code> by providing <code>equals<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> and <code>hashCode<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> methods.</p>\\n<p>Note: Unlike <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\\\">Object.is</a></code>, <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is</code> assumes <code><span class=\\\"token number\\\" >0</span></code> and <code><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >0</span></code> are the same\\nvalue, matching the behavior of ES6 Map key equality.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"first\",\"type\":{\"k\":0}},{\"name\":\"second\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":4865}]}},\"hash\":{\"call\":{\"doc\":{\"synopsis\":\"<p>The <code>hash<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> function is an important part of how Immutable determines if\\ntwo values are equivalent and is used to determine how to store those\\nvalues. Provided with any value, <code>hash<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> will return a 31-bit integer.</p>\\n\",\"description\":\"<p>When designing Objects which may be equal, it&#39;s important that when a\\n<code><span class=\\\"token punctuation\\\" >.</span>equals<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> method returns true, that both values <code><span class=\\\"token punctuation\\\" >.</span>hashCode<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> method\\nreturn the same value. <code>hash<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> may be used to produce those values.</p>\\n<p>For non-Immutable Objects that do not provide a <code><span class=\\\"token punctuation\\\" >.</span>hashCode<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> functions\\n(including plain Objects, plain Arrays, Date objects, etc), a unique hash\\nvalue will be created for each <em>instance</em>. That is, the create hash\\nrepresents referential equality, and not value equality for Objects. This\\nensures that if that Object is mutated over time that its hash code will\\nremain consistent, allowing Objects to be used as keys and values in\\nImmutable.js collections.</p>\\n<p>Note that <code>hash<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> attempts to balance between speed and avoiding\\ncollisions, however it makes no attempt to produce secure hashes.</p>\\n<p><em>New in Version 4.0</em></p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":2},\"line\":4889}]}},\"isImmutable\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeImmutable</span></code> is an Immutable Collection or Record.</p>\\n\",\"description\":\"<p>Note: Still returns true even if the collections is within a <code>withMutations<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> isImmutable<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Stack</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nisImmutable<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isImmutable<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isImmutable<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isImmutable<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isImmutable<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isImmutable<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>asMutable<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeImmutable\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":4907}]}},\"isCollection\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeCollection</span></code> is a Collection, or any of its subclasses.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> isCollection<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Stack</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nisCollection<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isCollection<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isCollection<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isCollection<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isCollection<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeCollection\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":4922}]}},\"isKeyed\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeKeyed</span></code> is a Collection.Keyed, or any of its subclasses.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> isKeyed<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Stack</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nisKeyed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isKeyed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isKeyed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isKeyed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isKeyed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeKeyed\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":4937}]}},\"isIndexed\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeIndexed</span></code> is a Collection.Indexed, or any of its subclasses.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> isIndexed<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Set</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nisIndexed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isIndexed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isIndexed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isIndexed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isIndexed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isIndexed<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeIndexed\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":4953}]}},\"isAssociative\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeAssociative</span></code> is either a Keyed or Indexed Collection.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> isAssociative<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Set</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nisAssociative<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isAssociative<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isAssociative<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isAssociative<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isAssociative<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isAssociative<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeAssociative\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":4969}]}},\"isOrdered\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeOrdered</span></code> is a Collection where iteration order is well\\ndefined. True for Collection.Indexed as well as OrderedMap and OrderedSet.</p>\\n\",\"description\":\"<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> isOrdered<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token qualifier\\\" >Set</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nisOrdered<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isOrdered<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isOrdered<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>isOrdered<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isOrdered<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>isOrdered<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeOrdered\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":4986}]}},\"isValueObject\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeValue</span></code> is a JavaScript Object which has <em>both</em> <code>equals<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>\\nand <code>hashCode<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> methods.</p>\\n\",\"description\":\"<p>Any two instances of <em>value objects</em> can be compared for value equality with\\n<code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> and can be used as keys in a <code><span class=\\\"token qualifier\\\" >Map</span></code> or members in a <code><span class=\\\"token qualifier\\\" >Set</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeValue\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":4995}]}},\"isSeq\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeSeq</span></code> is a Seq.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeSeq\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":5001}]}},\"isList\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeList</span></code> is a List.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeList\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":5006}]}},\"isMap\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeMap</span></code> is a Map.</p>\\n\",\"description\":\"<p>Also true for OrderedMaps.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeMap\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":5013}]}},\"isOrderedMap\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeOrderedMap</span></code> is an OrderedMap.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeOrderedMap\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":5018}]}},\"isStack\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeStack</span></code> is a Stack.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeStack\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":5023}]}},\"isSet\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeSet</span></code> is a Set.</p>\\n\",\"description\":\"<p>Also true for OrderedSets.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeSet\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":5030}]}},\"isOrderedSet\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeOrderedSet</span></code> is an OrderedSet.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeOrderedSet\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":5035}]}},\"isRecord\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeRecord</span></code> is a Record.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeRecord\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":5040}]}},\"get\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns the value within the provided collection associated with the\\nprovided key, or notSetValue if the key is not defined in the collection.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >)</span></code> which will also work on\\nplain Objects and Arrays as an alternative for <code>collection<span class=\\\"token punctuation\\\" >[</span>key<span class=\\\"token punctuation\\\" >]</span></code>.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token keyword\\\" >get</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 'frog'\\n</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 123\\n</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'z'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'ifNotSet'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 'ifNotSet'</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":5059},{\"typeParams\":[\"K\",\"V\",\"NSV\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"NSV\"}]},\"line\":5060},{\"typeParams\":[\"TProps\",\"K\"],\"params\":[{\"name\":\"record\",\"type\":{\"k\":9,\"name\":\"Record\",\"args\":[{\"k\":8,\"param\":\"TProps\"}]}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":0}}],\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}},\"line\":5061},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"key\",\"type\":{\"k\":2}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":5062},{\"typeParams\":[\"V\",\"NSV\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"NSV\"}]},\"line\":5063},{\"typeParams\":[\"C\",\"K\"],\"params\":[{\"name\":\"object\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":0}}],\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"C\"},\"index\":{\"k\":8,\"param\":\"K\"}},\"line\":5064},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}},{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":11}]},\"line\":5065},{\"typeParams\":[\"V\",\"NSV\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}},{\"name\":\"key\",\"type\":{\"k\":3}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}}],\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"NSV\"}]},\"line\":5066}]}},\"has\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns true if the key is defined in the provided collection.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>has<span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >)</span></code> which will also work with\\nplain Objects and Arrays as an alternative for\\n<code>collection<span class=\\\"token punctuation\\\" >.</span>hasOwnProperty<span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> has <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\nhas<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>has<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span> <span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false\\n</span>has<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>has<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'z'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Object\"}},{\"name\":\"key\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":5084}]}},\"remove\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the value at key removed.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>remove<span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >)</span></code> which will also work\\nwith plain Objects and Arrays as an alternative for\\n<code><span class=\\\"token keyword\\\" >delete</span> collectionCopy<span class=\\\"token punctuation\\\" >[</span>key<span class=\\\"token punctuation\\\" >]</span></code>.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> remove <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> originalArray <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span> <span class=\\\"token punctuation\\\" >]</span>\\nremove<span class=\\\"token punctuation\\\" >(</span>originalArray<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 'dog', 'cat' ]\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>originalArray<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 'dog', 'frog', 'cat' ]\\n</span><span class=\\\"token keyword\\\" >const</span> originalObject <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span>\\nremove<span class=\\\"token punctuation\\\" >(</span>originalObject<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { y: 456 }\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>originalObject<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 123, y: 456 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5104},{\"typeParams\":[\"TProps\",\"C\",\"K\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5105},{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":2}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5106},{\"typeParams\":[\"C\",\"K\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5107},{\"typeParams\":[\"C\",\"K\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5108}]}},\"set\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the value at key set to the provided\\nvalue.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >,</span> value<span class=\\\"token punctuation\\\" >)</span></code> which will also\\nwork with plain Objects and Arrays as an alternative for\\n<code>collectionCopy<span class=\\\"token punctuation\\\" >[</span>key<span class=\\\"token punctuation\\\" >]</span> <span class=\\\"token operator\\\" >=</span> value</code>.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> <span class=\\\"token keyword\\\" >set</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> originalArray <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span> <span class=\\\"token punctuation\\\" >]</span>\\n<span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span>originalArray<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cow'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 'dog', 'cow', 'cat' ]\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>originalArray<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 'dog', 'frog', 'cat' ]\\n</span><span class=\\\"token keyword\\\" >const</span> originalObject <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span>originalObject<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >789</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 789, y: 456 }\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>originalObject<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 123, y: 456 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\",\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5129},{\"typeParams\":[\"TProps\",\"C\",\"K\"],\"params\":[{\"name\":\"record\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5130},{\"typeParams\":[\"V\",\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5131},{\"typeParams\":[\"C\",\"K\"],\"params\":[{\"name\":\"object\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"C\"},\"index\":{\"k\":8,\"param\":\"K\"}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5132},{\"typeParams\":[\"V\",\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":3}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5133}]}},\"update\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the value at key set to the result of\\nproviding the existing value to the updating function.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >,</span> fn<span class=\\\"token punctuation\\\" >)</span></code> which will also\\nwork with plain Objects and Arrays as an alternative for\\n<code>collectionCopy<span class=\\\"token punctuation\\\" >[</span>key<span class=\\\"token punctuation\\\" >]</span> <span class=\\\"token operator\\\" >=</span> fn<span class=\\\"token punctuation\\\" >(</span>collection<span class=\\\"token punctuation\\\" >[</span>key<span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> update <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> originalArray <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >[</span> <span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'cat'</span> <span class=\\\"token punctuation\\\" >]</span>\\nupdate<span class=\\\"token punctuation\\\" >(</span>originalArray<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> val <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val<span class=\\\"token punctuation\\\" >.</span>toUpperCase<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 'dog', 'FROG', 'cat' ]\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>originalArray<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [ 'dog', 'frog', 'cat' ]\\n</span><span class=\\\"token keyword\\\" >const</span> originalObject <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span>\\nupdate<span class=\\\"token punctuation\\\" >(</span>originalObject<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> val <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val <span class=\\\"token operator\\\" >*</span> <span class=\\\"token number\\\" >6</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 738, y: 456 }\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>originalObject<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 123, y: 456 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\",\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5154},{\"typeParams\":[\"K\",\"V\",\"C\",\"NSV\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"NSV\"}]}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5155},{\"typeParams\":[\"TProps\",\"C\",\"K\"],\"params\":[{\"name\":\"record\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}}}],\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5156},{\"typeParams\":[\"TProps\",\"C\",\"K\",\"NSV\"],\"params\":[{\"name\":\"record\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":13,\"types\":[{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}},{\"k\":8,\"param\":\"NSV\"}]}}],\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"TProps\"},\"index\":{\"k\":8,\"param\":\"K\"}}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5157},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":5158},{\"typeParams\":[\"V\",\"NSV\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]}},{\"name\":\"key\",\"type\":{\"k\":2}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"NSV\"}]}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":5159},{\"typeParams\":[\"C\",\"K\"],\"params\":[{\"name\":\"object\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"C\"},\"index\":{\"k\":8,\"param\":\"K\"}}}],\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"C\"},\"index\":{\"k\":8,\"param\":\"K\"}}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5160},{\"typeParams\":[\"C\",\"K\",\"NSV\"],\"params\":[{\"name\":\"object\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":13,\"types\":[{\"k\":16,\"type\":{\"k\":8,\"param\":\"C\"},\"index\":{\"k\":8,\"param\":\"K\"}},{\"k\":8,\"param\":\"NSV\"}]}}],\"type\":{\"k\":16,\"type\":{\"k\":8,\"param\":\"C\"},\"index\":{\"k\":8,\"param\":\"K\"}}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5161},{\"typeParams\":[\"V\",\"C\",\"K\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]},\"line\":5162},{\"typeParams\":[\"V\",\"C\",\"K\",\"NSV\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"NSV\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":13,\"types\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"NSV\"}]}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]},\"line\":5163}]}},\"getIn\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns the value at the provided key path starting at the provided\\ncollection, or notSetValue if the key path is not defined.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>getIn<span class=\\\"token punctuation\\\" >(</span>keypath<span class=\\\"token punctuation\\\" >)</span></code> which will also\\nwork with plain Objects and Arrays.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> getIn <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\ngetIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'y'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'z'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 123\\n</span>getIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'q'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'p'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'ifNotSet'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 'ifNotSet'</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"collection\",\"type\":{\"k\":0}},{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"notSetValue\",\"type\":{\"k\":0}}],\"type\":{\"k\":0},\"line\":5179}]}},\"hasIn\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns true if the key path is defined in the provided collection.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>hasIn<span class=\\\"token punctuation\\\" >(</span>keypath<span class=\\\"token punctuation\\\" >)</span></code> which will also\\nwork with plain Objects and Arrays.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> hasIn <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\nhasIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'y'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'z'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true\\n</span>hasIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'q'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'p'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"collection\",\"type\":{\"k\":0}},{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":1},\"line\":5194}]}},\"removeIn\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the value at the key path removed.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>removeIn<span class=\\\"token punctuation\\\" >(</span>keypath<span class=\\\"token punctuation\\\" >)</span></code> which will also\\nwork with plain Objects and Arrays.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> removeIn <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> original <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span>\\nremoveIn<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'y'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'z'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: {}}}\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: { z: 123 }}}</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5210}]}},\"setIn\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the value at the key path set to the\\nprovided value.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>setIn<span class=\\\"token punctuation\\\" >(</span>keypath<span class=\\\"token punctuation\\\" >)</span></code> which will also\\nwork with plain Objects and Arrays.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> setIn <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> original <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span>\\nsetIn<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'y'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'z'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >456</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: { z: 456 }}}\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: { z: 123 }}}</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5227}]}},\"updateIn\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the value at key path set to the\\nresult of providing the existing value to the updating function.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>updateIn<span class=\\\"token punctuation\\\" >(</span>keypath<span class=\\\"token punctuation\\\" >)</span></code> which will also\\nwork with plain Objects and Arrays.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> updateIn <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> original <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span>\\nupdateIn<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'y'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'z'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> val <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> val <span class=\\\"token operator\\\" >*</span> <span class=\\\"token number\\\" >6</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: { z: 738 }}}\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: { z: 123 }}}</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5244},{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]}},{\"name\":\"notSetValue\",\"type\":{\"k\":0}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5245}]}},\"merge\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the remaining collections merged in.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>merge<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> which will also work with\\nplain Objects and Arrays.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> merge <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> original <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span>\\nmerge<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >789</span><span class=\\\"token punctuation\\\" >,</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'abc'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 123, y: 789, z: 'abc' }\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 123, y: 456 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":0},{\"k\":0}]}]},{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}]}]},\"varArgs\":true}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5261}]}},\"mergeWith\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the remaining collections merged in,\\ncalling the <code><span class=\\\"t param\\\">merger</span></code> function whenever an existing value is encountered.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>mergeWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> which will also work\\nwith plain Objects and Arrays.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> mergeWith <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> original <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span>\\nmergeWith<span class=\\\"token punctuation\\\" >(</span>\\n  <span class=\\\"token punctuation\\\" >(</span>oldVal<span class=\\\"token punctuation\\\" >,</span> newVal<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> oldVal <span class=\\\"token operator\\\" >+</span> newVal<span class=\\\"token punctuation\\\" >,</span>\\n  original<span class=\\\"token punctuation\\\" >,</span>\\n  <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >789</span><span class=\\\"token punctuation\\\" >,</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'abc'</span> <span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 123, y: 1245, z: 'abc' }\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: 123, y: 456 }</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"oldVal\",\"type\":{\"k\":0}},{\"name\":\"newVal\",\"type\":{\"k\":0}},{\"name\":\"key\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}},{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":0},{\"k\":0}]}]},{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}]}]},\"varArgs\":true}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5285}]}},\"mergeDeep\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the remaining collections merged in\\ndeeply (recursively).</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>mergeDeep<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> which will also work\\nwith plain Objects and Arrays.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> mergeDeep <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> original <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span>\\nmergeDeep<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: 123, z: 456 }}\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: 123 }}</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":0},{\"k\":0}]}]},{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}]}]},\"varArgs\":true}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5306}]}},\"mergeDeepWith\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a copy of the collection with the remaining collections merged in\\ndeeply (recursively), calling the <code><span class=\\\"t param\\\">merger</span></code> function whenever an existing\\nvalue is encountered.</p>\\n\",\"description\":\"<p>A functional alternative to <code>collection<span class=\\\"token punctuation\\\" >.</span>mergeDeepWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> which will also\\nwork with plain Objects and Arrays.</p>\\n<!-- runkit:activate -->\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >const</span> <span class=\\\"token punctuation\\\" >{</span> mergeDeepWith <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token operator\\\" >=</span> require<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'immutable'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >const</span> original <span class=\\\"token operator\\\" >=</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >123</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span>\\nmergeDeepWith<span class=\\\"token punctuation\\\" >(</span>\\n  <span class=\\\"token punctuation\\\" >(</span>oldVal<span class=\\\"token punctuation\\\" >,</span> newVal<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> oldVal <span class=\\\"token operator\\\" >+</span> newVal<span class=\\\"token punctuation\\\" >,</span>\\n  original<span class=\\\"token punctuation\\\" >,</span>\\n  <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >456</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: 579 }}\\n</span>console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>original<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { x: { y: 123 }}</span><a class=\\\"try-it\\\" data-options=\\\"%7B%7D\\\" onClick=\\\"runIt(this)\\\">run it</a></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"oldVal\",\"type\":{\"k\":0}},{\"name\":\"newVal\",\"type\":{\"k\":0}},{\"name\":\"key\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}},{\"name\":\"collection\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"collections\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":13,\"types\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0}]},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":15,\"types\":[{\"k\":0},{\"k\":0}]}]},{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}]}]},\"varArgs\":true}],\"type\":{\"k\":8,\"param\":\"C\"},\"line\":5331}]}}},\"version\":\"4.0.0-rc.12\",\"isLatestVersion\":true},\"immutable\":{\"module\":{}}}");