window.data = JSON.parse("{\"Immutable\":{\"doc\":{\"synopsis\":\"<h1 id=\\\"immutable-data\\\">Immutable Data</h1>\\n\",\"description\":\"<p>Immutable data encourages pure functions (data-in, data-out) and lends itself\\nto much simpler application development and enabling techniques from\\nfunctional programming such as lazy evaluation.</p>\\n<p>While designed to bring these powerful functional concepts to JavaScript, it\\npresents an Object-Oriented API familiar to Javascript engineers and closely\\nmirroring that of Array, Map, and Set. It is easy and efficient to convert to\\nand from plain Javascript types.</p>\\n\",\"notes\":[]},\"module\":{\"is\":{\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> has the same semantics as Object.is(), but treats\\nImmutable collections and sequences as values, equal if the second\\nImmutable iterable contains equivalent values. It&#39;s used throughout when\\nchecking for equality.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> map1 <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >var</span> map2 <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >(</span>map1 <span class=\\\"token operator\\\" >!</span><span class=\\\"token operator\\\" >==</span> map2<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Object</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span>map1<span class=\\\"token punctuation\\\" >,</span> map2<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token primitive\\\" >false</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span>map1<span class=\\\"token punctuation\\\" >,</span> map2<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"first\",\"type\":{\"k\":0}},{\"name\":\"second\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":38}]}},\"fromJS\":{\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>fromJS<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> deeply converts plain JS objects and arrays to\\nImmutable Maps and Lists.</p>\\n\",\"description\":\"<p>If a <code><span class=\\\"t param\\\">reviver</span></code> is optionally provided, it will be called with every\\ncollection as a Seq (beginning with the most nested collections\\nand proceeding to the top-level collection itself), along with the key\\nrefering to each collection and the parent JS object provided as <code><span class=\\\"token var\\\" >this</span></code>.\\nFor the top level, object, the key will be &quot;&quot;. This <code><span class=\\\"t param\\\">reviver</span></code> is expected\\nto return a new Immutable Iterable, allowing for custom convertions from\\ndeep JS objects.</p>\\n<p>This example converts JSON to List and OrderedMap:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>fromJS<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span>b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >[</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >40</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token block-keyword\\\" >function</span> <span class=\\\"token punctuation\\\" >(</span>value<span class=\\\"token punctuation\\\" >,</span> key<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n  <span class=\\\"token keyword\\\" >var</span> isIndexed <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Iterable</span><span class=\\\"token punctuation\\\" >.</span>isIndexed<span class=\\\"token punctuation\\\" >(</span>value<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n  <span class=\\\"token keyword\\\" >return</span> isIndexed <span class=\\\"token operator\\\" >?</span> value<span class=\\\"token punctuation\\\" >.</span>toList<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >:</span> value<span class=\\\"token punctuation\\\" >.</span>toOrderedMap<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true, \\\"b\\\", {b: [10, 20, 30]}\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false, \\\"a\\\", {a: {b: [10, 20, 30]}, c: 40}\\n</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false, \\\"\\\", {\\\"\\\": {a: {b: [10, 20, 30]}, c: 40}}</span></code><p>If <code><span class=\\\"t param\\\">reviver</span></code> is not provided, the default behavior will convert Arrays into\\nLists and Objects into Maps.</p>\\n<p><code><span class=\\\"t param\\\">reviver</span></code> acts similarly to <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\\\"><code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\\\">JSON.parse</a></code></a>.</p>\\n<p><code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>fromJS</code> is conservative in it&#39;s conversion. It will only convert\\narrays which pass <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\\\">Array.isArray</a></code> to Lists, and only raw objects (no custom\\nprototype) to Map.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"json\",\"type\":{\"k\":0}},{\"name\":\"reviver\",\"type\":{\"k\":7,\"params\":[{\"name\":\"k\",\"type\":{\"k\":0}},{\"name\":\"v\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":0}]}}],\"type\":{\"k\":0}},\"optional\":true}],\"type\":{\"k\":0},\"line\":72}]}},\"Iterable\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"iterable\\\">Iterable</h2>\\n\",\"description\":\"<p>The <code><span class=\\\"token qualifier\\\" >Iterable</span></code> is a set of (key, value) entries which can be iterated, and\\nis the base class for all collections in <code>immutable</code>, allowing them to\\nmake use of all the Iterable methods (such as <code>map</code> and <code>filter</code>).</p>\\n<p>Note: An iterable is always iterated in the same order, however that order\\nmay not always be well defined, as is the case for the <code><span class=\\\"token qualifier\\\" >Map</span></code> and <code><span class=\\\"token qualifier\\\" >Set</span></code>.</p>\\n\",\"notes\":[]},\"module\":{\"isIterable\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeIterable</span></code> is an Iterable, or any of its subclasses.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeIterable\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":94}]}},\"isKeyed\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeKeyed</span></code> is a KeyedIterable, or any of its subclasses.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeKeyed\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":99}]}},\"isIndexed\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeIndexed</span></code> is a IndexedIterable, or any of its subclasses.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeIndexed\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":104}]}},\"isAssociative\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeAssociative</span></code> is either a keyed or indexed Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeAssociative\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":109}]}},\"isOrdered\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeOrdered</span></code> is an Iterable where iteration order is well\\ndefined. True for IndexedIterable as well as OrderedMap and OrderedSet.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeOrdered\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":115}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Iterable</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> returns a particular kind of Iterable based\\non the input.</p>\\n\",\"description\":\"<ul>\\n<li>If an <code><span class=\\\"token qualifier\\\" >Iterable</span></code>, that same <code><span class=\\\"token qualifier\\\" >Iterable</span></code>.</li>\\n<li>If an Array-like, an <code><span class=\\\"token qualifier\\\" >Indexed</span><span class=\\\"token qualifier\\\" >Iterable</span></code>.</li>\\n<li>If an Object with an Iterator, an <code><span class=\\\"token qualifier\\\" >Indexed</span><span class=\\\"token qualifier\\\" >Iterable</span></code>.</li>\\n<li>If an Iterator, an <code><span class=\\\"token qualifier\\\" >Indexed</span><span class=\\\"token qualifier\\\" >Iterable</span></code>.</li>\\n<li>If an Object, a <code><span class=\\\"token qualifier\\\" >Keyed</span><span class=\\\"token qualifier\\\" >Iterable</span></code>.</li>\\n</ul>\\n<p>This methods forces the conversion of Objects and Strings to Iterables.\\nIf you want to ensure that a Iterable of one item is returned, use\\n<code><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":132},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":133},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":134},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":135},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":136},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":137}]},\"interface\":{\"line\":140,\"typeParams\":[\"K\",\"V\"],\"groups\":[{\"title\":\"### Conversion to other types\",\"members\":{\"#toArray\":{\"doc\":{\"synopsis\":\"<p>Converts this iterable to an Array, discarding keys.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":147}]},\"#toIndexedSeq\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq of the values of this Iterable, discarding keys.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":152}]},\"#toJS\":{\"doc\":{\"synopsis\":\"<p>Deeply converts this Iterable to equivalent JS.</p>\\n\",\"description\":\"<p>IndexedIterables, and SetIterables become Arrays, while\\nKeyedIterables become Objects.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":0},\"line\":160}]},\"#toKeyedSeq\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable into an identical Seq where indices are\\ntreated as keys. This is useful if you want to operate on an\\nIndexedIterable and preserve the [index, value] pairs.</p>\\n\",\"description\":\"<p>The returned Seq will have identical iteration order as\\nthis Iterable.</p>\\n<p>Example:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> indexedSeq <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'A'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'B'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'C'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nindexedSeq<span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>v <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> v <span class=\\\"token operator\\\" >===</span> <span class=\\\"token string\\\" >'B'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>toString<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ 'B' ]\\n</span><span class=\\\"token keyword\\\" >var</span> keyedSeq <span class=\\\"token operator\\\" >=</span> indexedSeq<span class=\\\"token punctuation\\\" >.</span>toKeyedSeq<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nkeyedSeq<span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>v <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> v <span class=\\\"token operator\\\" >===</span> <span class=\\\"token string\\\" >'B'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>toString<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { 1: 'B' }</span></code>\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":178}]},\"#toMap\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable to a Map, Throws if keys are not hashable.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>toKeyedSeq<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span></code>, but provided\\nfor convenience and to allow for chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":186}]},\"#toObject\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable to an Object. Throws if keys are not strings.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]},\"line\":191}]},\"#toOrderedMap\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable to a Map, maintaining the order of iteration.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>toKeyedSeq<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span></code>, but\\nprovided for convenience and to allow for chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":199}]},\"#toOrderedSet\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable to a Set, maintaining the order of iteration and\\ndiscarding keys.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>valueSeq<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span></code>, but provided\\nfor convenience and to allow for chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":208}]},\"#toSet\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable to a Set, discarding keys. Throws if values\\nare not hashable.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >)</span></code>, but provided to allow for\\nchained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":217}]},\"#toSetSeq\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable to a Seq of the values of this Iterable,\\ndiscarding keys, and behaving as a set.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":223}]},\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable to a Seq of the same kind (indexed,\\nkeyed, or set).</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":229}]},\"#toStack\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable to a Stack, discarding keys. Throws if values\\nare not hashable.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >)</span></code>, but provided to allow for\\nchained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":238}]},\"#toList\":{\"doc\":{\"synopsis\":\"<p>Converts this Iterable to a List, discarding keys.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >List</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >)</span></code>, but provided to allow\\nfor chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":246}]}}},{\"title\":\"### ES6 Collection methods (ES6 Array and Map)\",\"members\":{\"#concat\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type with other values and\\niterable-like concatenated to this one.</p>\\n\",\"description\":\"<p>For Seqs, all entries will be present in\\nthe resulting iterable, even if they have the same key.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"valuesOrIterables\",\"type\":{\"k\":5,\"type\":{\"k\":0}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":266}]},\"#contains\":{\"doc\":{\"synopsis\":\"<p>True if a value exists within this Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":1},\"line\":271}]},\"#entries\":{\"doc\":{\"synopsis\":\"<p>An iterator of this Map&#39;s entries as [key, value] tuples.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}]},\"line\":276}]},\"#every\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">predicate</span></code> returns true for all entries in the Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":1},\"line\":281}]},\"#filter\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type with only the entries for which\\nthe <code><span class=\\\"t param\\\">predicate</span></code> function returns true.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span>b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span>c<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span>d<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { b: 2, d: 4 }</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":294}]},\"#find\":{\"doc\":{\"synopsis\":\"<p>Returns the value for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"},\"line\":302}]},\"#forEach\":{\"doc\":{\"synopsis\":\"<p>The <code><span class=\\\"t param\\\">sideEffect</span></code> is executed for every entry in the Iterable.</p>\\n\",\"description\":\"<p>Unlike <code><span class=\\\"token qualifier\\\" >Array</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>forEach</code>, if any call of <code><span class=\\\"t param\\\">sideEffect</span></code> returns\\n<code><span class=\\\"token primitive\\\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\\n(including the last iteration which returned false).</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"sideEffect\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":2},\"line\":315}]},\"#join\":{\"doc\":{\"synopsis\":\"<p>Joins values together as a string, inserting a separator between each.\\nThe default separator is &quot;,&quot;.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"separator\",\"type\":{\"k\":3},\"optional\":true}],\"type\":{\"k\":3},\"line\":324}]},\"#keys\":{\"doc\":{\"synopsis\":\"<p>An iterator of this Iterable&#39;s keys.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"K\"}]},\"line\":329}]},\"#map\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type with values passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { a: 10, b: 20 }</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"M\"}]},\"line\":339}]},\"#reduce\":{\"doc\":{\"synopsis\":\"<p>Reduces the Iterable to a value by calling the <code><span class=\\\"t param\\\">reducer</span></code> for every entry\\nin the Iterable and passing along the reduced value.</p>\\n\",\"description\":\"<p>If <code><span class=\\\"t param\\\">initialReduction</span></code> is not provided, or is null, the first item in the\\nIterable will be used.</p>\\n\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Array</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>reduce</code>.</p>\\n\"}]},\"signatures\":[{\"typeParams\":[\"R\"],\"params\":[{\"name\":\"reducer\",\"type\":{\"k\":7,\"params\":[{\"name\":\"reduction\",\"type\":{\"k\":8,\"param\":\"R\"},\"optional\":true},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"R\"}}},{\"name\":\"initialReduction\",\"type\":{\"k\":8,\"param\":\"R\"},\"optional\":true},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"R\"},\"line\":353}]},\"#reduceRight\":{\"doc\":{\"synopsis\":\"<p>Reduces the Iterable in reverse (from the right side).</p>\\n\",\"description\":\"<p>Note: Similar to this.reverse().reduce(), and provided for parity\\nwith <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\\\">Array#reduceRight</a></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"R\"],\"params\":[{\"name\":\"reducer\",\"type\":{\"k\":7,\"params\":[{\"name\":\"reduction\",\"type\":{\"k\":8,\"param\":\"R\"},\"optional\":true},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"R\"}}},{\"name\":\"initialReduction\",\"type\":{\"k\":8,\"param\":\"R\"},\"optional\":true},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"R\"},\"line\":365}]},\"#reverse\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type in reverse order.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":374}]},\"#slice\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type representing a portion of this\\nIterable from start up to but not including end.</p>\\n\",\"description\":\"<p>If begin is negative, it is offset from the end of the Iterable. e.g.\\n<code>slice<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span></code> returns a Iterable of the last two entries. If it is not\\nprovided the new Iterable will begin at the beginning of this Iterable.</p>\\n<p>If end is negative, it is offset from the end of the Iterable. e.g.\\n<code>slice<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code> returns an Iterable of everything but the last entry. If\\nit is not provided, the new Iterable will continue through the end of\\nthis Iterable.</p>\\n<p>If the requested slice is equivalent to the current Iterable, then it\\nwill return itself.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"begin\",\"type\":{\"k\":2},\"optional\":true},{\"name\":\"end\",\"type\":{\"k\":2},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":392}]},\"#some\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">predicate</span></code> returns true for any entry in the Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":1},\"line\":397}]},\"#sort\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type which contains the same entries,\\nstably sorted by using a <code><span class=\\\"t param\\\">comparator</span></code>.</p>\\n\",\"description\":\"<p>If a <code><span class=\\\"t param\\\">comparator</span></code> is not provided, a default comparator uses <code><span class=\\\"token operator\\\" >&lt;</span></code> and <code><span class=\\\"token operator\\\" >></span></code>.</p>\\n<p><code>comparator<span class=\\\"token punctuation\\\" >(</span>valueA<span class=\\\"token punctuation\\\" >,</span> valueB<span class=\\\"token punctuation\\\" >)</span></code>:</p>\\n<ul>\\n<li>Returns <code><span class=\\\"token number\\\" >0</span></code> if the elements should not be swapped.</li>\\n<li>Returns <code><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\\n<li>Returns <code><span class=\\\"token number\\\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\\n<li>Is pure, i.e. it must always return the same value for the same pair\\nof values.</li>\\n</ul>\\n<p>When sorting collections which have no defined order, their ordered\\nequivalents will be returned. e.g. <code>map<span class=\\\"token punctuation\\\" >.</span>sort<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> returns OrderedMap.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":419}]},\"#values\":{\"doc\":{\"synopsis\":\"<p>An iterator of this Map&#39;s values.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":424}]}}},{\"title\":\"### More collection methods\",\"members\":{\"#butLast\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type containing all entries except\\nthe last.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":433}]},\"#count\":{\"doc\":{\"synopsis\":\"<p>Regardless of if this Iterable can describe its size (some Seqs\\ncannot), this method will always return the correct size. E.g. it\\nevaluates a Seq if necessary.</p>\\n\",\"description\":\"<p>If <code><span class=\\\"t param\\\">predicate</span></code> is provided, then this returns the count of entries in the\\nIterable for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":2},\"line\":443},{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":2},\"line\":444}]},\"#countBy\":{\"doc\":{\"synopsis\":\"<p>Returns a <code><span class=\\\"token qualifier\\\" >Keyed</span><span class=\\\"token qualifier\\\" >Seq</span></code> of counts, grouped by the return value of\\nthe <code><span class=\\\"t param\\\">grouper</span></code> function.</p>\\n\",\"description\":\"<p>Note: This is not a lazy operation.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"G\"],\"params\":[{\"name\":\"grouper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"G\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"G\"},{\"k\":2}]},\"line\":455}]},\"#equals\":{\"doc\":{\"synopsis\":\"<p>True if this and the other Iterable have value equality, as defined\\nby <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"description\":\"<p>Note: This is equivalent to <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>is<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >,</span> other<span class=\\\"token punctuation\\\" >)</span></code>, but provided to\\nallow for chained expressions.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"other\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":1},\"line\":467}]},\"#entrySeq\":{\"doc\":{\"synopsis\":\"<p>Returns a new IndexedSeq of [key, value] tuples.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}]},\"line\":472}]},\"#filterNot\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type with only the entries for which\\nthe <code><span class=\\\"t param\\\">predicate</span></code> function returns false.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span>b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span>c<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span>d<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>filterNot<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { a: 1, c: 3 }</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":482}]},\"#findLast\":{\"doc\":{\"synopsis\":\"<p>Returns the last value for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"t param\\\">predicate</span></code> will be called for each entry in reverse.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"},\"line\":492}]},\"#first\":{\"doc\":{\"synopsis\":\"<p>The first value in the Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":8,\"param\":\"V\"},\"line\":501}]},\"#flatMap\":{\"doc\":{\"synopsis\":\"<p>Flat-maps the Iterable, returning an Iterable of the same type.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"MK\",\"MV\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"MK\"},{\"k\":8,\"param\":\"MV\"}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"MK\"},{\"k\":8,\"param\":\"MV\"}]},\"line\":506},{\"typeParams\":[\"MK\",\"MV\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":0}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"MK\"},{\"k\":8,\"param\":\"MV\"}]},\"line\":510}]},\"#flatten\":{\"doc\":{\"synopsis\":\"<p>Flattens nested Iterables.</p>\\n\",\"description\":\"<p>Will deeply flatten the Iterable by default, returning an Iterable of the\\nsame type, but a <code><span class=\\\"t param\\\">depth</span></code> can be provided in the form of a number or\\nboolean (where true means to shallowly flatten one level). A depth of 0\\n(or shallow: false) will deeply flatten.</p>\\n<p>Flattens only others Iterable, not Arrays or Objects.</p>\\n<p>Note: <code>flatten<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token primitive\\\" >true</span><span class=\\\"token punctuation\\\" >)</span></code> operates on Iterable&lt;any, Iterable&lt;K, V&gt;&gt; and\\nreturns Iterable&lt;K, V&gt;</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"depth\",\"type\":{\"k\":2},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":528},{\"params\":[{\"name\":\"shallow\",\"type\":{\"k\":1},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":529}]},\"#get\":{\"doc\":{\"synopsis\":\"<p>Returns the value associated with the provided key, or notSetValue if\\nthe Iterable does not contain this key.</p>\\n\",\"description\":\"<p>Note: it is possible a key may be associated with an <code><span class=\\\"token primitive\\\" >undefined</span></code> value, so\\nif <code><span class=\\\"t param\\\">notSetValue</span></code> is not provided and this method returns <code><span class=\\\"token primitive\\\" >undefined</span></code>,\\nthat does not guarantee the key was not found.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"},\"line\":539}]},\"#getIn\":{\"doc\":{\"synopsis\":\"<p>Returns the value found by following a key path through nested Iterables.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchKeyPath\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}},{\"name\":\"notSetValue\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":0},\"line\":544}]},\"#groupBy\":{\"doc\":{\"synopsis\":\"<p>Returns a <code><span class=\\\"token qualifier\\\" >Keyed</span><span class=\\\"token qualifier\\\" >Iterable</span></code> of <code><span class=\\\"token qualifier\\\" >Keyed</span><span class=\\\"token qualifier\\\" >Iterables</span></code>, grouped by the return\\nvalue of the <code><span class=\\\"t param\\\">grouper</span></code> function.</p>\\n\",\"description\":\"<p>Note: This is not a lazy operation.</p>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"G\"],\"params\":[{\"name\":\"grouper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"G\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"G\"},{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}]},\"line\":552}]},\"#has\":{\"doc\":{\"synopsis\":\"<p>True if a key exists within this Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":1},\"line\":560}]},\"#isSubset\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">iter</span></code> contains every value in this Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":1},\"line\":565},{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":1},\"line\":566}]},\"#isSuperset\":{\"doc\":{\"synopsis\":\"<p>True if this Iterable contains every value in <code><span class=\\\"t param\\\">iter</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":1},\"line\":571},{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":1},\"line\":572}]},\"#keySeq\":{\"doc\":{\"synopsis\":\"<p>Returns a new IndexedSeq of the keys of this Iterable,\\ndiscarding values.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"}]},\"line\":578}]},\"#last\":{\"doc\":{\"synopsis\":\"<p>The last value in the Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":8,\"param\":\"V\"},\"line\":583}]},\"#max\":{\"doc\":{\"synopsis\":\"<p>Returns the maximum value in this collection. If any values are\\ncomparatively equivalent, the first one found will be returned.</p>\\n\",\"description\":\"<p>The <code><span class=\\\"t param\\\">comparator</span></code> is used in the same way as <code><span class=\\\"token qualifier\\\" >Iterable</span>#sort</code>. If it is not\\nprovided, the default comparator is <code>a <span class=\\\"token operator\\\" >></span> b</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"},\"line\":592}]},\"#maxBy\":{\"doc\":{\"synopsis\":\"<p>Like <code>max</code>, but also accepts a <code><span class=\\\"t param\\\">comparatorValueMapper</span></code> which allows for\\ncomparing by more sophisticated means:</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\">hitters<span class=\\\"token punctuation\\\" >.</span>maxBy<span class=\\\"token punctuation\\\" >(</span>hitter <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> hitter<span class=\\\"token punctuation\\\" >.</span>avgHits<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"comparatorValueMapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"C\"}}},{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"C\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"},\"line\":601}]},\"#min\":{\"doc\":{\"synopsis\":\"<p>Returns the maximum value in this collection. If any values are\\ncomparatively equivalent, the first one found will be returned.</p>\\n\",\"description\":\"<p>The <code><span class=\\\"t param\\\">comparator</span></code> is used in the same way as <code><span class=\\\"token qualifier\\\" >Iterable</span>#sort</code>. If it is not\\nprovided, the default comparator is <code>a <span class=\\\"token operator\\\" >></span> b</code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"},\"line\":613}]},\"#minBy\":{\"doc\":{\"synopsis\":\"<p>Like <code>min</code>, but also accepts a <code><span class=\\\"t param\\\">comparatorValueMapper</span></code> which allows for\\ncomparing by more sophisticated means:</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\">hitters<span class=\\\"token punctuation\\\" >.</span>minBy<span class=\\\"token punctuation\\\" >(</span>hitter <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> hitter<span class=\\\"token punctuation\\\" >.</span>avgHits<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"comparatorValueMapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"C\"}}},{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"C\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"},\"line\":622}]},\"#rest\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type containing all entries except\\nthe first.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":631}]},\"#skip\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type which excludes the first <code><span class=\\\"t param\\\">amount</span></code>\\nentries from this Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"amount\",\"type\":{\"k\":2}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":637}]},\"#skipLast\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type which excludes the last <code><span class=\\\"t param\\\">amount</span></code>\\nentries from this Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"amount\",\"type\":{\"k\":2}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":643}]},\"#skipWhile\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type which contains entries starting\\nfrom when <code><span class=\\\"t param\\\">predicate</span></code> first returns false.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'cat'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'hat'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'god'</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>skipWhile<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>match<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token regex\\\" >/g/</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ 'cat', 'hat', 'god' ]</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":654}]},\"#skipUntil\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type which contains entries starting\\nfrom when <code><span class=\\\"t param\\\">predicate</span></code> first returns true.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'cat'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'hat'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'god'</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>skipUntil<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>match<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token regex\\\" >/hat/</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ 'hat', 'god' ]</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":668}]},\"#sortBy\":{\"doc\":{\"synopsis\":\"<p>Like <code>sort</code>, but also accepts a <code><span class=\\\"t param\\\">comparatorValueMapper</span></code> which allows for\\nsorting by more sophisticated means:</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\">hitters<span class=\\\"token punctuation\\\" >.</span>sortBy<span class=\\\"token punctuation\\\" >(</span>hitter <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> hitter<span class=\\\"token punctuation\\\" >.</span>avgHits<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"C\"],\"params\":[{\"name\":\"comparatorValueMapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"C\"}}},{\"name\":\"comparator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"valueA\",\"type\":{\"k\":8,\"param\":\"C\"}},{\"name\":\"valueB\",\"type\":{\"k\":8,\"param\":\"C\"}}],\"type\":{\"k\":2}},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":680}]},\"#take\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type which contains the first <code><span class=\\\"t param\\\">amount</span></code>\\nentries from this Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"amount\",\"type\":{\"k\":2}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":689}]},\"#takeLast\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type which contains the last <code><span class=\\\"t param\\\">amount</span></code>\\nentries from this Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"amount\",\"type\":{\"k\":2}}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":695}]},\"#takeWhile\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type which contains entries from this\\nIterable as long as the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'cat'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'hat'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'god'</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>takeWhile<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>match<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token regex\\\" >/o/</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq [ 'dog', 'frog' ]</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":706}]},\"#takeUntil\":{\"doc\":{\"synopsis\":\"<p>Returns a new Iterable of the same type which contains entries from this\\nIterable as long as the <code><span class=\\\"t param\\\">predicate</span></code> returns false.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'dog'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'frog'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'cat'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'hat'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'god'</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>takeUntil<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>match<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token regex\\\" >/at/</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ['dog', 'frog']</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":719}]},\"#valueSeq\":{\"doc\":{\"synopsis\":\"<p>Returns a new IndexedSeq of the values of this Iterable,\\ndiscarding keys.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"V\"}]},\"line\":728}]},\"#size\":{\"line\":736}}}]}},\"KeyedIterable\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Similar to <code><span class=\\\"token qualifier\\\" >Iterable</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, however it expects iterable-likes of [K, V]\\ntuples if not constructed from a KeyedIterable or JS Object.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":755},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":756},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":757},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":758},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":759},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":760}]},\"interface\":{\"line\":763,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns KeyedSeq.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":769}]},\"#flip\":{\"doc\":{\"synopsis\":\"<p>Returns a new KeyedIterable of the same type where the keys and values\\nhave been flipped.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'z'</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >'y'</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flip<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { z: 'a', y: 'b' }</span></code>\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"V\"},{\"k\":8,\"param\":\"K\"}]},\"line\":779}]},\"#findKey\":{\"doc\":{\"synopsis\":\"<p>Returns the key for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"K\"},\"line\":784}]},\"#findLastKey\":{\"doc\":{\"synopsis\":\"<p>Returns the last key for which the <code><span class=\\\"t param\\\">predicate</span></code> returns true.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"t param\\\">predicate</span></code> will be called for each entry in reverse.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"K\"},\"line\":794}]},\"#keyOf\":{\"doc\":{\"synopsis\":\"<p>Returns the key associated with the search value, or undefined.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchValue\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"K\"},\"line\":802}]},\"#lastKeyOf\":{\"doc\":{\"synopsis\":\"<p>Returns the last key associated with the search value, or undefined.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchValue\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"K\"},\"line\":807}]},\"#mapEntries\":{\"doc\":{\"synopsis\":\"<p>Returns a new KeyedIterable of the same type with entries\\n([key, value] tuples) passed through a <code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>mapEntries<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span>k<span class=\\\"token punctuation\\\" >,</span> v<span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token punctuation\\\" >[</span>k<span class=\\\"token punctuation\\\" >.</span>toUpperCase<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >,</span> v <span class=\\\"token operator\\\" >*</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { A: 2, B: 4 }</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"KM\",\"VM\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"entry\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]},\"optional\":true},{\"name\":\"index\",\"type\":{\"k\":2},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"KM\"},{\"k\":8,\"param\":\"VM\"}]},\"line\":818}]},\"#mapKeys\":{\"doc\":{\"synopsis\":\"<p>Returns a new KeyedIterable of the same type with keys passed through a\\n<code><span class=\\\"t param\\\">mapper</span></code> function.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>mapKeys<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x<span class=\\\"token punctuation\\\" >.</span>toUpperCase<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq { A: 1, B: 2 }</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"M\"],\"params\":[{\"name\":\"mapper\",\"type\":{\"k\":7,\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"},\"optional\":true},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"M\"}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"M\"},{\"k\":8,\"param\":\"V\"}]},\"line\":832}]}}}]}},\"IndexedIterable\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Similar to <code><span class=\\\"token qualifier\\\" >Iterable</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, but always returns an IndexedIterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":861},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":862},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":0}]},\"line\":863},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":864},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":865},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":866}]},\"interface\":{\"line\":869,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":2},{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns IndexedSeq.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":875}]}}},{\"title\":\"### ES6 Collection methods (ES6 Array and Map)\",\"members\":{\"#findIndex\":{\"doc\":{\"synopsis\":\"<p>Returns the first index in the Iterable where a value satisfies the\\nprovided predicate function. Otherwise -1 is returned.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true},{\"name\":\"index\",\"type\":{\"k\":2},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":2},\"line\":884}]},\"#indexOf\":{\"doc\":{\"synopsis\":\"<p>Returns the first index at which a given value can be found in the\\nIterable, or -1 if it is not present.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchValue\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":2},\"line\":893}]},\"#lastIndexOf\":{\"doc\":{\"synopsis\":\"<p>Returns the last index at which a given value can be found in the\\nIterable, or -1 if it is not present.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"searchValue\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":2},\"line\":899}]},\"#splice\":{\"doc\":{\"synopsis\":\"<p>Splice returns a new indexed Iterable by replacing a region of this\\nIterable with new values. If values are not provided, it only skips the\\nregion to be removed.</p>\\n\",\"description\":\"<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nIterable. <code>s<span class=\\\"token punctuation\\\" >.</span>splice<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span></code> splices after the second to last item.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token string\\\" >'d'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>splice<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'q'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'r'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'s'</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Seq ['a', 'q', 'r', 's', 'd']</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"removeNum\",\"type\":{\"k\":2}},{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":0}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":913}]}}},{\"title\":\"### More collection methods\",\"members\":{\"#findLastIndex\":{\"doc\":{\"synopsis\":\"<p>Returns the last index in the Iterable where a value satisfies the\\nprovided predicate function. Otherwise -1 is returned.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"predicate\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true},{\"name\":\"index\",\"type\":{\"k\":2},\"optional\":true},{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"optional\":true}],\"type\":{\"k\":1}}},{\"name\":\"context\",\"type\":{\"k\":0},\"optional\":true}],\"type\":{\"k\":2},\"line\":926}]},\"#fromEntrySeq\":{\"doc\":{\"synopsis\":\"<p>If this is an iterable of [key, value] entry tuples, it will return a\\nKeyedSeq of those entries.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":0},{\"k\":0}]},\"line\":935}]},\"#get\":{\"doc\":{\"synopsis\":\"<p>Returns the value associated with the provided index, or notSetValue if\\nthe index is beyond the bounds of the Iterable.</p>\\n\",\"description\":\"<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nIterable. <code>s<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code> gets the last item in the Iterable.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"T\"},\"line\":944}]},\"#interpose\":{\"doc\":{\"synopsis\":\"<p>Returns an Iterable of the same type with <code><span class=\\\"t param\\\">separator</span></code> between each item\\nin this Iterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"separator\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":950}]}}}]}},\"SetIterable\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Similar to <code><span class=\\\"token qualifier\\\" >Iterable</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, but always returns a SetIterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":973},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":974},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":0}]},\"line\":975},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":976},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":977},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":978}]},\"interface\":{\"line\":981,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns SetSeq.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":987}]}}}]}},\"Seq\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"seq\\\">Seq</h2>\\n\",\"description\":\"<p><strong>Sequences are immutable</strong> — Once a sequence is created, it cannot be\\nchanged, appended to, rearranged or otherwise modified. Instead, any mutative\\nmethod called on a sequence will return a new immutable sequence.</p>\\n<p><strong>Sequences are lazy</strong> — Sequences do as little work as necessary to respond\\nto any method call.</p>\\n<p>For example, the following does no work, because the resulting sequence is\\nnever used:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> oddSquares <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >6</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >7</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >8</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code><p>Once the sequence is used, it performs only the work necessary. In this\\nexample, no intermediate arrays are ever created, filter is only called\\nthree times, and map is only called twice:</p>\\n<code class=\\\"codeBlock\\\">console<span class=\\\"token punctuation\\\" >.</span>log<span class=\\\"token punctuation\\\" >(</span>evenSquares<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 9</span></code><p>Lazy Sequences allow for the efficient chaining of sequence operations,\\nallowing for the expression of logic that can otherwise be very tedious:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>flip<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>key <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> key<span class=\\\"token punctuation\\\" >.</span>toUpperCase<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>flip<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>toObject<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Map { A: 1, B: 1, C: 1 }</span></code><p>As well as expressing logic that would otherwise seem memory-limited:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >Infinity</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>skip<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1000</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>n <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token operator\\\" >-</span>n<span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>filter<span class=\\\"token punctuation\\\" >(</span>n <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> n <span class=\\\"token operator\\\" >%</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>take<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span>\\n  <span class=\\\"token punctuation\\\" >.</span>reduce<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>r<span class=\\\"token punctuation\\\" >,</span> n<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> r <span class=\\\"token operator\\\" >*</span> n<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1006008</span></code>\",\"notes\":[]},\"module\":{\"isSeq\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if <code><span class=\\\"t param\\\">maybeSeq</span></code> is a Seq, it is not backed by a concrete\\nstructure such as Map, List, or Set.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeSeq\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1038}]}},\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a Seq of the values provided. Alias for <code><span class=\\\"token qualifier\\\" >Indexed</span><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1043}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> returns a particular kind of Sequence based\\non the input.</p>\\n\",\"description\":\"<ul>\\n<li>If a <code><span class=\\\"token qualifier\\\" >Seq</span></code>, that same <code><span class=\\\"token qualifier\\\" >Seq</span></code>.</li>\\n<li>If an <code><span class=\\\"token qualifier\\\" >Iterable</span></code>, a <code><span class=\\\"token qualifier\\\" >Seq</span></code> of the same kind (Keyed, Indexed, or Set).</li>\\n<li>If an Array-like, an <code><span class=\\\"token qualifier\\\" >Indexed</span><span class=\\\"token qualifier\\\" >Seq</span></code>.</li>\\n<li>If an Object with an Iterator, an <code><span class=\\\"token qualifier\\\" >Indexed</span><span class=\\\"token qualifier\\\" >Seq</span></code>.</li>\\n<li>If an Iterator, an <code><span class=\\\"token qualifier\\\" >Indexed</span><span class=\\\"token qualifier\\\" >Seq</span></code>.</li>\\n<li>If an Object, a <code><span class=\\\"token qualifier\\\" >Keyed</span><span class=\\\"token qualifier\\\" >Seq</span></code>.</li>\\n</ul>\\n\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1058},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1059},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1060},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1061},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":1062},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1063},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1064}]},\"interface\":{\"line\":1066,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#size\":{\"line\":1078},\"#cacheResult\":{\"doc\":{\"synopsis\":\"<p>Because Sequences are lazy and designed to be chained together, they do\\nnot cache their results. For example, this map function is called 6 times:</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> squares <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nsquares<span class=\\\"token punctuation\\\" >.</span>join<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >+</span> squares<span class=\\\"token punctuation\\\" >.</span>join<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code><p>If you know a derived sequence will be used multiple times, it may be more\\nefficient to first cache it. Here, map is called 3 times:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> squares <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Seq</span><span class=\\\"token punctuation\\\" >.</span>of<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>map<span class=\\\"token punctuation\\\" >(</span>x <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> x <span class=\\\"token operator\\\" >*</span> x<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span>cacheResult<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nsquares<span class=\\\"token punctuation\\\" >.</span>join<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >+</span> squares<span class=\\\"token punctuation\\\" >.</span>join<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code><p>Use this method judiciously, as it must fully evaluate a Seq.</p>\\n<p>Note: after calling <code>cacheResult<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, a Seq will always have a size.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1097}]}}}]}},\"KeyedSeq\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Always returns a KeyedSeq, if input is not keyed, expects an\\niterable of [K, V] tuples.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1105},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1106},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1107},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1108},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":1109},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1110},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1111}]},\"interface\":{\"line\":1113,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns itself</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1118}]}}}]}},\"IndexedSeq\":{\"module\":{\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Provides an IndexedSeq of the values provided.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1127}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Always returns IndexedSeq, discarding associated keys and\\nsupplying incrementing indices.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1134},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1135},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1136},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":0}]},\"line\":1137},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1138},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1139},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1140}]},\"interface\":{\"line\":1142,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":2},{\"k\":8,\"param\":\"T\"}]},{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns itself</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1147}]}}}]}},\"SetSeq\":{\"module\":{\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Returns a SetSeq of the provided values</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1155}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Always returns a SetSeq, discarding associated indices or keys.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1161},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1162},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1163},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"seq\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":0}]},\"line\":1164},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1165},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1166},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1167}]},\"interface\":{\"line\":1169,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Seq\",\"args\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"T\"}]},{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns itself</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1174}]}}}]}},\"Range\":{\"call\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"range\\\">Range</h2>\\n\",\"description\":\"<p>Returns a IndexedSeq of numbers from <code><span class=\\\"t param\\\">start</span></code> (inclusive) to <code><span class=\\\"t param\\\">end</span></code>\\n(exclusive), by <code><span class=\\\"t param\\\">step</span></code>, where <code><span class=\\\"t param\\\">start</span></code> defaults to 0, <code><span class=\\\"t param\\\">step</span></code> to 1, and <code><span class=\\\"t param\\\">end</span></code> to\\ninfinity. When <code><span class=\\\"t param\\\">start</span></code> is equal to <code><span class=\\\"t param\\\">end</span></code>, returns empty range.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [0,1,2,3,...]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [10,11,12,13,...]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >15</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [10,11,12,13,14]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [10,15,20,25]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// [30,25,20,15]\\n</span><span class=\\\"token qualifier\\\" >Range</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >5</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// []</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"start\",\"type\":{\"k\":2},\"optional\":true},{\"name\":\"end\",\"type\":{\"k\":2},\"optional\":true},{\"name\":\"step\",\"type\":{\"k\":2},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":2}]},\"line\":1194}]}},\"Repeat\":{\"call\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"repeat\\\">Repeat</h2>\\n\",\"description\":\"<p>Returns a IndexedSeq of <code><span class=\\\"t param\\\">value</span></code> repeated <code><span class=\\\"t param\\\">times</span></code> times. When <code><span class=\\\"t param\\\">times</span></code> is\\nnot defined, returns an infinite sequence of <code><span class=\\\"t param\\\">value</span></code>.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token qualifier\\\" >Repeat</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'foo'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ['foo','foo','foo',...]\\n</span><span class=\\\"token qualifier\\\" >Repeat</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'bar'</span><span class=\\\"token punctuation\\\" >,</span><span class=\\\"token number\\\" >4</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ['bar','bar','bar','bar']</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"times\",\"type\":{\"k\":2},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1208}]}},\"Collection\":{\"interface\":{\"line\":1215,\"doc\":{\"synopsis\":\"<h2 id=\\\"collections\\\">Collections</h2>\\n\",\"description\":\"\",\"notes\":[]},\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#size\":{\"line\":1220}}}]}},\"KeyedCollection\":{\"interface\":{\"line\":1223,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns KeyedSeq.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"KeyedSeq\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1229}]}}}]}},\"IndexedCollection\":{\"interface\":{\"line\":1232,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":2},{\"k\":8,\"param\":\"T\"}]},{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns IndexedSeq.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"IndexedSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1238}]}}}]}},\"SetCollection\":{\"interface\":{\"line\":1241,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"Collection\",\"args\":[{\"k\":8,\"param\":\"T\"},{\"k\":8,\"param\":\"T\"}]},{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#toSeq\":{\"doc\":{\"synopsis\":\"<p>Returns SetSeq.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"SetSeq\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1247}]}}}]}},\"Map\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"map\\\">Map</h2>\\n\",\"description\":\"<p>A Map is a Iterable of (key, value) pairs with <code>O<span class=\\\"token punctuation\\\" >(</span>log32 N<span class=\\\"token punctuation\\\" >)</span></code> gets and sets.</p>\\n<p>Map is a hash map and requires keys that are hashable, either a primitive\\n(string or number) or an object with a <code>hashCode<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >:</span> number</code> method.</p>\\n<p>Iteration order of a Map is undefined, however is stable. Multiple iterations\\nof the same Map will iterate in the same order.</p>\\n\",\"notes\":[]},\"module\":{\"isMap\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is a Map</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeMap\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1269}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a new immutable Map with the same key value pairs as\\nthe provided KeyedIterable or JavaScript Object or expects an Iterable\\nof [K, V] tuple entries.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> newMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>key<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >\\\"value\\\"</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >var</span> newMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >\\\"key\\\"</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >\\\"value\\\"</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1281},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1282},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1283},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1284},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":1285},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1286},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1287}]},\"interface\":{\"line\":1290,\"typeParams\":[\"K\",\"V\"],\"extends\":[{\"k\":9,\"name\":\"KeyedCollection\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}],\"groups\":[{\"members\":{\"#set\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map also containing the new key, value pair. If an equivalent\\nkey already exists in this Map, it will be replaced.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1296}]},\"#setIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map having set <code><span class=\\\"t param\\\">value</span></code> at this <code><span class=\\\"t param\\\">keyPath</span></code>. If any keys in\\n<code><span class=\\\"t param\\\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1302}]},\"#remove\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map which excludes this <code><span class=\\\"t param\\\">key</span></code>.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token keyword\\\" >delete</span></code> cannot be safely used in IE8</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"delete\"}]},\"signatures\":[{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1310}]},\"#removeIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map having removed the value at this <code><span class=\\\"t param\\\">keyPath</span></code>. If any keys\\nin <code><span class=\\\"t param\\\">keyPath</span></code> do not exist, a new immutable Map will be created at\\nthat key.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1318}]},\"#clear\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map containing no keys or values.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1323}]},\"#update\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map having updated the value at this <code><span class=\\\"t param\\\">key</span></code> with the return\\nvalue of calling <code><span class=\\\"t param\\\">updater</span></code> with the existing value, or <code><span class=\\\"t param\\\">notSetValue</span></code> if\\nthe key was not set. If called with only a single argument, <code><span class=\\\"t param\\\">updater</span></code> is\\ncalled with the Map itself.</p>\\n\",\"description\":\"<p>Equivalent to: <code>map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >,</span> updater<span class=\\\"token punctuation\\\" >(</span>map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span>key<span class=\\\"token punctuation\\\" >,</span> notSetValue<span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1333},{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1334},{\"params\":[{\"name\":\"key\",\"type\":{\"k\":8,\"param\":\"K\"}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"V\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"V\"}}],\"type\":{\"k\":8,\"param\":\"V\"}}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1335}]},\"#updateIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map having applied the <code><span class=\\\"t param\\\">updater</span></code> to the entry found at the\\nkeyPath. If any keys in <code><span class=\\\"t param\\\">keyPath</span></code> do not exist, a new immutable Map will\\nbe created at that key. If the <code><span class=\\\"t param\\\">keyPath</span></code> was not previously set,\\n<code><span class=\\\"t param\\\">updater</span></code> is called with <code><span class=\\\"t param\\\">notSetValue</span></code> (if provided).</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> data <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>fromJS<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\ndata<span class=\\\"token punctuation\\\" >.</span>updateIn<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >,</span> map <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'d'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { a: { b: { c: 10, d: 20 } } }</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1348},{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}},{\"name\":\"notSetValue\",\"type\":{\"k\":0}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1352}]},\"#merge\":{\"doc\":{\"synopsis\":\"<p>Returns a new Map resulting from merging the provided Iterables\\n(or JS objects) into this Map. In other words, this takes each entry of\\neach iterable and sets it on this Map.</p>\\n\",\"description\":\"<p>If any of the values provided to <code>merge</code> are not Iterable (would return\\nfalse for <code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>isIterable</code>) then they are deeply converted via\\n<code><span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>fromJS</code> before being merged. However, if the value is an\\nIterable but contains non-iterable JS objects or arrays, those nested\\nvalues will be preserved.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> x <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >var</span> y <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >40</span><span class=\\\"token punctuation\\\" >,</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >50</span><span class=\\\"token punctuation\\\" >,</span> d<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >60</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nx<span class=\\\"token punctuation\\\" >.</span>merge<span class=\\\"token punctuation\\\" >(</span>y<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { a: 50, b: 40, c: 30, d: 60 }\\n</span>y<span class=\\\"token punctuation\\\" >.</span>merge<span class=\\\"token punctuation\\\" >(</span>x<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { b: 20, a: 10, d: 60, c: 30 }</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1375},{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":1376}]},\"#mergeWith\":{\"doc\":{\"synopsis\":\"<p>Like <code>merge<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, <code>mergeWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> returns a new Map resulting from merging\\nthe provided Iterables (or JS objects) into this Map, but uses the\\n<code><span class=\\\"t param\\\">merger</span></code> function for dealing with conflicts.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> x <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >30</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >var</span> y <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >40</span><span class=\\\"token punctuation\\\" >,</span> a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >50</span><span class=\\\"token punctuation\\\" >,</span> d<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >60</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nx<span class=\\\"token punctuation\\\" >.</span>mergeWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>prev<span class=\\\"token punctuation\\\" >,</span> next<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> prev <span class=\\\"token operator\\\" >/</span> next<span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { a: 0.2, b: 0.5, c: 30, d: 60 }\\n</span>y<span class=\\\"token punctuation\\\" >.</span>mergeWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>prev<span class=\\\"token punctuation\\\" >,</span> next<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> prev <span class=\\\"token operator\\\" >/</span> next<span class=\\\"token punctuation\\\" >,</span> x<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// { b: 2, a: 5, d: 60, c: 30 }</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"previous\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"next\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"}}},{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1389},{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"previous\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"next\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"}}},{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":1393}]},\"#mergeDeep\":{\"doc\":{\"synopsis\":\"<p>Like <code>merge<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, but when two Iterables conflict, it merges them as well,\\nrecursing deeply through the nested data.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> x <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>fromJS<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >50</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >var</span> y <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>fromJS<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nx<span class=\\\"token punctuation\\\" >.</span>mergeDeep<span class=\\\"token punctuation\\\" >(</span>y<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// {a: { x: 2, y: 10 }, b: { x: 20, y: 5 }, c: { z: 3 } }</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1407},{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":1408}]},\"#mergeDeepWith\":{\"doc\":{\"synopsis\":\"<p>Like <code>mergeDeep<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, but when two non-Iterables conflict, it uses the\\n<code><span class=\\\"t param\\\">merger</span></code> function to determine the resulting value.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> x <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>fromJS<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >10</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >20</span><span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >50</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >var</span> y <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span>fromJS<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> x<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >2</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> y<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >,</span> c<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token punctuation\\\" >{</span> z<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token number\\\" >3</span> <span class=\\\"token punctuation\\\" >}</span> <span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nx<span class=\\\"token punctuation\\\" >.</span>mergeDeepWith<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >(</span>prev<span class=\\\"token punctuation\\\" >,</span> next<span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> prev <span class=\\\"token operator\\\" >/</span> next<span class=\\\"token punctuation\\\" >,</span> y<span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// {a: { x: 5, y: 10 }, b: { x: 20, y: 10 }, c: { z: 3 } }</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"previous\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"next\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"}}},{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1420},{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"previous\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true},{\"name\":\"next\",\"type\":{\"k\":8,\"param\":\"V\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"V\"}}},{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":1424}]},\"#withMutations\":{\"doc\":{\"synopsis\":\"<p>Every time you call one of the above functions, a new immutable Map is\\ncreated. If a pure function calls a number of these to produce a final\\nreturn value, then a penalty on performance and memory has been paid by\\ncreating all of the intermediate immutable Maps.</p>\\n\",\"description\":\"<p>If you need to apply a series of mutations to produce a new immutable\\nMap, <code>withMutations<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a temporary mutable copy of the Map which\\ncan apply mutations in a highly performant manner. In fact, this is\\nexactly how complex mutations like <code>merge</code> are done.</p>\\n<p>As an example, this results in the creation of 2, not 4, new Maps:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> map1 <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Immutable</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >var</span> map2 <span class=\\\"token operator\\\" >=</span> map1<span class=\\\"token punctuation\\\" >.</span>withMutations<span class=\\\"token punctuation\\\" >(</span>map <span class=\\\"token operator\\\" >=</span><span class=\\\"token operator\\\" >></span> <span class=\\\"token punctuation\\\" >{</span>\\n  map<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'c'</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >(</span>map1<span class=\\\"token punctuation\\\" >.</span>size <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >0</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\nassert<span class=\\\"token punctuation\\\" >(</span>map2<span class=\\\"token punctuation\\\" >.</span>size <span class=\\\"token operator\\\" >===</span> <span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"mutator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"mutable\",\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1450}]},\"#asMutable\":{\"doc\":{\"synopsis\":\"<p>Another way to avoid creation of intermediate Immutable maps is to create\\na mutable copy of this collection. Mutable copies <em>always</em> return <code><span class=\\\"token var\\\" >this</span></code>,\\nand thus shouldn&#39;t be used for equality. Your function should never return\\na mutable copy of a collection, only use it internally to create a new\\ncollection. If possible, use <code>withMutations</code> as it provides an easier to\\nuse API.</p>\\n\",\"description\":\"<p>Note: if the collection is already mutable, <code>asMutable</code> returns itself.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1462}]},\"#asImmutable\":{\"doc\":{\"synopsis\":\"<p>The yin to <code>asMutable</code>&#39;s yang. Because it applies to mutable collections,\\nthis operation is <em>mutable</em> and returns itself. Once performed, the mutable\\ncopy has become immutable and can be safely returned from a function.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1469}]}}}]}},\"OrderedMap\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"ordered-map\\\">Ordered Map</h2>\\n\",\"description\":\"<p>OrderedMap constructors return a Map which has the additional guarantee of\\nthe iteration order of entries to match the order in which they were set().\\nThis makes OrderedMap behave similarly to native JS objects.</p>\\n\",\"notes\":[]},\"module\":{\"isOrderedMap\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is an OrderedMap.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeOrderedMap\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1487}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a new immutable ordered Map with the same key\\nvalue pairs as the provided KeyedIterable or JavaScript Object or expects\\nan Iterable of [K, V] tuple entries.</p>\\n\",\"description\":\"<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> newOrderedMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>key<span class=\\\"token punctuation\\\" >:</span> <span class=\\\"token string\\\" >\\\"value\\\"</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span>\\n<span class=\\\"token keyword\\\" >var</span> newOrderedMap <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token punctuation\\\" >[</span><span class=\\\"token string\\\" >\\\"key\\\"</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >\\\"value\\\"</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >]</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >;</span></code>\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"K\",\"V\"],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1499},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1500},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1501},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1502},{\"typeParams\":[\"V\"],\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":8,\"param\":\"V\"}}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":3},{\"k\":8,\"param\":\"V\"}]},\"line\":1503},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}]}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1504},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"Map\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]},\"line\":1505}]}},\"Record\":{\"call\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"record\\\">Record</h2>\\n\",\"description\":\"<p>Creates a new Class which produces Record instances. A record is similar to\\na JS object, but enforce a specific set of allowed string keys, and have\\ndefault values.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> ABRecord <span class=\\\"token operator\\\" >=</span> <span class=\\\"token qualifier\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\n<span class=\\\"token keyword\\\" >var</span> myRecord <span class=\\\"token operator\\\" >=</span> <span class=\\\"token keyword\\\" >new</span> <span class=\\\"token class-name\\\" >ABRecord</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span></code><p>Records always have a value for the keys they define. <code>remove</code>ing a key\\nfrom a record simply resets it to the default value for that key.</p>\\n<code class=\\\"codeBlock\\\">myRecord<span class=\\\"token punctuation\\\" >.</span>size <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2\\n</span>myRecord<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'a'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1\\n</span>myRecord<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3\\n</span>myRecordWithoutB <span class=\\\"token operator\\\" >=</span> myRecord<span class=\\\"token punctuation\\\" >.</span>remove<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >)</span>\\nmyRecordWithoutB<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'b'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2\\n</span>myRecordWithoutB<span class=\\\"token punctuation\\\" >.</span>size <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span></code><p>Values provided to the constructor not found in the Record type will\\nbe ignored:</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >var</span> myRecord <span class=\\\"token operator\\\" >=</span> <span class=\\\"token keyword\\\" >new</span> <span class=\\\"token class-name\\\" >ABRecord</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >,</span> x<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >10</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span>\\nmyRecord<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >get</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token string\\\" >'x'</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// undefined</span></code><p>Because Records have a known set of string keys, property get access works\\nas expected, however property sets will throw an Error.</p>\\n<p>Note: IE8 does not support property access.</p>\\n<code class=\\\"codeBlock\\\">myRecord<span class=\\\"token punctuation\\\" >.</span>b <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3\\n</span>myRecord<span class=\\\"token punctuation\\\" >.</span>b <span class=\\\"token operator\\\" >=</span> <span class=\\\"token number\\\" >5</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// throws Error</span></code><p>Record Classes can be extended as well, allowing for custom methods on your\\nRecord. This is not a common pattern in functional environments, but is in\\nmany JS programs.</p>\\n<p>Note: TypeScript does not support this type of subclassing.</p>\\n<code class=\\\"codeBlock\\\"><span class=\\\"token keyword\\\" >class</span> <span class=\\\"token class-name\\\" >ABRecord</span> <span class=\\\"token keyword\\\" >extends</span> <span class=\\\"token class-name\\\" >Record</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >{</span>a<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span>b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >2</span><span class=\\\"token punctuation\\\" >}</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n  getAB<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token punctuation\\\" >{</span>\\n    <span class=\\\"token keyword\\\" >return</span> <span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>a <span class=\\\"token operator\\\" >+</span> <span class=\\\"token var\\\" >this</span><span class=\\\"token punctuation\\\" >.</span>b<span class=\\\"token punctuation\\\" >;</span>\\n  <span class=\\\"token punctuation\\\" >}</span>\\n<span class=\\\"token punctuation\\\" >}</span>\\n\\n<span class=\\\"token keyword\\\" >var</span> myRecord <span class=\\\"token operator\\\" >=</span> <span class=\\\"token keyword\\\" >new</span> <span class=\\\"token class-name\\\" >ABRecord</span><span class=\\\"token punctuation\\\" >(</span>b<span class=\\\"token punctuation\\\" >:</span><span class=\\\"token number\\\" >3</span><span class=\\\"token punctuation\\\" >)</span>\\nmyRecord<span class=\\\"token punctuation\\\" >.</span>getAB<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 4</span></code>\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"defaultValues\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}},{\"name\":\"name\",\"type\":{\"k\":3},\"optional\":true}],\"type\":{\"k\":9,\"name\":\"RecordType\"},\"line\":1559}]}},\"RecordType\":{\"interface\":{\"line\":1563}},\"Set\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"set\\\">Set</h2>\\n\",\"description\":\"<p>A Set is a Iterable of unique values with <code>O<span class=\\\"token punctuation\\\" >(</span>log32 N<span class=\\\"token punctuation\\\" >)</span></code> gets and sets.</p>\\n<p>Sets, like Maps, require that their values are hashable, either a primitive\\n(string or number) or an object with a <code>hashCode<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span><span class=\\\"token punctuation\\\" >:</span> number</code> method.</p>\\n<p>When iterating a Set, the entries will be (value, value) pairs. Iteration\\norder of a Set is undefined, however is stable. Multiple iterations of the\\nsame Set will iterate in the same order.</p>\\n\",\"notes\":[]},\"module\":{\"isSet\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is a Set</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeSet\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1589}]}},\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new Set containing <code><span class=\\\"t param\\\">values</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1594}]}},\"fromKeys\":{\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >.</span>fromKeys<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a new immutable Set containing the keys from\\nthis Iterable or JavaScript Object.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"},{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1600},{\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":3}]},\"line\":1601}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Create a new immutable Set containing the values of the provided\\niterable-like.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1608},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1609},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1610},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":0}]},\"line\":1611},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1612},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1613},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1614}]},\"interface\":{\"line\":1617,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"SetCollection\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#add\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set which also includes this value.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1622}]},\"#remove\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set which excludes this value.</p>\\n\",\"description\":\"<p>Note: <code><span class=\\\"token keyword\\\" >delete</span></code> cannot be safely used in IE8</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"delete\"}]},\"signatures\":[{\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1630}]},\"#clear\":{\"doc\":{\"synopsis\":\"<p>Returns a new Set containing no values.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1636}]},\"#merge\":{\"doc\":{\"synopsis\":\"<p>Alias for <code>union</code>.</p>\\n\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>merge</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1642},{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1643}]},\"#union\":{\"doc\":{\"synopsis\":\"<p>Returns a Set including any value from <code><span class=\\\"t param\\\">iterables</span></code> that does not already\\nexist in this Set.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1649},{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1650}]},\"#intersect\":{\"doc\":{\"synopsis\":\"<p>Returns a Set which has removed any values not also contained\\nwithin <code><span class=\\\"t param\\\">iterables</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1656},{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1657}]},\"#subtract\":{\"doc\":{\"synopsis\":\"<p>Returns a Set excluding any values contained within <code><span class=\\\"t param\\\">iterables</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1662},{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1663}]},\"#withMutations\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>withMutations</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"mutator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"mutable\",\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1668}]},\"#asMutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>asMutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1673}]},\"#asImmutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>asImmutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1678}]}}}]}},\"OrderedSet\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"ordered-set\\\">Ordered Set</h2>\\n\",\"description\":\"<p>OrderedSet constructors return a Set which has the additional guarantee of\\nthe iteration order of entries to match the order in which they were added.\\nThis makes OrderedSet behave similarly to native JS objects or arrays.</p>\\n\",\"notes\":[]},\"module\":{\"isOrderedSet\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is an OrderedSet.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeOrderedSet\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1696}]}},\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new ordered Set containing <code><span class=\\\"t param\\\">values</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1701}]}},\"fromKeys\":{\"call\":{\"doc\":{\"synopsis\":\"<p><code><span class=\\\"token qualifier\\\" >Ordered</span><span class=\\\"token qualifier\\\" >Set</span><span class=\\\"token punctuation\\\" >.</span>fromKeys<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> creates a new immutable ordered Set containing\\nthe keys from this Iterable or JavaScript Object.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":8,\"param\":\"T\"},{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1707},{\"params\":[{\"name\":\"obj\",\"type\":{\"k\":4,\"members\":[{\"index\":true,\"params\":[{\"name\":\"key\",\"type\":{\"k\":3}}],\"type\":{\"k\":0}}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":3}]},\"line\":1708}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Create a new immutable ordered Set containing the values of the provided\\niterable-like.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1715},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1716},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1717},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":0}]},\"line\":1718},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1719},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1720},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"Set\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1721}]}},\"List\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"list\\\">List</h2>\\n\",\"description\":\"<p>Lists are ordered indexed dense collections, much like a JavaScript\\nArray. Unlike a JavaScript Array, there is no distinction between an\\n&quot;unset&quot; index and an index set to <code><span class=\\\"token primitive\\\" >undefined</span></code>. <code><span class=\\\"token qualifier\\\" >List</span>#forEach</code> visits all\\nindices from 0 to size, regardless of if they are defined.</p>\\n\",\"notes\":[]},\"module\":{\"isList\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is a List</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeList\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1739}]}},\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new List containing <code><span class=\\\"t param\\\">values</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1744}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Create a new immutable List containing the values of the provided\\niterable-like.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1751},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1752},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1753},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":0}]},\"line\":1754},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1755},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1756},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1757}]},\"interface\":{\"line\":1760,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"IndexedCollection\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#set\":{\"doc\":{\"synopsis\":\"<p>Returns a new List which includes <code><span class=\\\"t param\\\">value</span></code> at <code><span class=\\\"t param\\\">index</span></code>. If <code><span class=\\\"t param\\\">index</span></code> already\\nexists in this List, it will be replaced.</p>\\n\",\"description\":\"<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nList. <code>v<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >set</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token string\\\" >\\\"value\\\"</span><span class=\\\"token punctuation\\\" >)</span></code> sets the last item in the List.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1769}]},\"#setIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new List having set <code><span class=\\\"t param\\\">value</span></code> at this <code><span class=\\\"t param\\\">keyPath</span></code>. If any keys in\\n<code><span class=\\\"t param\\\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}},{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1775}]},\"#remove\":{\"doc\":{\"synopsis\":\"<p>Returns a new List which excludes this <code><span class=\\\"t param\\\">index</span></code> and with a size 1 less\\nthan this List. Values at indicies above <code><span class=\\\"t param\\\">index</span></code> are shifted down by 1 to\\nfill the position.</p>\\n\",\"description\":\"<p>This is synonymous with <code>list<span class=\\\"token punctuation\\\" >.</span>splice<span class=\\\"token punctuation\\\" >(</span>index<span class=\\\"token punctuation\\\" >,</span> <span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nList. <code>v<span class=\\\"token punctuation\\\" >.</span><span class=\\\"token keyword\\\" >delete</span><span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code> deletes the last item in the List.</p>\\n<p>Note: <code><span class=\\\"token keyword\\\" >delete</span></code> cannot be safely used in IE8</p>\\n\",\"notes\":[{\"name\":\"alias\",\"body\":\"delete\"}]},\"signatures\":[{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1790}]},\"#removeIn\":{\"doc\":{\"synopsis\":\"<p>Returns a new List having removed the value at this <code><span class=\\\"t param\\\">keyPath</span></code>. If any\\nkeys in <code><span class=\\\"t param\\\">keyPath</span></code> do not exist, a new immutable Map will be created at\\nthat key.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1798}]},\"#clear\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with 0 size and no values.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1803}]},\"#push\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with the provided <code><span class=\\\"t param\\\">values</span></code> appended, starting at this\\nList&#39;s <code>size</code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1809}]},\"#pop\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with a size ones less than this List, excluding\\nthe last index in this List.</p>\\n\",\"description\":\"<p>Note: this differs from <code><span class=\\\"token qualifier\\\" >Array</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>pop</code> because it returns a new\\nList rather than the removed value. Use <code>last<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> to get the last value\\nin this List.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1819}]},\"#unshift\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with the provided <code><span class=\\\"t param\\\">values</span></code> prepended, shifting other\\nvalues ahead to higher indices.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1825}]},\"#shift\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with a size ones less than this List, excluding\\nthe first index in this List, shifting all other values to a lower index.</p>\\n\",\"description\":\"<p>Note: this differs from <code><span class=\\\"token qualifier\\\" >Array</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>shift</code> because it returns a new\\nList rather than the removed value. Use <code>first<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> to get the first\\nvalue in this List.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1835}]},\"#update\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with an updated value at <code><span class=\\\"t param\\\">index</span></code> with the return\\nvalue of calling <code><span class=\\\"t param\\\">updater</span></code> with the existing value, or <code><span class=\\\"t param\\\">notSetValue</span></code> if\\n<code><span class=\\\"t param\\\">index</span></code> was not set. If called with a single argument, <code><span class=\\\"t param\\\">updater</span></code> is\\ncalled with the List itself.</p>\\n\",\"description\":\"<p><code><span class=\\\"t param\\\">index</span></code> may be a negative number, which indexes back from the end of the\\nList. <code>v<span class=\\\"token punctuation\\\" >.</span>update<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token operator\\\" >-</span><span class=\\\"token number\\\" >1</span><span class=\\\"token punctuation\\\" >)</span></code> updates the last item in the List.</p>\\n\",\"notes\":[{\"name\":\"see\",\"body\":\"<p>Map.update</p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1848},{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":8,\"param\":\"T\"}}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1849},{\"params\":[{\"name\":\"index\",\"type\":{\"k\":2}},{\"name\":\"notSetValue\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}}],\"type\":{\"k\":8,\"param\":\"T\"}}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1850}]},\"#updateIn\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>updateIn</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1855},{\"params\":[{\"name\":\"keyPath\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":0}]}},{\"name\":\"notSetValue\",\"type\":{\"k\":0}},{\"name\":\"updater\",\"type\":{\"k\":7,\"params\":[{\"name\":\"value\",\"type\":{\"k\":0}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1859}]},\"#merge\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>merge</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1868},{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1869}]},\"#mergeWith\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>mergeWith</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"previous\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true},{\"name\":\"next\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"T\"}}},{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1874},{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"previous\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true},{\"name\":\"next\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"T\"}}},{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1878}]},\"#mergeDeep\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>mergeDeep</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1886},{\"params\":[{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1887}]},\"#mergeDeepWith\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>mergeDeepWith</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"previous\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true},{\"name\":\"next\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"T\"}}},{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1892},{\"params\":[{\"name\":\"merger\",\"type\":{\"k\":7,\"params\":[{\"name\":\"previous\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true},{\"name\":\"next\",\"type\":{\"k\":8,\"param\":\"T\"},\"optional\":true}],\"type\":{\"k\":8,\"param\":\"T\"}}},{\"name\":\"iterables\",\"type\":{\"k\":5,\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1896}]},\"#setSize\":{\"doc\":{\"synopsis\":\"<p>Returns a new List with size <code><span class=\\\"t param\\\">size</span></code>. If <code><span class=\\\"t param\\\">size</span></code> is less than this\\nList&#39;s size, the new List will exclude values at the higher indices.\\nIf <code><span class=\\\"t param\\\">size</span></code> is greater than this List&#39;s size, the new List will have\\nundefined values for the newly available indices.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"size\",\"type\":{\"k\":2}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1907}]},\"#withMutations\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>withMutations</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"mutator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"mutable\",\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1912}]},\"#asMutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>asMutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1917}]},\"#asImmutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>asImmutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1922}]}}}]}},\"Stack\":{\"doc\":{\"synopsis\":\"<h2 id=\\\"stack\\\">Stack</h2>\\n\",\"description\":\"<p>Stacks are indexed collections which support very efficient addition and\\nremoval from the front using <code>unshift<span class=\\\"token punctuation\\\" >(</span>v<span class=\\\"token punctuation\\\" >)</span></code> and <code>shift<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n<p>For familiarity, Stack also provides <code>push<span class=\\\"token punctuation\\\" >(</span>v<span class=\\\"token punctuation\\\" >)</span></code>, <code>pop<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, and <code>peek<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>, but\\nbe aware that they also operate on the front of the list, unlike List or\\na JavaScript Array.</p>\\n\",\"notes\":[]},\"module\":{\"isStack\":{\"call\":{\"doc\":{\"synopsis\":\"<p>True if the provided value is a Stack</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"maybeStack\",\"type\":{\"k\":0}}],\"type\":{\"k\":1},\"line\":1943}]}},\"of\":{\"call\":{\"doc\":{\"synopsis\":\"<p>Creates a new Stack containing <code><span class=\\\"t param\\\">values</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1948}]}}},\"call\":{\"doc\":{\"synopsis\":\"<p>Create a new immutable Stack containing the values of the provided\\niterable.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"typeParams\":[\"T\"],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1955},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"IndexedIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1956},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"SetIterable\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1957},{\"typeParams\":[\"K\",\"V\"],\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"KeyedIterable\",\"args\":[{\"k\":8,\"param\":\"K\"},{\"k\":8,\"param\":\"V\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":0}]},\"line\":1958},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"array\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1959},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterator\",\"type\":{\"k\":9,\"name\":\"Iterator\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1960},{\"typeParams\":[\"T\"],\"params\":[{\"name\":\"iterable\",\"type\":{\"k\":9,\"name\":\"Object\"}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1961}]},\"interface\":{\"line\":1964,\"typeParams\":[\"T\"],\"extends\":[{\"k\":9,\"name\":\"IndexedCollection\",\"args\":[{\"k\":8,\"param\":\"T\"}]}],\"groups\":[{\"members\":{\"#clear\":{\"doc\":{\"synopsis\":\"<p>Returns a new Stack with 0 size and no values.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1969}]},\"#unshift\":{\"doc\":{\"synopsis\":\"<p>Returns a new Stack with the provided <code><span class=\\\"t param\\\">values</span></code> prepended, shifting other\\nvalues ahead to higher indices.</p>\\n\",\"description\":\"<p>This is very efficient for Stack.</p>\\n\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1977}]},\"#unshiftAll\":{\"doc\":{\"synopsis\":\"<p>Like <code><span class=\\\"token qualifier\\\" >Stack</span>#unshift</code>, but accepts a iterable rather than varargs.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1982},{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1983}]},\"#shift\":{\"doc\":{\"synopsis\":\"<p>Returns a new Stack with a size ones less than this Stack, excluding\\nthe first item in this Stack, shifting all other values to a lower index.</p>\\n\",\"description\":\"<p>Note: this differs from <code><span class=\\\"token qualifier\\\" >Array</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>shift</code> because it returns a new\\nStack rather than the removed value. Use <code>first<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> or <code>peek<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code> to get the\\nfirst value in this Stack.</p>\\n\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1993}]},\"#push\":{\"doc\":{\"synopsis\":\"<p>Alias for <code><span class=\\\"token qualifier\\\" >Stack</span>#unshift</code> and is not equivalent to <code><span class=\\\"token qualifier\\\" >List</span>#push</code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"values\",\"type\":{\"k\":5,\"type\":{\"k\":8,\"param\":\"T\"}},\"varArgs\":true}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":1998}]},\"#pushAll\":{\"doc\":{\"synopsis\":\"<p>Alias for <code><span class=\\\"token qualifier\\\" >Stack</span>#unshiftAll</code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Iterable\",\"args\":[{\"k\":0},{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2003},{\"params\":[{\"name\":\"iter\",\"type\":{\"k\":9,\"name\":\"Array\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2004}]},\"#pop\":{\"doc\":{\"synopsis\":\"<p>Alias for <code><span class=\\\"token qualifier\\\" >Stack</span>#shift</code> and is not equivalent to <code><span class=\\\"token qualifier\\\" >List</span>#pop</code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"Stack\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2009}]},\"#peek\":{\"doc\":{\"synopsis\":\"<p>Alias for <code><span class=\\\"token qualifier\\\" >Stack</span><span class=\\\"token punctuation\\\" >.</span>first<span class=\\\"token punctuation\\\" >(</span><span class=\\\"token punctuation\\\" >)</span></code>.</p>\\n\",\"description\":\"\",\"notes\":[]},\"signatures\":[{\"type\":{\"k\":8,\"param\":\"T\"},\"line\":2014}]},\"#withMutations\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>withMutations</code></p>\\n\"}]},\"signatures\":[{\"params\":[{\"name\":\"mutator\",\"type\":{\"k\":7,\"params\":[{\"name\":\"mutable\",\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]}}],\"type\":{\"k\":0}}}],\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2019}]},\"#asMutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>asMutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2024}]},\"#asImmutable\":{\"doc\":{\"synopsis\":\"\",\"description\":\"\",\"notes\":[{\"name\":\"see\",\"body\":\"<p><code><span class=\\\"token qualifier\\\" >Map</span><span class=\\\"token punctuation\\\" >.</span>prototype<span class=\\\"token punctuation\\\" >.</span>asImmutable</code></p>\\n\"}]},\"signatures\":[{\"type\":{\"k\":9,\"name\":\"List\",\"args\":[{\"k\":8,\"param\":\"T\"}]},\"line\":2029}]}}}]}},\"Iterator\":{\"interface\":{\"line\":2034,\"typeParams\":[\"T\"],\"groups\":[{\"members\":{\"#next\":{\"signatures\":[{\"type\":{\"k\":4,\"members\":[{\"name\":\"value\",\"type\":{\"k\":8,\"param\":\"T\"}},{\"name\":\"done\",\"type\":{\"k\":1}}]},\"line\":2035}]},\"#value\":{\"line\":2035},\"#done\":{\"line\":2035}}}]}}},\"version\":\"3.2.1\",\"isLatestVersion\":false}}");